{"version":3,"file":"react-table.production.min.js","sources":["../src/publicUtils.js","../src/utils.js","../src/makeDefaultPluginHooks.js","../src/hooks/useColumnVisibility.js","../src/hooks/useTable.js","../src/plugin-hooks/useExpanded.js","../src/filterTypes.js","../src/plugin-hooks/useFilters.js","../src/plugin-hooks/useGlobalFilter.js","../src/aggregations.js","../src/plugin-hooks/useGroupBy.js","../src/sortTypes.js","../src/plugin-hooks/useSortBy.js","../src/plugin-hooks/usePagination.js","../src/plugin-hooks/_UNSTABLE_usePivotColumns.js","../src/plugin-hooks/useRowSelect.js","../src/plugin-hooks/useRowState.js","../src/plugin-hooks/useColumnOrder.js","../src/plugin-hooks/useResizeColumns.js","../src/plugin-hooks/useAbsoluteLayout.js","../src/plugin-hooks/useBlockLayout.js","../src/plugin-hooks/useFlexLayout.js"],"sourcesContent":["import React from 'react'\r\n\r\nlet renderErr = 'Renderer Error ☝️'\r\n\r\nexport const actions = {\r\n  init: 'init',\r\n}\r\n\r\nexport const defaultColumn = {\r\n  Cell: ({ value = '' }) => value,\r\n  width: 150,\r\n  minWidth: 0,\r\n  maxWidth: Number.MAX_SAFE_INTEGER,\r\n}\r\n\r\nfunction mergeProps(...propList) {\r\n  return propList.reduce((props, next) => {\r\n    const { style, className, ...rest } = next\r\n\r\n    props = {\r\n      ...props,\r\n      ...rest,\r\n    }\r\n\r\n    if (style) {\r\n      props.style = props.style\r\n        ? { ...(props.style || {}), ...(style || {}) }\r\n        : style\r\n    }\r\n\r\n    if (className) {\r\n      props.className = props.className\r\n        ? props.className + ' ' + className\r\n        : className\r\n    }\r\n\r\n    if (props.className === '') {\r\n      delete props.className\r\n    }\r\n\r\n    return props\r\n  }, {})\r\n}\r\n\r\nfunction handlePropGetter(prevProps, userProps, meta) {\r\n  // Handle a lambda, pass it the previous props\r\n  if (typeof userProps === 'function') {\r\n    return handlePropGetter({}, userProps(prevProps, meta))\r\n  }\r\n\r\n  // Handle an array, merge each item as separate props\r\n  if (Array.isArray(userProps)) {\r\n    return mergeProps(prevProps, ...userProps)\r\n  }\r\n\r\n  // Handle an object by default, merge the two objects\r\n  return mergeProps(prevProps, userProps)\r\n}\r\n\r\nexport const makePropGetter = (hooks, meta = {}) => {\r\n  return (userProps = {}) =>\r\n    [...hooks, userProps].reduce(\r\n      (prev, next) =>\r\n        handlePropGetter(prev, next, {\r\n          ...meta,\r\n          userProps,\r\n        }),\r\n      {}\r\n    )\r\n}\r\n\r\nexport const reduceHooks = (hooks, initial, meta = {}, allowUndefined) =>\r\n  hooks.reduce((prev, next) => {\r\n    const nextValue = next(prev, meta)\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      if (!allowUndefined && typeof nextValue === 'undefined') {\r\n        console.info(next)\r\n        throw new Error(\r\n          'React Table: A reducer hook ☝️ just returned undefined! This is not allowed.'\r\n        )\r\n      }\r\n    }\r\n    return nextValue\r\n  }, initial)\r\n\r\nexport const loopHooks = (hooks, context, meta = {}) =>\r\n  hooks.forEach(hook => {\r\n    const nextValue = hook(context, meta)\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      if (typeof nextValue !== 'undefined') {\r\n        console.info(hook, nextValue)\r\n        throw new Error(\r\n          'React Table: A loop-type hook ☝️ just returned a value! This is not allowed.'\r\n        )\r\n      }\r\n    }\r\n  })\r\n\r\nexport function ensurePluginOrder(plugins, befores, pluginName, afters) {\r\n  if (process.env.NODE_ENV !== 'production' && afters) {\r\n    throw new Error(\r\n      `Defining plugins in the \"after\" section of ensurePluginOrder is no longer supported (see plugin ${pluginName})`\r\n    )\r\n  }\r\n  const pluginIndex = plugins.findIndex(\r\n    plugin => plugin.pluginName === pluginName\r\n  )\r\n\r\n  if (pluginIndex === -1) {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      throw new Error(`The plugin \"${pluginName}\" was not found in the plugin list!\r\nThis usually means you need to need to name your plugin hook by setting the 'pluginName' property of the hook function, eg:\r\n\r\n  ${pluginName}.pluginName = '${pluginName}'\r\n`)\r\n    }\r\n  }\r\n\r\n  befores.forEach(before => {\r\n    const beforeIndex = plugins.findIndex(\r\n      plugin => plugin.pluginName === before\r\n    )\r\n    if (beforeIndex > -1 && beforeIndex > pluginIndex) {\r\n      if (process.env.NODE_ENV !== 'production') {\r\n        throw new Error(\r\n          `React Table: The ${pluginName} plugin hook must be placed after the ${before} plugin hook!`\r\n        )\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\nexport function functionalUpdate(updater, old) {\r\n  return typeof updater === 'function' ? updater(old) : updater\r\n}\r\n\r\nexport function useGetLatest(obj) {\r\n  const ref = React.useRef()\r\n  ref.current = obj\r\n\r\n  return React.useCallback(() => ref.current, [])\r\n}\r\n\r\n// SSR has issues with useLayoutEffect still, so use useEffect during SSR\r\nexport const safeUseLayoutEffect =\r\n  typeof document !== 'undefined' ? React.useLayoutEffect : React.useEffect\r\n\r\nexport function useMountedLayoutEffect(fn, deps) {\r\n  const mountedRef = React.useRef(false)\r\n\r\n  safeUseLayoutEffect(() => {\r\n    if (mountedRef.current) {\r\n      fn()\r\n    }\r\n    mountedRef.current = true\r\n    // eslint-disable-next-line\r\n  }, deps)\r\n}\r\n\r\nexport function useAsyncDebounce(defaultFn, defaultWait = 0) {\r\n  const debounceRef = React.useRef({})\r\n\r\n  const getDefaultFn = useGetLatest(defaultFn)\r\n  const getDefaultWait = useGetLatest(defaultWait)\r\n\r\n  return React.useCallback(\r\n    async (...args) => {\r\n      if (!debounceRef.current.promise) {\r\n        debounceRef.current.promise = new Promise((resolve, reject) => {\r\n          debounceRef.current.resolve = resolve\r\n          debounceRef.current.reject = reject\r\n        })\r\n      }\r\n\r\n      if (debounceRef.current.timeout) {\r\n        clearTimeout(debounceRef.current.timeout)\r\n      }\r\n\r\n      debounceRef.current.timeout = setTimeout(async () => {\r\n        delete debounceRef.current.timeout\r\n        try {\r\n          debounceRef.current.resolve(await getDefaultFn()(...args))\r\n        } catch (err) {\r\n          debounceRef.current.reject(err)\r\n        } finally {\r\n          delete debounceRef.current.promise\r\n        }\r\n      }, getDefaultWait())\r\n\r\n      return debounceRef.current.promise\r\n    },\r\n    [getDefaultFn, getDefaultWait]\r\n  )\r\n}\r\n\r\nexport function makeRenderer(instance, column, meta = {}) {\r\n  return (type, userProps = {}) => {\r\n    const Comp = typeof type === 'string' ? column[type] : type\r\n\r\n    if (typeof Comp === 'undefined') {\r\n      console.info(column)\r\n      throw new Error(renderErr)\r\n    }\r\n\r\n    return flexRender(Comp, { ...instance, column, ...meta, ...userProps })\r\n  }\r\n}\r\n\r\nexport function flexRender(Comp, props) {\r\n  return isReactComponent(Comp) ? <Comp {...props} /> : Comp\r\n}\r\n\r\nfunction isReactComponent(component) {\r\n  return (\r\n    isClassComponent(component) ||\r\n    typeof component === 'function' ||\r\n    isExoticComponent(component)\r\n  )\r\n}\r\n\r\nfunction isClassComponent(component) {\r\n  return (\r\n    typeof component === 'function' &&\r\n    (() => {\r\n      const proto = Object.getPrototypeOf(component)\r\n      return proto.prototype && proto.prototype.isReactComponent\r\n    })()\r\n  )\r\n}\r\n\r\nfunction isExoticComponent(component) {\r\n  return (\r\n    typeof component === 'object' &&\r\n    typeof component.$$typeof === 'symbol' &&\r\n    ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description)\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { defaultColumn } from './publicUtils'\r\n\r\n// Find the depth of the columns\r\nexport function findMaxDepth(columns, depth = 0) {\r\n  return columns.reduce((prev, curr) => {\r\n    if (curr.columns) {\r\n      return Math.max(prev, findMaxDepth(curr.columns, depth + 1))\r\n    }\r\n    return depth\r\n  }, 0)\r\n}\r\n\r\n// Build the visible columns, headers and flat column list\r\nexport function linkColumnStructure(columns, parent, depth = 0) {\r\n  return columns.map(column => {\r\n    column = {\r\n      ...column,\r\n      parent,\r\n      depth,\r\n    }\r\n\r\n    assignColumnAccessor(column)\r\n\r\n    if (column.columns) {\r\n      column.columns = linkColumnStructure(column.columns, column, depth + 1)\r\n    }\r\n    return column\r\n  })\r\n}\r\n\r\nexport function flattenColumns(columns) {\r\n  return flattenBy(columns, 'columns')\r\n}\r\n\r\nexport function assignColumnAccessor(column) {\r\n  // First check for string accessor\r\n  let { id, accessor, Header } = column\r\n\r\n  if (typeof accessor === 'string') {\r\n    id = id || accessor\r\n    const accessorPath = accessor.split('.')\r\n    accessor = row => getBy(row, accessorPath)\r\n  }\r\n\r\n  if (!id && typeof Header === 'string' && Header) {\r\n    id = Header\r\n  }\r\n\r\n  if (!id && column.columns) {\r\n    console.error(column)\r\n    throw new Error('A column ID (or unique \"Header\" value) is required!')\r\n  }\r\n\r\n  if (!id) {\r\n    console.error(column)\r\n    throw new Error('A column ID (or string accessor) is required!')\r\n  }\r\n\r\n  Object.assign(column, {\r\n    id,\r\n    accessor,\r\n  })\r\n\r\n  return column\r\n}\r\n\r\nexport function decorateColumn(column, userDefaultColumn) {\r\n  if (!userDefaultColumn) {\r\n    throw new Error()\r\n  }\r\n  Object.assign(column, {\r\n    // Make sure there is a fallback header, just in case\r\n    Header: () => <>&nbsp;</>,\r\n    Footer: () => <>&nbsp;</>,\r\n    ...defaultColumn,\r\n    ...userDefaultColumn,\r\n    ...column,\r\n  })\r\n  return column\r\n}\r\n\r\n// Build the header groups from the bottom up\r\nexport function makeHeaderGroups(allColumns, defaultColumn) {\r\n  const headerGroups = []\r\n\r\n  let scanColumns = allColumns\r\n\r\n  let uid = 0\r\n  const getUID = () => uid++\r\n\r\n  while (scanColumns.length) {\r\n    // The header group we are creating\r\n    const headerGroup = {\r\n      headers: [],\r\n    }\r\n\r\n    // The parent columns we're going to scan next\r\n    const parentColumns = []\r\n\r\n    const hasParents = scanColumns.some(d => d.parent)\r\n\r\n    // Scan each column for parents\r\n    scanColumns.forEach(column => {\r\n      // What is the latest (last) parent column?\r\n      let latestParentColumn = [...parentColumns].reverse()[0]\r\n\r\n      let newParent\r\n\r\n      if (hasParents) {\r\n        // If the column has a parent, add it if necessary\r\n        if (column.parent) {\r\n          newParent = {\r\n            ...column.parent,\r\n            originalId: column.parent.id,\r\n            id: `${column.parent.id}_${getUID()}`,\r\n            headers: [column],\r\n          }\r\n        } else {\r\n          // If other columns have parents, we'll need to add a place holder if necessary\r\n          const originalId = `${column.id}_placeholder`\r\n          newParent = decorateColumn(\r\n            {\r\n              originalId,\r\n              id: `${column.id}_placeholder_${getUID()}`,\r\n              placeholderOf: column,\r\n              headers: [column],\r\n            },\r\n            defaultColumn\r\n          )\r\n        }\r\n\r\n        // If the resulting parent columns are the same, just add\r\n        // the column and increment the header span\r\n        if (\r\n          latestParentColumn &&\r\n          latestParentColumn.originalId === newParent.originalId\r\n        ) {\r\n          latestParentColumn.headers.push(column)\r\n        } else {\r\n          parentColumns.push(newParent)\r\n        }\r\n      }\r\n\r\n      headerGroup.headers.push(column)\r\n    })\r\n\r\n    headerGroups.push(headerGroup)\r\n\r\n    // Start scanning the parent columns\r\n    scanColumns = parentColumns\r\n  }\r\n\r\n  return headerGroups.reverse()\r\n}\r\n\r\nconst pathObjCache = new Map()\r\n\r\nexport function getBy(obj, path, def) {\r\n  if (!path) {\r\n    return obj\r\n  }\r\n  const cacheKey = typeof path === 'function' ? path : JSON.stringify(path)\r\n\r\n  const pathObj =\r\n    pathObjCache.get(cacheKey) ||\r\n    (() => {\r\n      const pathObj = makePathArray(path)\r\n      pathObjCache.set(cacheKey, pathObj)\r\n      return pathObj\r\n    })()\r\n\r\n  let val\r\n\r\n  try {\r\n    val = pathObj.reduce((cursor, pathPart) => cursor[pathPart], obj)\r\n  } catch (e) {\r\n    // continue regardless of error\r\n  }\r\n  return typeof val !== 'undefined' ? val : def\r\n}\r\n\r\nexport function getFirstDefined(...args) {\r\n  for (let i = 0; i < args.length; i += 1) {\r\n    if (typeof args[i] !== 'undefined') {\r\n      return args[i]\r\n    }\r\n  }\r\n}\r\n\r\nexport function getElementDimensions(element) {\r\n  const rect = element.getBoundingClientRect()\r\n  const style = window.getComputedStyle(element)\r\n  const margins = {\r\n    left: parseInt(style.marginLeft),\r\n    right: parseInt(style.marginRight),\r\n  }\r\n  const padding = {\r\n    left: parseInt(style.paddingLeft),\r\n    right: parseInt(style.paddingRight),\r\n  }\r\n  return {\r\n    left: Math.ceil(rect.left),\r\n    width: Math.ceil(rect.width),\r\n    outerWidth: Math.ceil(\r\n      rect.width + margins.left + margins.right + padding.left + padding.right\r\n    ),\r\n    marginLeft: margins.left,\r\n    marginRight: margins.right,\r\n    paddingLeft: padding.left,\r\n    paddingRight: padding.right,\r\n    scrollWidth: element.scrollWidth,\r\n  }\r\n}\r\n\r\nexport function isFunction(a) {\r\n  if (typeof a === 'function') {\r\n    return a\r\n  }\r\n}\r\n\r\nexport function flattenBy(arr, key) {\r\n  const flat = []\r\n\r\n  const recurse = arr => {\r\n    arr.forEach(d => {\r\n      if (!d[key]) {\r\n        flat.push(d)\r\n      } else {\r\n        recurse(d[key])\r\n      }\r\n    })\r\n  }\r\n\r\n  recurse(arr)\r\n\r\n  return flat\r\n}\r\n\r\nexport function expandRows(\r\n  rows,\r\n  { manualExpandedKey, expanded, expandSubRows = true }\r\n) {\r\n  const expandedRows = []\r\n\r\n  const handleRow = row => {\r\n    row.isExpanded =\r\n      (row.original && row.original[manualExpandedKey]) || expanded[row.id]\r\n\r\n    row.canExpand = row.subRows && !!row.subRows.length\r\n\r\n    expandedRows.push(row)\r\n\r\n    if (expandSubRows && row.subRows && row.subRows.length && row.isExpanded) {\r\n      row.subRows.forEach(handleRow)\r\n    }\r\n  }\r\n\r\n  rows.forEach(handleRow)\r\n\r\n  return expandedRows\r\n}\r\n\r\nexport function getFilterMethod(filter, userFilterTypes, filterTypes) {\r\n  return (\r\n    isFunction(filter) ||\r\n    userFilterTypes[filter] ||\r\n    filterTypes[filter] ||\r\n    filterTypes.text\r\n  )\r\n}\r\n\r\nexport function shouldAutoRemoveFilter(autoRemove, value, column) {\r\n  return autoRemove ? autoRemove(value, column) : typeof value === 'undefined'\r\n}\r\n\r\nexport function unpreparedAccessWarning() {\r\n  throw new Error(\r\n    'React-Table: You have not called prepareRow(row) one or more rows you are attempting to render.'\r\n  )\r\n}\r\n\r\n//\r\n\r\nconst reOpenBracket = /\\[/g\r\nconst reCloseBracket = /\\]/g\r\n\r\nfunction makePathArray(obj) {\r\n  return (\r\n    flattenDeep(obj)\r\n      // remove all periods in parts\r\n      .map(d => String(d).replace('.', '_'))\r\n      // join parts using period\r\n      .join('.')\r\n      // replace brackets with periods\r\n      .replace(reOpenBracket, '.')\r\n      .replace(reCloseBracket, '')\r\n      // split it back out on periods\r\n      .split('.')\r\n  )\r\n}\r\n\r\nfunction flattenDeep(arr, newArr = []) {\r\n  if (!Array.isArray(arr)) {\r\n    newArr.push(arr)\r\n  } else {\r\n    for (let i = 0; i < arr.length; i += 1) {\r\n      flattenDeep(arr[i], newArr)\r\n    }\r\n  }\r\n  return newArr\r\n}\r\n","const defaultGetTableProps = props => ({\r\n  role: 'table',\r\n  ...props,\r\n})\r\n\r\nconst defaultGetTableBodyProps = props => ({\r\n  role: 'rowgroup',\r\n  ...props,\r\n})\r\n\r\nconst defaultGetHeaderProps = (props, { column }) => ({\r\n  key: `header_${column.id}`,\r\n  colSpan: column.totalVisibleHeaderCount,\r\n  role: 'columnheader',\r\n  ...props,\r\n})\r\n\r\nconst defaultGetFooterProps = (props, { column }) => ({\r\n  key: `footer_${column.id}`,\r\n  colSpan: column.totalVisibleHeaderCount,\r\n  ...props,\r\n})\r\n\r\nconst defaultGetHeaderGroupProps = (props, { index }) => ({\r\n  key: `headerGroup_${index}`,\r\n  role: 'row',\r\n  ...props,\r\n})\r\n\r\nconst defaultGetFooterGroupProps = (props, { index }) => ({\r\n  key: `footerGroup_${index}`,\r\n  ...props,\r\n})\r\n\r\nconst defaultGetRowProps = (props, { row }) => ({\r\n  key: `row_${row.id}`,\r\n  role: 'row',\r\n  ...props,\r\n})\r\n\r\nconst defaultGetCellProps = (props, { cell }) => ({\r\n  key: `cell_${cell.row.id}_${cell.column.id}`,\r\n  role: 'cell',\r\n  ...props,\r\n})\r\n\r\nexport default function makeDefaultPluginHooks() {\r\n  return {\r\n    useOptions: [],\r\n    stateReducers: [],\r\n    useControlledState: [],\r\n    columns: [],\r\n    columnsDeps: [],\r\n    allColumns: [],\r\n    allColumnsDeps: [],\r\n    accessValue: [],\r\n    materializedColumns: [],\r\n    materializedColumnsDeps: [],\r\n    useInstanceAfterData: [],\r\n    visibleColumns: [],\r\n    visibleColumnsDeps: [],\r\n    headerGroups: [],\r\n    headerGroupsDeps: [],\r\n    useInstanceBeforeDimensions: [],\r\n    useInstance: [],\r\n    prepareRow: [],\r\n    getTableProps: [defaultGetTableProps],\r\n    getTableBodyProps: [defaultGetTableBodyProps],\r\n    getHeaderGroupProps: [defaultGetHeaderGroupProps],\r\n    getFooterGroupProps: [defaultGetFooterGroupProps],\r\n    getHeaderProps: [defaultGetHeaderProps],\r\n    getFooterProps: [defaultGetFooterProps],\r\n    getRowProps: [defaultGetRowProps],\r\n    getCellProps: [defaultGetCellProps],\r\n    useFinalInstance: [],\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nimport {\r\n  actions,\r\n  functionalUpdate,\r\n  useGetLatest,\r\n  makePropGetter,\r\n  useMountedLayoutEffect,\r\n} from '../publicUtils'\r\n\r\nactions.resetHiddenColumns = 'resetHiddenColumns'\r\nactions.toggleHideColumn = 'toggleHideColumn'\r\nactions.setHiddenColumns = 'setHiddenColumns'\r\nactions.toggleHideAllColumns = 'toggleHideAllColumns'\r\n\r\nexport const useColumnVisibility = hooks => {\r\n  hooks.getToggleHiddenProps = [defaultGetToggleHiddenProps]\r\n  hooks.getToggleHideAllColumnsProps = [defaultGetToggleHideAllColumnsProps]\r\n\r\n  hooks.stateReducers.push(reducer)\r\n  hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions)\r\n  hooks.headerGroupsDeps.push((deps, { instance }) => [\r\n    ...deps,\r\n    instance.state.hiddenColumns,\r\n  ])\r\n  hooks.useInstance.push(useInstance)\r\n}\r\n\r\nuseColumnVisibility.pluginName = 'useColumnVisibility'\r\n\r\nconst defaultGetToggleHiddenProps = (props, { column }) => [\r\n  props,\r\n  {\r\n    onChange: e => {\r\n      column.toggleHidden(!e.target.checked)\r\n    },\r\n    style: {\r\n      cursor: 'pointer',\r\n    },\r\n    checked: column.isVisible,\r\n    title: 'Toggle Column Visible',\r\n  },\r\n]\r\n\r\nconst defaultGetToggleHideAllColumnsProps = (props, { instance }) => [\r\n  props,\r\n  {\r\n    onChange: e => {\r\n      instance.toggleHideAllColumns(!e.target.checked)\r\n    },\r\n    style: {\r\n      cursor: 'pointer',\r\n    },\r\n    checked: !instance.allColumnsHidden && !instance.state.hiddenColumns.length,\r\n    title: 'Toggle All Columns Hidden',\r\n    indeterminate:\r\n      !instance.allColumnsHidden && instance.state.hiddenColumns.length,\r\n  },\r\n]\r\n\r\nfunction reducer(state, action, previousState, instance) {\r\n  if (action.type === actions.init) {\r\n    return {\r\n      hiddenColumns: [],\r\n      ...state,\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.resetHiddenColumns) {\r\n    return {\r\n      ...state,\r\n      hiddenColumns: instance.initialState.hiddenColumns || [],\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.toggleHideColumn) {\r\n    console.log('toggle hidden column')\r\n    console.log(action)\r\n    console.log('state......')\r\n    console.log(state)\r\n    const should =\r\n      typeof action.value !== 'undefined'\r\n        ? action.value\r\n        : !state.hiddenColumns.includes(action.columnId)\r\n    console.log('should.......')\r\n    console.log(should)\r\n    const hiddenColumns = should\r\n      ? [...state.hiddenColumns, action.columnId]\r\n      : state.hiddenColumns.filter(d => d !== action.columnId)\r\n    console.log('hiddenColumns.......')\r\n    console.log(hiddenColumns)\r\n    const result = {\r\n      ...state,\r\n      hiddenColumns,\r\n    }\r\n    console.log('result......')\r\n    console.log(result)\r\n    return result\r\n  }\r\n\r\n  if (action.type === actions.setHiddenColumns) {\r\n    console.log('set hidden column')\r\n    console.log(action)\r\n    console.log('state......')\r\n    console.log(state)\r\n    const hiddenColumns = [... functionalUpdate(action.value, state.hiddenColumns)]\r\n    console.log('hidden column .....')\r\n    console.log(hiddenColumns)\r\n    const result = {\r\n      ...state,\r\n      hiddenColumns,\r\n    }\r\n    console.log('result......')\r\n    console.log(result)\r\n    return result\r\n  }\r\n\r\n  if (action.type === actions.toggleHideAllColumns) {\r\n    const shouldAll =\r\n      typeof action.value !== 'undefined'\r\n        ? action.value\r\n        : !state.hiddenColumns.length\r\n\r\n    return {\r\n      ...state,\r\n      hiddenColumns: shouldAll ? instance.allColumns.map(d => d.id) : [],\r\n    }\r\n  }\r\n}\r\n\r\nfunction useInstanceBeforeDimensions(instance) {\r\n  const {\r\n    headers,\r\n    state: { hiddenColumns },\r\n  } = instance\r\n\r\n  const isMountedRef = React.useRef(false)\r\n\r\n  if (!isMountedRef.current) {\r\n  }\r\n\r\n  const handleColumn = (column, parentVisible) => {\r\n    column.isVisible = parentVisible && !hiddenColumns.includes(column.id)\r\n\r\n    let totalVisibleHeaderCount = 0\r\n\r\n    if (column.headers && column.headers.length) {\r\n      column.headers.forEach(\r\n        subColumn =>\r\n          (totalVisibleHeaderCount += handleColumn(subColumn, column.isVisible))\r\n      )\r\n    } else {\r\n      totalVisibleHeaderCount = column.isVisible ? 1 : 0\r\n    }\r\n\r\n    column.totalVisibleHeaderCount = totalVisibleHeaderCount\r\n\r\n    return totalVisibleHeaderCount\r\n  }\r\n\r\n  let totalVisibleHeaderCount = 0\r\n\r\n  headers.forEach(\r\n    subHeader => (totalVisibleHeaderCount += handleColumn(subHeader, true))\r\n  )\r\n}\r\n\r\nfunction useInstance(instance) {\r\n  const {\r\n    columns,\r\n    flatHeaders,\r\n    dispatch,\r\n    allColumns,\r\n    getHooks,\r\n    state: { hiddenColumns },\r\n    autoResetHiddenColumns = true,\r\n  } = instance\r\n\r\n  const getInstance = useGetLatest(instance)\r\n\r\n  const allColumnsHidden = allColumns.length === hiddenColumns.length\r\n\r\n  const toggleHideColumn = React.useCallback(\r\n    (columnId, value) =>\r\n      dispatch({ type: actions.toggleHideColumn, columnId, value }),\r\n    [dispatch]\r\n  )\r\n\r\n  const setHiddenColumns = React.useCallback(\r\n    value => dispatch({ type: actions.setHiddenColumns, value }),\r\n    [dispatch]\r\n  )\r\n\r\n  const toggleHideAllColumns = React.useCallback(\r\n    value => dispatch({ type: actions.toggleHideAllColumns, value }),\r\n    [dispatch]\r\n  )\r\n\r\n  const getToggleHideAllColumnsProps = makePropGetter(\r\n    getHooks().getToggleHideAllColumnsProps,\r\n    { instance: getInstance() }\r\n  )\r\n\r\n  flatHeaders.forEach(column => {\r\n    column.toggleHidden = value => {\r\n      dispatch({\r\n        type: actions.toggleHideColumn,\r\n        columnId: column.id,\r\n        value,\r\n      })\r\n    }\r\n\r\n    column.getToggleHiddenProps = makePropGetter(\r\n      getHooks().getToggleHiddenProps,\r\n      {\r\n        instance: getInstance(),\r\n        column,\r\n      }\r\n    )\r\n  })\r\n\r\n  const getAutoResetHiddenColumns = useGetLatest(autoResetHiddenColumns)\r\n\r\n  useMountedLayoutEffect(() => {\r\n    if (getAutoResetHiddenColumns()) {\r\n      dispatch({ type: actions.resetHiddenColumns })\r\n    }\r\n  }, [dispatch, columns])\r\n\r\n  Object.assign(instance, {\r\n    allColumnsHidden,\r\n    toggleHideColumn,\r\n    setHiddenColumns,\r\n    toggleHideAllColumns,\r\n    getToggleHideAllColumnsProps,\r\n  })\r\n}\r\n","import React from 'react'\r\n\r\n//\r\n\r\nimport {\r\n  linkColumnStructure,\r\n  flattenColumns,\r\n  assignColumnAccessor,\r\n  unpreparedAccessWarning,\r\n  makeHeaderGroups,\r\n  decorateColumn,\r\n} from '../utils'\r\n\r\nimport {\r\n  useGetLatest,\r\n  reduceHooks,\r\n  actions,\r\n  loopHooks,\r\n  makePropGetter,\r\n  makeRenderer,\r\n} from '../publicUtils'\r\n\r\nimport makeDefaultPluginHooks from '../makeDefaultPluginHooks'\r\n\r\nimport { useColumnVisibility } from './useColumnVisibility'\r\n\r\nconst defaultInitialState = {}\r\nconst defaultColumnInstance = {}\r\nconst defaultReducer = (state, action, prevState) => state\r\nconst defaultGetSubRows = (row, index) => row.subRows || []\r\nconst defaultGetRowId = (row, index, parent) =>\r\n  `${parent ? [parent.id, index].join('.') : index}`\r\nconst defaultUseControlledState = d => d\r\n\r\nfunction applyDefaults(props) {\r\n  const {\r\n    initialState = defaultInitialState,\r\n    defaultColumn = defaultColumnInstance,\r\n    getSubRows = defaultGetSubRows,\r\n    getRowId = defaultGetRowId,\r\n    stateReducer = defaultReducer,\r\n    useControlledState = defaultUseControlledState,\r\n    ...rest\r\n  } = props\r\n\r\n  return {\r\n    ...rest,\r\n    initialState,\r\n    defaultColumn,\r\n    getSubRows,\r\n    getRowId,\r\n    stateReducer,\r\n    useControlledState,\r\n  }\r\n}\r\n\r\nexport const useTable = (props, ...plugins) => {\r\n  // Apply default props\r\n  props = applyDefaults(props)\r\n\r\n  // Add core plugins\r\n  plugins = [useColumnVisibility, ...plugins]\r\n\r\n  // Create the table instance\r\n  let instanceRef = React.useRef({})\r\n\r\n  // Create a getter for the instance (helps avoid a lot of potential memory leaks)\r\n  const getInstance = useGetLatest(instanceRef.current)\r\n\r\n  // Assign the props, plugins and hooks to the instance\r\n  Object.assign(getInstance(), {\r\n    ...props,\r\n    plugins,\r\n    hooks: makeDefaultPluginHooks(),\r\n  })\r\n\r\n  // Allow plugins to register hooks as early as possible\r\n  plugins.filter(Boolean).forEach(plugin => {\r\n    plugin(getInstance().hooks)\r\n  })\r\n\r\n  // Consume all hooks and make a getter for them\r\n  const getHooks = useGetLatest(getInstance().hooks)\r\n  getInstance().getHooks = getHooks\r\n  delete getInstance().hooks\r\n\r\n  // Allow useOptions hooks to modify the options coming into the table\r\n  Object.assign(\r\n    getInstance(),\r\n    reduceHooks(getHooks().useOptions, applyDefaults(props))\r\n  )\r\n\r\n  const {\r\n    data,\r\n    columns: userColumns,\r\n    initialState,\r\n    defaultColumn,\r\n    getSubRows,\r\n    getRowId,\r\n    stateReducer,\r\n    useControlledState,\r\n  } = getInstance()\r\n\r\n  // Setup user reducer ref\r\n  const getStateReducer = useGetLatest(stateReducer)\r\n\r\n  // Build the reducer\r\n  const reducer = React.useCallback(\r\n    (state, action) => {\r\n      // Detect invalid actions\r\n      if (!action.type) {\r\n        console.info({ action })\r\n        throw new Error('Unknown Action 👆')\r\n      }\r\n\r\n      // Reduce the state from all plugin reducers\r\n      return [\r\n        ...getHooks().stateReducers,\r\n        // Allow the user to add their own state reducer(s)\r\n        ...(Array.isArray(getStateReducer())\r\n          ? getStateReducer()\r\n          : [getStateReducer()]),\r\n      ].reduce(\r\n        (s, handler) => handler(s, action, state, getInstance()) || s,\r\n        state\r\n      )\r\n    },\r\n    [getHooks, getStateReducer, getInstance]\r\n  )\r\n\r\n  // Start the reducer\r\n  const [reducerState, dispatch] = React.useReducer(reducer, undefined, () =>\r\n    reducer(initialState, { type: actions.init })\r\n  )\r\n\r\n  // Allow the user to control the final state with hooks\r\n  const state = reduceHooks(\r\n    [...getHooks().useControlledState, useControlledState],\r\n    reducerState,\r\n    { instance: getInstance() }\r\n  )\r\n\r\n  Object.assign(getInstance(), {\r\n    state,\r\n    dispatch,\r\n  })\r\n\r\n  // Decorate All the columns\r\n  const columns = React.useMemo(\r\n    () =>\r\n      linkColumnStructure(\r\n        reduceHooks(getHooks().columns, userColumns, {\r\n          instance: getInstance(),\r\n        })\r\n      ),\r\n    [\r\n      getHooks,\r\n      getInstance,\r\n      userColumns,\r\n      // eslint-disable-next-line react-hooks/exhaustive-deps\r\n      ...reduceHooks(getHooks().columnsDeps, [], { instance: getInstance() }),\r\n    ]\r\n  )\r\n  getInstance().columns = columns\r\n\r\n  // Get the flat list of all columns and allow hooks to decorate\r\n  // those columns (and trigger this memoization via deps)\r\n  let allColumns = React.useMemo(\r\n    () =>\r\n      reduceHooks(getHooks().allColumns, flattenColumns(columns), {\r\n        instance: getInstance(),\r\n      }).map(assignColumnAccessor),\r\n    [\r\n      columns,\r\n      getHooks,\r\n      getInstance,\r\n      // eslint-disable-next-line react-hooks/exhaustive-deps\r\n      ...reduceHooks(getHooks().allColumnsDeps, [], {\r\n        instance: getInstance(),\r\n      }),\r\n    ]\r\n  )\r\n  getInstance().allColumns = allColumns\r\n\r\n  // Access the row model using initial columns\r\n  const [rows, flatRows, rowsById] = React.useMemo(() => {\r\n    let rows = []\r\n    let flatRows = []\r\n    const rowsById = {}\r\n\r\n    const allColumnsQueue = [...allColumns]\r\n\r\n    while (allColumnsQueue.length) {\r\n      const column = allColumnsQueue.shift()\r\n      accessRowsForColumn({\r\n        data,\r\n        rows,\r\n        flatRows,\r\n        rowsById,\r\n        column,\r\n        getRowId,\r\n        getSubRows,\r\n        accessValueHooks: getHooks().accessValue,\r\n        getInstance,\r\n      })\r\n    }\r\n\r\n    return [rows, flatRows, rowsById]\r\n  }, [allColumns, data, getRowId, getSubRows, getHooks, getInstance])\r\n\r\n  Object.assign(getInstance(), {\r\n    rows,\r\n    flatRows,\r\n    rowsById,\r\n    // materializedColumns,\r\n  })\r\n\r\n  loopHooks(getHooks().useInstanceAfterData, getInstance())\r\n\r\n  // Get the flat list of all columns AFTER the rows\r\n  // have been access, and allow hooks to decorate\r\n  // those columns (and trigger this memoization via deps)\r\n  let visibleColumns = React.useMemo(\r\n    () =>\r\n      reduceHooks(getHooks().visibleColumns, allColumns, {\r\n        instance: getInstance(),\r\n      }).map(d => decorateColumn(d, defaultColumn)),\r\n    [\r\n      getHooks,\r\n      allColumns,\r\n      getInstance,\r\n      defaultColumn,\r\n      // eslint-disable-next-line react-hooks/exhaustive-deps\r\n      ...reduceHooks(getHooks().visibleColumnsDeps, [], {\r\n        instance: getInstance(),\r\n      }),\r\n    ]\r\n  )\r\n\r\n  // Combine new visible columns with all columns\r\n  allColumns = React.useMemo(() => {\r\n    const columns = [...visibleColumns]\r\n\r\n    allColumns.forEach(column => {\r\n      if (!columns.find(d => d.id === column.id)) {\r\n        columns.push(column)\r\n      }\r\n    })\r\n\r\n    return columns\r\n  }, [allColumns, visibleColumns])\r\n  getInstance().allColumns = allColumns\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    const duplicateColumns = allColumns.filter((column, i) => {\r\n      return allColumns.findIndex(d => d.id === column.id) !== i\r\n    })\r\n\r\n    if (duplicateColumns.length) {\r\n      console.info(allColumns)\r\n      throw new Error(\r\n        `Duplicate columns were found with ids: \"${duplicateColumns\r\n          .map(d => d.id)\r\n          .join(', ')}\" in the columns array above`\r\n      )\r\n    }\r\n  }\r\n\r\n  // Make the headerGroups\r\n  const headerGroups = React.useMemo(\r\n    () =>\r\n      reduceHooks(\r\n        getHooks().headerGroups,\r\n        makeHeaderGroups(visibleColumns, defaultColumn),\r\n        getInstance()\r\n      ),\r\n    [\r\n      getHooks,\r\n      visibleColumns,\r\n      defaultColumn,\r\n      getInstance,\r\n      // eslint-disable-next-line react-hooks/exhaustive-deps\r\n      ...reduceHooks(getHooks().headerGroupsDeps, [], {\r\n        instance: getInstance(),\r\n      }),\r\n    ]\r\n  )\r\n  getInstance().headerGroups = headerGroups\r\n\r\n  // Get the first level of headers\r\n  const headers = React.useMemo(\r\n    () => (headerGroups.length ? headerGroups[0].headers : []),\r\n    [headerGroups]\r\n  )\r\n  getInstance().headers = headers\r\n\r\n  // Provide a flat header list for utilities\r\n  getInstance().flatHeaders = headerGroups.reduce(\r\n    (all, headerGroup) => [...all, ...headerGroup.headers],\r\n    []\r\n  )\r\n\r\n  loopHooks(getHooks().useInstanceBeforeDimensions, getInstance())\r\n\r\n  // Filter columns down to visible ones\r\n  const visibleColumnsDep = visibleColumns\r\n    .filter(d => d.isVisible)\r\n    .map(d => d.id)\r\n    .sort()\r\n    .join('_')\r\n\r\n  visibleColumns = React.useMemo(\r\n    () => visibleColumns.filter(d => d.isVisible),\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [visibleColumns, visibleColumnsDep]\r\n  )\r\n  getInstance().visibleColumns = visibleColumns\r\n\r\n  // Header Visibility is needed by this point\r\n  const [\r\n    totalColumnsMinWidth,\r\n    totalColumnsWidth,\r\n    totalColumnsMaxWidth,\r\n  ] = calculateHeaderWidths(headers)\r\n\r\n  getInstance().totalColumnsMinWidth = totalColumnsMinWidth\r\n  getInstance().totalColumnsWidth = totalColumnsWidth\r\n  getInstance().totalColumnsMaxWidth = totalColumnsMaxWidth\r\n\r\n  loopHooks(getHooks().useInstance, getInstance())\r\n\r\n  // Each materialized header needs to be assigned a render function and other\r\n  // prop getter properties here.\r\n  ;[...getInstance().flatHeaders, ...getInstance().allColumns].forEach(\r\n    column => {\r\n      // Give columns/headers rendering power\r\n      column.render = makeRenderer(getInstance(), column)\r\n\r\n      // Give columns/headers a default getHeaderProps\r\n      column.getHeaderProps = makePropGetter(getHooks().getHeaderProps, {\r\n        instance: getInstance(),\r\n        column,\r\n      })\r\n\r\n      // Give columns/headers a default getFooterProps\r\n      column.getFooterProps = makePropGetter(getHooks().getFooterProps, {\r\n        instance: getInstance(),\r\n        column,\r\n      })\r\n    }\r\n  )\r\n\r\n  getInstance().headerGroups = React.useMemo(\r\n    () =>\r\n      headerGroups.filter((headerGroup, i) => {\r\n        // Filter out any headers and headerGroups that don't have visible columns\r\n        headerGroup.headers = headerGroup.headers.filter(column => {\r\n          const recurse = headers =>\r\n            headers.filter(column => {\r\n              if (column.headers) {\r\n                return recurse(column.headers)\r\n              }\r\n              return column.isVisible\r\n            }).length\r\n          if (column.headers) {\r\n            return recurse(column.headers)\r\n          }\r\n          return column.isVisible\r\n        })\r\n\r\n        // Give headerGroups getRowProps\r\n        if (headerGroup.headers.length) {\r\n          headerGroup.getHeaderGroupProps = makePropGetter(\r\n            getHooks().getHeaderGroupProps,\r\n            { instance: getInstance(), headerGroup, index: i }\r\n          )\r\n\r\n          headerGroup.getFooterGroupProps = makePropGetter(\r\n            getHooks().getFooterGroupProps,\r\n            { instance: getInstance(), headerGroup, index: i }\r\n          )\r\n\r\n          return true\r\n        }\r\n\r\n        return false\r\n      }),\r\n    [headerGroups, getInstance, getHooks]\r\n  )\r\n\r\n  getInstance().footerGroups = [...getInstance().headerGroups].reverse()\r\n\r\n  // The prepareRow function is absolutely necessary and MUST be called on\r\n  // any rows the user wishes to be displayed.\r\n\r\n  getInstance().prepareRow = React.useCallback(\r\n    row => {\r\n      row.getRowProps = makePropGetter(getHooks().getRowProps, {\r\n        instance: getInstance(),\r\n        row,\r\n      })\r\n\r\n      // Build the visible cells for each row\r\n      row.allCells = allColumns.map(column => {\r\n        const value = row.values[column.id]\r\n\r\n        const cell = {\r\n          column,\r\n          row,\r\n          value,\r\n        }\r\n\r\n        // Give each cell a getCellProps base\r\n        cell.getCellProps = makePropGetter(getHooks().getCellProps, {\r\n          instance: getInstance(),\r\n          cell,\r\n        })\r\n\r\n        // Give each cell a renderer function (supports multiple renderers)\r\n        cell.render = makeRenderer(getInstance(), column, {\r\n          row,\r\n          cell,\r\n          value,\r\n        })\r\n\r\n        return cell\r\n      })\r\n\r\n      row.cells = visibleColumns.map(column =>\r\n        row.allCells.find(cell => cell.column.id === column.id)\r\n      )\r\n\r\n      // need to apply any row specific hooks (useExpanded requires this)\r\n      loopHooks(getHooks().prepareRow, row, { instance: getInstance() })\r\n    },\r\n    [getHooks, getInstance, allColumns, visibleColumns]\r\n  )\r\n\r\n  getInstance().getTableProps = makePropGetter(getHooks().getTableProps, {\r\n    instance: getInstance(),\r\n  })\r\n\r\n  getInstance().getTableBodyProps = makePropGetter(\r\n    getHooks().getTableBodyProps,\r\n    {\r\n      instance: getInstance(),\r\n    }\r\n  )\r\n\r\n  loopHooks(getHooks().useFinalInstance, getInstance())\r\n\r\n  return getInstance()\r\n}\r\n\r\nfunction calculateHeaderWidths(headers, left = 0) {\r\n  let sumTotalMinWidth = 0\r\n  let sumTotalWidth = 0\r\n  let sumTotalMaxWidth = 0\r\n  let sumTotalFlexWidth = 0\r\n\r\n  headers.forEach(header => {\r\n    let { headers: subHeaders } = header\r\n\r\n    header.totalLeft = left\r\n\r\n    if (subHeaders && subHeaders.length) {\r\n      const [\r\n        totalMinWidth,\r\n        totalWidth,\r\n        totalMaxWidth,\r\n        totalFlexWidth,\r\n      ] = calculateHeaderWidths(subHeaders, left)\r\n      header.totalMinWidth = totalMinWidth\r\n      header.totalWidth = totalWidth\r\n      header.totalMaxWidth = totalMaxWidth\r\n      header.totalFlexWidth = totalFlexWidth\r\n    } else {\r\n      header.totalMinWidth = header.minWidth\r\n      header.totalWidth = Math.min(\r\n        Math.max(header.minWidth, header.width),\r\n        header.maxWidth\r\n      )\r\n      header.totalMaxWidth = header.maxWidth\r\n      header.totalFlexWidth = header.canResize ? header.totalWidth : 0\r\n    }\r\n    if (header.isVisible) {\r\n      left += header.totalWidth\r\n      sumTotalMinWidth += header.totalMinWidth\r\n      sumTotalWidth += header.totalWidth\r\n      sumTotalMaxWidth += header.totalMaxWidth\r\n      sumTotalFlexWidth += header.totalFlexWidth\r\n    }\r\n  })\r\n\r\n  return [sumTotalMinWidth, sumTotalWidth, sumTotalMaxWidth, sumTotalFlexWidth]\r\n}\r\n\r\nfunction accessRowsForColumn({\r\n  data,\r\n  rows,\r\n  flatRows,\r\n  rowsById,\r\n  column,\r\n  getRowId,\r\n  getSubRows,\r\n  accessValueHooks,\r\n  getInstance,\r\n}) {\r\n  // Access the row's data column-by-column\r\n  // We do it this way so we can incrementally add materialized\r\n  // columns after the first pass and avoid excessive looping\r\n  const accessRow = (originalRow, rowIndex, depth = 0, parent, parentRows) => {\r\n    // Keep the original reference around\r\n    const original = originalRow\r\n\r\n    const id = getRowId(originalRow, rowIndex, parent)\r\n\r\n    let row = rowsById[id]\r\n\r\n    // If the row hasn't been created, let's make it\r\n    if (!row) {\r\n      row = {\r\n        id,\r\n        original,\r\n        index: rowIndex,\r\n        depth,\r\n        cells: [{}], // This is a dummy cell\r\n      }\r\n\r\n      // Override common array functions (and the dummy cell's getCellProps function)\r\n      // to show an error if it is accessed without calling prepareRow\r\n      row.cells.map = unpreparedAccessWarning\r\n      row.cells.filter = unpreparedAccessWarning\r\n      row.cells.forEach = unpreparedAccessWarning\r\n      row.cells[0].getCellProps = unpreparedAccessWarning\r\n\r\n      // Create the cells and values\r\n      row.values = {}\r\n\r\n      // Push this row into the parentRows array\r\n      parentRows.push(row)\r\n      // Keep track of every row in a flat array\r\n      flatRows.push(row)\r\n      // Also keep track of every row by its ID\r\n      rowsById[id] = row\r\n\r\n      // Get the original subrows\r\n      row.originalSubRows = getSubRows(originalRow, rowIndex)\r\n\r\n      // Then recursively access them\r\n      if (row.originalSubRows) {\r\n        const subRows = []\r\n        row.originalSubRows.forEach((d, i) =>\r\n          accessRow(d, i, depth + 1, row, subRows)\r\n        )\r\n        // Keep the new subRows array on the row\r\n        row.subRows = subRows\r\n      }\r\n    } else if (row.subRows) {\r\n      // If the row exists, then it's already been accessed\r\n      // Keep recursing, but don't worry about passing the\r\n      // accumlator array (those rows already exist)\r\n      row.originalSubRows.forEach((d, i) => accessRow(d, i, depth + 1, row))\r\n    }\r\n\r\n    // If the column has an accessor, use it to get a value\r\n    if (column.accessor) {\r\n      row.values[column.id] = column.accessor(originalRow, rowIndex, row)\r\n    }\r\n\r\n    // Allow plugins to manipulate the column value\r\n    row.values[column.id] = reduceHooks(\r\n      accessValueHooks,\r\n      row.values[column.id],\r\n      {\r\n        row,\r\n        column,\r\n        instance: getInstance(),\r\n      },\r\n      true\r\n    )\r\n  }\r\n\r\n  data.forEach((originalRow, rowIndex) =>\r\n    accessRow(originalRow, rowIndex, 0, undefined, rows)\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nimport { expandRows } from '../utils'\r\n\r\nimport {\r\n  useGetLatest,\r\n  actions,\r\n  useMountedLayoutEffect,\r\n  makePropGetter,\r\n  ensurePluginOrder,\r\n} from '../publicUtils'\r\n\r\n// Actions\r\nactions.resetExpanded = 'resetExpanded'\r\nactions.toggleRowExpanded = 'toggleRowExpanded'\r\nactions.toggleAllRowsExpanded = 'toggleAllRowsExpanded'\r\n\r\nexport const useExpanded = hooks => {\r\n  hooks.getToggleAllRowsExpandedProps = [defaultGetToggleAllRowsExpandedProps]\r\n  hooks.getToggleRowExpandedProps = [defaultGetToggleRowExpandedProps]\r\n  hooks.stateReducers.push(reducer)\r\n  hooks.useInstance.push(useInstance)\r\n  hooks.prepareRow.push(prepareRow)\r\n}\r\n\r\nuseExpanded.pluginName = 'useExpanded'\r\n\r\nconst defaultGetToggleAllRowsExpandedProps = (props, { instance }) => [\r\n  props,\r\n  {\r\n    onClick: e => {\r\n      instance.toggleAllRowsExpanded()\r\n    },\r\n    style: {\r\n      cursor: 'pointer',\r\n    },\r\n    title: 'Toggle All Rows Expanded',\r\n  },\r\n]\r\n\r\nconst defaultGetToggleRowExpandedProps = (props, { row }) => [\r\n  props,\r\n  {\r\n    onClick: () => {\r\n      row.toggleRowExpanded()\r\n    },\r\n    style: {\r\n      cursor: 'pointer',\r\n    },\r\n    title: 'Toggle Row Expanded',\r\n  },\r\n]\r\n\r\n// Reducer\r\nfunction reducer(state, action, previousState, instance) {\r\n  if (action.type === actions.init) {\r\n    return {\r\n      expanded: {},\r\n      ...state,\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.resetExpanded) {\r\n    return {\r\n      ...state,\r\n      expanded: instance.initialState.expanded || {},\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.toggleAllRowsExpanded) {\r\n    const { value } = action\r\n    const { isAllRowsExpanded, rowsById } = instance\r\n\r\n    const expandAll = typeof value !== 'undefined' ? value : !isAllRowsExpanded\r\n\r\n    if (expandAll) {\r\n      const expanded = {}\r\n\r\n      Object.keys(rowsById).forEach(rowId => {\r\n        expanded[rowId] = true\r\n      })\r\n\r\n      return {\r\n        ...state,\r\n        expanded,\r\n      }\r\n    }\r\n\r\n    return {\r\n      ...state,\r\n      expanded: {},\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.toggleRowExpanded) {\r\n    const { id, value: setExpanded } = action\r\n    const exists = state.expanded[id]\r\n\r\n    const shouldExist =\r\n      typeof setExpanded !== 'undefined' ? setExpanded : !exists\r\n\r\n    if (!exists && shouldExist) {\r\n      return {\r\n        ...state,\r\n        expanded: {\r\n          ...state.expanded,\r\n          [id]: true,\r\n        },\r\n      }\r\n    } else if (exists && !shouldExist) {\r\n      const { [id]: _, ...rest } = state.expanded\r\n      return {\r\n        ...state,\r\n        expanded: rest,\r\n      }\r\n    } else {\r\n      return state\r\n    }\r\n  }\r\n}\r\n\r\nfunction useInstance(instance) {\r\n  const {\r\n    data,\r\n    rows,\r\n    rowsById,\r\n    manualExpandedKey = 'expanded',\r\n    paginateExpandedRows = true,\r\n    expandSubRows = true,\r\n    autoResetExpanded = true,\r\n    getHooks,\r\n    plugins,\r\n    state: { expanded },\r\n    dispatch,\r\n  } = instance\r\n\r\n  ensurePluginOrder(\r\n    plugins,\r\n    ['useSortBy', 'useGroupBy', 'usePivotColumns', 'useGlobalFilter'],\r\n    'useExpanded'\r\n  )\r\n\r\n  const getAutoResetExpanded = useGetLatest(autoResetExpanded)\r\n\r\n  let isAllRowsExpanded = Boolean(\r\n    Object.keys(rowsById).length && Object.keys(expanded).length\r\n  )\r\n\r\n  if (isAllRowsExpanded) {\r\n    if (Object.keys(rowsById).some(id => !expanded[id])) {\r\n      isAllRowsExpanded = false\r\n    }\r\n  }\r\n\r\n  // Bypass any effects from firing when this changes\r\n  useMountedLayoutEffect(() => {\r\n    if (getAutoResetExpanded()) {\r\n      dispatch({ type: actions.resetExpanded })\r\n    }\r\n  }, [dispatch, data])\r\n\r\n  const toggleRowExpanded = React.useCallback(\r\n    (id, value) => {\r\n      dispatch({ type: actions.toggleRowExpanded, id, value })\r\n    },\r\n    [dispatch]\r\n  )\r\n\r\n  const toggleAllRowsExpanded = React.useCallback(\r\n    value => dispatch({ type: actions.toggleAllRowsExpanded, value }),\r\n    [dispatch]\r\n  )\r\n\r\n  const expandedRows = React.useMemo(() => {\r\n    if (paginateExpandedRows) {\r\n      return expandRows(rows, { manualExpandedKey, expanded, expandSubRows })\r\n    }\r\n\r\n    return rows\r\n  }, [paginateExpandedRows, rows, manualExpandedKey, expanded, expandSubRows])\r\n\r\n  const expandedDepth = React.useMemo(() => findExpandedDepth(expanded), [\r\n    expanded,\r\n  ])\r\n\r\n  const getInstance = useGetLatest(instance)\r\n\r\n  const getToggleAllRowsExpandedProps = makePropGetter(\r\n    getHooks().getToggleAllRowsExpandedProps,\r\n    { instance: getInstance() }\r\n  )\r\n\r\n  Object.assign(instance, {\r\n    preExpandedRows: rows,\r\n    expandedRows,\r\n    rows: expandedRows,\r\n    expandedDepth,\r\n    isAllRowsExpanded,\r\n    toggleRowExpanded,\r\n    toggleAllRowsExpanded,\r\n    getToggleAllRowsExpandedProps,\r\n  })\r\n}\r\n\r\nfunction prepareRow(row, { instance: { getHooks }, instance }) {\r\n  row.toggleRowExpanded = set => instance.toggleRowExpanded(row.id, set)\r\n\r\n  row.getToggleRowExpandedProps = makePropGetter(\r\n    getHooks().getToggleRowExpandedProps,\r\n    {\r\n      instance,\r\n      row,\r\n    }\r\n  )\r\n}\r\n\r\nfunction findExpandedDepth(expanded) {\r\n  let maxDepth = 0\r\n\r\n  Object.keys(expanded).forEach(id => {\r\n    const splitId = id.split('.')\r\n    maxDepth = Math.max(maxDepth, splitId.length)\r\n  })\r\n\r\n  return maxDepth\r\n}\r\n","export const text = (rows, ids, filterValue) => {\r\n  rows = rows.filter(row => {\r\n    return ids.some(id => {\r\n      const rowValue = row.values[id]\r\n      return String(rowValue)\r\n        .toLowerCase()\r\n        .includes(String(filterValue).toLowerCase())\r\n    })\r\n  })\r\n  return rows\r\n}\r\n\r\ntext.autoRemove = val => !val\r\n\r\nexport const exactText = (rows, ids, filterValue) => {\r\n  return rows.filter(row => {\r\n    return ids.some(id => {\r\n      const rowValue = row.values[id]\r\n      return rowValue !== undefined\r\n        ? String(rowValue).toLowerCase() === String(filterValue).toLowerCase()\r\n        : true\r\n    })\r\n  })\r\n}\r\n\r\nexactText.autoRemove = val => !val\r\n\r\nexport const exactTextCase = (rows, ids, filterValue) => {\r\n  return rows.filter(row => {\r\n    return ids.some(id => {\r\n      const rowValue = row.values[id]\r\n      return rowValue !== undefined\r\n        ? String(rowValue) === String(filterValue)\r\n        : true\r\n    })\r\n  })\r\n}\r\n\r\nexactTextCase.autoRemove = val => !val\r\n\r\nexport const includes = (rows, ids, filterValue) => {\r\n  return rows.filter(row => {\r\n    return ids.some(id => {\r\n      const rowValue = row.values[id]\r\n      return rowValue.includes(filterValue)\r\n    })\r\n  })\r\n}\r\n\r\nincludes.autoRemove = val => !val || !val.length\r\n\r\nexport const includesAll = (rows, ids, filterValue) => {\r\n  return rows.filter(row => {\r\n    return ids.some(id => {\r\n      const rowValue = row.values[id]\r\n      return (\r\n        rowValue &&\r\n        rowValue.length &&\r\n        filterValue.every(val => rowValue.includes(val))\r\n      )\r\n    })\r\n  })\r\n}\r\n\r\nincludesAll.autoRemove = val => !val || !val.length\r\n\r\nexport const exact = (rows, ids, filterValue) => {\r\n  return rows.filter(row => {\r\n    return ids.some(id => {\r\n      const rowValue = row.values[id]\r\n      return rowValue === filterValue\r\n    })\r\n  })\r\n}\r\n\r\nexact.autoRemove = val => typeof val === 'undefined'\r\n\r\nexport const equals = (rows, ids, filterValue) => {\r\n  return rows.filter(row => {\r\n    return ids.some(id => {\r\n      const rowValue = row.values[id]\r\n      // eslint-disable-next-line eqeqeq\r\n      return rowValue == filterValue\r\n    })\r\n  })\r\n}\r\n\r\nequals.autoRemove = val => val == null\r\n\r\nexport const between = (rows, ids, filterValue) => {\r\n  let [min, max] = filterValue || []\r\n\r\n  min = typeof min === 'number' ? min : -Infinity\r\n  max = typeof max === 'number' ? max : Infinity\r\n\r\n  if (min > max) {\r\n    const temp = min\r\n    min = max\r\n    max = temp\r\n  }\r\n\r\n  return rows.filter(row => {\r\n    return ids.some(id => {\r\n      const rowValue = row.values[id]\r\n      return rowValue >= min && rowValue <= max\r\n    })\r\n  })\r\n}\r\n\r\nbetween.autoRemove = val =>\r\n  !val || (typeof val[0] !== 'number' && typeof val[1] !== 'number')\r\n","import React from 'react'\r\n\r\nimport {\r\n  getFirstDefined,\r\n  getFilterMethod,\r\n  shouldAutoRemoveFilter,\r\n} from '../utils'\r\n\r\nimport {\r\n  actions,\r\n  useGetLatest,\r\n  functionalUpdate,\r\n  useMountedLayoutEffect,\r\n} from '../publicUtils'\r\n\r\nimport * as filterTypes from '../filterTypes'\r\n\r\n// Actions\r\nactions.resetFilters = 'resetFilters'\r\nactions.setFilter = 'setFilter'\r\nactions.setAllFilters = 'setAllFilters'\r\n\r\nexport const useFilters = hooks => {\r\n  hooks.stateReducers.push(reducer)\r\n  hooks.useInstance.push(useInstance)\r\n}\r\n\r\nuseFilters.pluginName = 'useFilters'\r\n\r\nfunction reducer(state, action, previousState, instance) {\r\n  if (action.type === actions.init) {\r\n    return {\r\n      filters: [],\r\n      ...state,\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.resetFilters) {\r\n    return {\r\n      ...state,\r\n      filters: instance.initialState.filters || [],\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.setFilter) {\r\n    const { columnId, filterValue } = action\r\n    const { allColumns, filterTypes: userFilterTypes } = instance\r\n\r\n    const column = allColumns.find(d => d.id === columnId)\r\n\r\n    if (!column) {\r\n      throw new Error(\r\n        `React-Table: Could not find a column with id: ${columnId}`\r\n      )\r\n    }\r\n\r\n    const filterMethod = getFilterMethod(\r\n      column.filter,\r\n      userFilterTypes || {},\r\n      filterTypes\r\n    )\r\n\r\n    const previousfilter = state.filters.find(d => d.id === columnId)\r\n\r\n    const newFilter = functionalUpdate(\r\n      filterValue,\r\n      previousfilter && previousfilter.value\r\n    )\r\n\r\n    //\r\n    if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter, column)) {\r\n      return {\r\n        ...state,\r\n        filters: state.filters.filter(d => d.id !== columnId),\r\n      }\r\n    }\r\n\r\n    if (previousfilter) {\r\n      return {\r\n        ...state,\r\n        filters: state.filters.map(d => {\r\n          if (d.id === columnId) {\r\n            return { id: columnId, value: newFilter }\r\n          }\r\n          return d\r\n        }),\r\n      }\r\n    }\r\n\r\n    return {\r\n      ...state,\r\n      filters: [...state.filters, { id: columnId, value: newFilter }],\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.setAllFilters) {\r\n    const { filters } = action\r\n    const { allColumns, filterTypes: userFilterTypes } = instance\r\n\r\n    return {\r\n      ...state,\r\n      // Filter out undefined values\r\n      filters: functionalUpdate(filters, state.filters).filter(filter => {\r\n        const column = allColumns.find(d => d.id === filter.id)\r\n        const filterMethod = getFilterMethod(\r\n          column.filter,\r\n          userFilterTypes || {},\r\n          filterTypes\r\n        )\r\n\r\n        if (\r\n          shouldAutoRemoveFilter(filterMethod.autoRemove, filter.value, column)\r\n        ) {\r\n          return false\r\n        }\r\n        return true\r\n      }),\r\n    }\r\n  }\r\n}\r\n\r\nfunction useInstance(instance) {\r\n  const {\r\n    data,\r\n    rows,\r\n    flatRows,\r\n    rowsById,\r\n    allColumns,\r\n    filterTypes: userFilterTypes,\r\n    manualFilters,\r\n    defaultCanFilter = false,\r\n    disableFilters,\r\n    state: { filters },\r\n    dispatch,\r\n    autoResetFilters = true,\r\n  } = instance\r\n\r\n  const setFilter = React.useCallback(\r\n    (columnId, filterValue) => {\r\n      dispatch({ type: actions.setFilter, columnId, filterValue })\r\n    },\r\n    [dispatch]\r\n  )\r\n\r\n  const setAllFilters = React.useCallback(\r\n    filters => {\r\n      dispatch({\r\n        type: actions.setAllFilters,\r\n        filters,\r\n      })\r\n    },\r\n    [dispatch]\r\n  )\r\n\r\n  allColumns.forEach(column => {\r\n    const {\r\n      id,\r\n      accessor,\r\n      defaultCanFilter: columnDefaultCanFilter,\r\n      disableFilters: columnDisableFilters,\r\n    } = column\r\n\r\n    // Determine if a column is filterable\r\n    column.canFilter = accessor\r\n      ? getFirstDefined(\r\n          columnDisableFilters === true ? false : undefined,\r\n          disableFilters === true ? false : undefined,\r\n          true\r\n        )\r\n      : getFirstDefined(columnDefaultCanFilter, defaultCanFilter, false)\r\n\r\n    // Provide the column a way of updating the filter value\r\n    column.setFilter = val => setFilter(column.id, val)\r\n\r\n    // Provide the current filter value to the column for\r\n    // convenience\r\n    const found = filters.find(d => d.id === id)\r\n    column.filterValue = found && found.value\r\n  })\r\n\r\n  const [\r\n    filteredRows,\r\n    filteredFlatRows,\r\n    filteredRowsById,\r\n  ] = React.useMemo(() => {\r\n    if (manualFilters || !filters.length) {\r\n      return [rows, flatRows, rowsById]\r\n    }\r\n\r\n    const filteredFlatRows = []\r\n    const filteredRowsById = {}\r\n\r\n    // Filters top level and nested rows\r\n    const filterRows = (rows, depth = 0) => {\r\n      let filteredRows = rows\r\n\r\n      filteredRows = filters.reduce(\r\n        (filteredSoFar, { id: columnId, value: filterValue }) => {\r\n          // Find the filters column\r\n          const column = allColumns.find(d => d.id === columnId)\r\n\r\n          if (!column) {\r\n            return filteredSoFar\r\n          }\r\n\r\n          if (depth === 0) {\r\n            column.preFilteredRows = filteredSoFar\r\n          }\r\n\r\n          const filterMethod = getFilterMethod(\r\n            column.filter,\r\n            userFilterTypes || {},\r\n            filterTypes\r\n          )\r\n\r\n          if (!filterMethod) {\r\n            console.warn(\r\n              `Could not find a valid 'column.filter' for column with the ID: ${column.id}.`\r\n            )\r\n            return filteredSoFar\r\n          }\r\n\r\n          // Pass the rows, id, filterValue and column to the filterMethod\r\n          // to get the filtered rows back\r\n          column.filteredRows = filterMethod(\r\n            filteredSoFar,\r\n            [columnId],\r\n            filterValue\r\n          )\r\n\r\n          return column.filteredRows\r\n        },\r\n        rows\r\n      )\r\n\r\n      // Apply the filter to any subRows\r\n      // We technically could do this recursively in the above loop,\r\n      // but that would severely hinder the API for the user, since they\r\n      // would be required to do that recursion in some scenarios\r\n      filteredRows.forEach(row => {\r\n        filteredFlatRows.push(row)\r\n        filteredRowsById[row.id] = row\r\n        if (!row.subRows) {\r\n          return\r\n        }\r\n\r\n        row.subRows =\r\n          row.subRows && row.subRows.length > 0\r\n            ? filterRows(row.subRows, depth + 1)\r\n            : row.subRows\r\n      })\r\n\r\n      return filteredRows\r\n    }\r\n\r\n    return [filterRows(rows), filteredFlatRows, filteredRowsById]\r\n  }, [\r\n    manualFilters,\r\n    filters,\r\n    rows,\r\n    flatRows,\r\n    rowsById,\r\n    allColumns,\r\n    userFilterTypes,\r\n  ])\r\n\r\n  React.useMemo(() => {\r\n    // Now that each filtered column has it's partially filtered rows,\r\n    // lets assign the final filtered rows to all of the other columns\r\n    const nonFilteredColumns = allColumns.filter(\r\n      column => !filters.find(d => d.id === column.id)\r\n    )\r\n\r\n    // This essentially enables faceted filter options to be built easily\r\n    // using every column's preFilteredRows value\r\n    nonFilteredColumns.forEach(column => {\r\n      column.preFilteredRows = filteredRows\r\n      column.filteredRows = filteredRows\r\n    })\r\n  }, [filteredRows, filters, allColumns])\r\n\r\n  const getAutoResetFilters = useGetLatest(autoResetFilters)\r\n\r\n  useMountedLayoutEffect(() => {\r\n    if (getAutoResetFilters()) {\r\n      dispatch({ type: actions.resetFilters })\r\n    }\r\n  }, [dispatch, manualFilters ? null : data])\r\n\r\n  Object.assign(instance, {\r\n    preFilteredRows: rows,\r\n    preFilteredFlatRows: flatRows,\r\n    preFilteredRowsById: rowsById,\r\n    filteredRows,\r\n    filteredFlatRows,\r\n    filteredRowsById,\r\n    rows: filteredRows,\r\n    flatRows: filteredFlatRows,\r\n    rowsById: filteredRowsById,\r\n    setFilter,\r\n    setAllFilters,\r\n  })\r\n}\r\n","import React from 'react'\r\n\r\nimport {\r\n  getFilterMethod,\r\n  shouldAutoRemoveFilter,\r\n  getFirstDefined,\r\n} from '../utils'\r\n\r\nimport {\r\n  actions,\r\n  useMountedLayoutEffect,\r\n  functionalUpdate,\r\n  useGetLatest,\r\n} from '../publicUtils'\r\n\r\nimport * as filterTypes from '../filterTypes'\r\n\r\n// Actions\r\nactions.resetGlobalFilter = 'resetGlobalFilter'\r\nactions.setGlobalFilter = 'setGlobalFilter'\r\n\r\nexport const useGlobalFilter = hooks => {\r\n  hooks.stateReducers.push(reducer)\r\n  hooks.useInstance.push(useInstance)\r\n}\r\n\r\nuseGlobalFilter.pluginName = 'useGlobalFilter'\r\n\r\nfunction reducer(state, action, previousState, instance) {\r\n  if (action.type === actions.resetGlobalFilter) {\r\n    return {\r\n      ...state,\r\n      globalFilter: instance.initialState.globalFilter || undefined,\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.setGlobalFilter) {\r\n    const { filterValue } = action\r\n    const { userFilterTypes } = instance\r\n\r\n    const filterMethod = getFilterMethod(\r\n      instance.globalFilter,\r\n      userFilterTypes || {},\r\n      filterTypes\r\n    )\r\n\r\n    const newFilter = functionalUpdate(filterValue, state.globalFilter)\r\n\r\n    //\r\n    if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter)) {\r\n      const { globalFilter, ...stateWithoutGlobalFilter } = state\r\n      return stateWithoutGlobalFilter\r\n    }\r\n\r\n    return {\r\n      ...state,\r\n      globalFilter: newFilter,\r\n    }\r\n  }\r\n}\r\n\r\nfunction useInstance(instance) {\r\n  const {\r\n    data,\r\n    rows,\r\n    flatRows,\r\n    rowsById,\r\n    allColumns,\r\n    filterTypes: userFilterTypes,\r\n    globalFilter,\r\n    manualGlobalFilter,\r\n    state: { globalFilter: globalFilterValue },\r\n    dispatch,\r\n    autoResetGlobalFilter = true,\r\n    disableGlobalFilter,\r\n  } = instance\r\n\r\n  const setGlobalFilter = React.useCallback(\r\n    filterValue => {\r\n      dispatch({ type: actions.setGlobalFilter, filterValue })\r\n    },\r\n    [dispatch]\r\n  )\r\n\r\n  // TODO: Create a filter cache for incremental high speed multi-filtering\r\n  // This gets pretty complicated pretty fast, since you have to maintain a\r\n  // cache for each row group (top-level rows, and each row's recursive subrows)\r\n  // This would make multi-filtering a lot faster though. Too far?\r\n\r\n  const [\r\n    globalFilteredRows,\r\n    globalFilteredFlatRows,\r\n    globalFilteredRowsById,\r\n  ] = React.useMemo(() => {\r\n    if (manualGlobalFilter || typeof globalFilterValue === 'undefined') {\r\n      return [rows, flatRows, rowsById]\r\n    }\r\n\r\n    const filteredFlatRows = []\r\n    const filteredRowsById = {}\r\n\r\n    const filterMethod = getFilterMethod(\r\n      globalFilter,\r\n      userFilterTypes || {},\r\n      filterTypes\r\n    )\r\n\r\n    if (!filterMethod) {\r\n      console.warn(`Could not find a valid 'globalFilter' option.`)\r\n      return rows\r\n    }\r\n\r\n    allColumns.forEach(column => {\r\n      const { disableGlobalFilter: columnDisableGlobalFilter } = column\r\n\r\n      column.canFilter = getFirstDefined(\r\n        columnDisableGlobalFilter === true ? false : undefined,\r\n        disableGlobalFilter === true ? false : undefined,\r\n        true\r\n      )\r\n    })\r\n\r\n    const filterableColumns = allColumns.filter(c => c.canFilter === true)\r\n\r\n    // Filters top level and nested rows\r\n    const filterRows = filteredRows => {\r\n      filteredRows = filterMethod(\r\n        filteredRows,\r\n        filterableColumns.map(d => d.id),\r\n        globalFilterValue\r\n      )\r\n\r\n      filteredRows.forEach(row => {\r\n        filteredFlatRows.push(row)\r\n        filteredRowsById[row.id] = row\r\n\r\n        row.subRows =\r\n          row.subRows && row.subRows.length\r\n            ? filterRows(row.subRows)\r\n            : row.subRows\r\n      })\r\n\r\n      return filteredRows\r\n    }\r\n\r\n    return [filterRows(rows), filteredFlatRows, filteredRowsById]\r\n  }, [\r\n    manualGlobalFilter,\r\n    globalFilterValue,\r\n    globalFilter,\r\n    userFilterTypes,\r\n    allColumns,\r\n    rows,\r\n    flatRows,\r\n    rowsById,\r\n    disableGlobalFilter,\r\n  ])\r\n\r\n  const getAutoResetGlobalFilter = useGetLatest(autoResetGlobalFilter)\r\n\r\n  useMountedLayoutEffect(() => {\r\n    if (getAutoResetGlobalFilter()) {\r\n      dispatch({ type: actions.resetGlobalFilter })\r\n    }\r\n  }, [dispatch, manualGlobalFilter ? null : data])\r\n\r\n  Object.assign(instance, {\r\n    preGlobalFilteredRows: rows,\r\n    preGlobalFilteredFlatRows: flatRows,\r\n    preGlobalFilteredRowsById: rowsById,\r\n    globalFilteredRows,\r\n    globalFilteredFlatRows,\r\n    globalFilteredRowsById,\r\n    rows: globalFilteredRows,\r\n    flatRows: globalFilteredFlatRows,\r\n    rowsById: globalFilteredRowsById,\r\n    setGlobalFilter,\r\n    disableGlobalFilter,\r\n  })\r\n}\r\n","export function sum(values, aggregatedValues) {\r\n  // It's faster to just add the aggregations together instead of\r\n  // process leaf nodes individually\r\n  return aggregatedValues.reduce(\r\n    (sum, next) => sum + (typeof next === 'number' ? next : 0),\r\n    0\r\n  )\r\n}\r\n\r\nexport function min(values) {\r\n  let min = 0\r\n\r\n  values.forEach(value => {\r\n    if (typeof value === 'number') {\r\n      min = Math.min(min, value)\r\n    }\r\n  })\r\n\r\n  return min\r\n}\r\n\r\nexport function max(values) {\r\n  let max = 0\r\n\r\n  values.forEach(value => {\r\n    if (typeof value === 'number') {\r\n      max = Math.max(max, value)\r\n    }\r\n  })\r\n\r\n  return max\r\n}\r\n\r\nexport function minMax(values) {\r\n  let min = 0\r\n  let max = 0\r\n\r\n  values.forEach(value => {\r\n    if (typeof value === 'number') {\r\n      min = Math.min(min, value)\r\n      max = Math.max(max, value)\r\n    }\r\n  })\r\n\r\n  return `${min}..${max}`\r\n}\r\n\r\nexport function average(values) {\r\n  return sum(null, values) / values.length\r\n}\r\n\r\nexport function median(values) {\r\n  if (!values.length) {\r\n    return null\r\n  }\r\n\r\n  let min = 0\r\n  let max = 0\r\n\r\n  values.forEach(value => {\r\n    if (typeof value === 'number') {\r\n      min = Math.min(min, value)\r\n      max = Math.max(max, value)\r\n    }\r\n  })\r\n\r\n  return (min + max) / 2\r\n}\r\n\r\nexport function unique(values) {\r\n  return [...new Set(values).values()]\r\n}\r\n\r\nexport function uniqueCount(values) {\r\n  return new Set(values).size\r\n}\r\n\r\nexport function count(values) {\r\n  return values.length\r\n}\r\n","import React from 'react'\r\n\r\nimport * as aggregations from '../aggregations'\r\n\r\nimport { getFirstDefined, flattenBy } from '../utils'\r\n\r\nimport {\r\n  actions,\r\n  makePropGetter,\r\n  ensurePluginOrder,\r\n  useMountedLayoutEffect,\r\n  useGetLatest,\r\n} from '../publicUtils'\r\n\r\nconst emptyArray = []\r\nconst emptyObject = {}\r\n\r\n// Actions\r\nactions.resetGroupBy = 'resetGroupBy'\r\nactions.toggleGroupBy = 'toggleGroupBy'\r\n\r\nexport const useGroupBy = hooks => {\r\n  hooks.getGroupByToggleProps = [defaultGetGroupByToggleProps]\r\n  hooks.stateReducers.push(reducer)\r\n  hooks.visibleColumnsDeps.push((deps, { instance }) => [\r\n    ...deps,\r\n    instance.state.groupBy,\r\n  ])\r\n  hooks.visibleColumns.push(visibleColumns)\r\n  hooks.useInstance.push(useInstance)\r\n  hooks.prepareRow.push(prepareRow)\r\n}\r\n\r\nuseGroupBy.pluginName = 'useGroupBy'\r\n\r\nconst defaultGetGroupByToggleProps = (props, { header }) => [\r\n  props,\r\n  {\r\n    onClick: header.canGroupBy\r\n      ? e => {\r\n          e.persist()\r\n          header.toggleGroupBy()\r\n        }\r\n      : undefined,\r\n    style: {\r\n      cursor: header.canGroupBy ? 'pointer' : undefined,\r\n    },\r\n    title: 'Toggle GroupBy',\r\n  },\r\n]\r\n\r\n// Reducer\r\nfunction reducer(state, action, previousState, instance) {\r\n  if (action.type === actions.init) {\r\n    return {\r\n      groupBy: [],\r\n      ...state,\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.resetGroupBy) {\r\n    return {\r\n      ...state,\r\n      groupBy: instance.initialState.groupBy || [],\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.toggleGroupBy) {\r\n    const { columnId, value: setGroupBy } = action\r\n\r\n    const resolvedGroupBy =\r\n      typeof setGroupBy !== 'undefined'\r\n        ? setGroupBy\r\n        : !state.groupBy.includes(columnId)\r\n\r\n    if (resolvedGroupBy) {\r\n      return {\r\n        ...state,\r\n        groupBy: [...state.groupBy, columnId],\r\n      }\r\n    }\r\n\r\n    return {\r\n      ...state,\r\n      groupBy: state.groupBy.filter(d => d !== columnId),\r\n    }\r\n  }\r\n}\r\n\r\nfunction visibleColumns(\r\n  columns,\r\n  {\r\n    instance: {\r\n      state: { groupBy },\r\n    },\r\n  }\r\n) {\r\n  // Sort grouped columns to the start of the column list\r\n  // before the headers are built\r\n\r\n  const groupByColumns = groupBy\r\n    .map(g => columns.find(col => col.id === g))\r\n    .filter(Boolean)\r\n\r\n  const nonGroupByColumns = columns.filter(col => !groupBy.includes(col.id))\r\n\r\n  columns = [...groupByColumns, ...nonGroupByColumns]\r\n\r\n  columns.forEach(column => {\r\n    column.isGrouped = groupBy.includes(column.id)\r\n    column.groupedIndex = groupBy.indexOf(column.id)\r\n  })\r\n\r\n  return columns\r\n}\r\n\r\nconst defaultUserAggregations = {}\r\n\r\nfunction useInstance(instance) {\r\n  const {\r\n    data,\r\n    rows,\r\n    flatRows,\r\n    rowsById,\r\n    allColumns,\r\n    flatHeaders,\r\n    groupByFn = defaultGroupByFn,\r\n    manualGroupBy,\r\n    aggregations: userAggregations = defaultUserAggregations,\r\n    plugins,\r\n    state: { groupBy },\r\n    dispatch,\r\n    autoResetGroupBy = true,\r\n    disableGroupBy,\r\n    defaultCanGroupBy,\r\n    getHooks,\r\n  } = instance\r\n\r\n  ensurePluginOrder(plugins, ['useFilters'], 'useGroupBy')\r\n\r\n  const getInstance = useGetLatest(instance)\r\n\r\n  allColumns.forEach(column => {\r\n    const {\r\n      accessor,\r\n      defaultGroupBy: defaultColumnGroupBy,\r\n      disableGroupBy: columnDisableGroupBy,\r\n    } = column\r\n\r\n    column.canGroupBy = accessor\r\n      ? getFirstDefined(\r\n          column.canGroupBy,\r\n          columnDisableGroupBy === true ? false : undefined,\r\n          disableGroupBy === true ? false : undefined,\r\n          true\r\n        )\r\n      : getFirstDefined(\r\n          column.canGroupBy,\r\n          defaultColumnGroupBy,\r\n          defaultCanGroupBy,\r\n          false\r\n        )\r\n\r\n    if (column.canGroupBy) {\r\n      column.toggleGroupBy = () => instance.toggleGroupBy(column.id)\r\n    }\r\n\r\n    column.Aggregated = column.Aggregated || column.Cell\r\n  })\r\n\r\n  const toggleGroupBy = React.useCallback(\r\n    (columnId, value) => {\r\n      dispatch({ type: actions.toggleGroupBy, columnId, value })\r\n    },\r\n    [dispatch]\r\n  )\r\n\r\n  flatHeaders.forEach(header => {\r\n    header.getGroupByToggleProps = makePropGetter(\r\n      getHooks().getGroupByToggleProps,\r\n      { instance: getInstance(), header }\r\n    )\r\n  })\r\n\r\n  const [\r\n    groupedRows,\r\n    groupedFlatRows,\r\n    groupedRowsById,\r\n    onlyGroupedFlatRows,\r\n    onlyGroupedRowsById,\r\n    nonGroupedFlatRows,\r\n    nonGroupedRowsById,\r\n  ] = React.useMemo(() => {\r\n    if (manualGroupBy || !groupBy.length) {\r\n      return [\r\n        rows,\r\n        flatRows,\r\n        rowsById,\r\n        emptyArray,\r\n        emptyObject,\r\n        flatRows,\r\n        rowsById,\r\n      ]\r\n    }\r\n\r\n    // Ensure that the list of filtered columns exist\r\n    const existingGroupBy = groupBy.filter(g =>\r\n      allColumns.find(col => col.id === g)\r\n    )\r\n\r\n    // Find the columns that can or are aggregating\r\n    // Uses each column to aggregate rows into a single value\r\n    const aggregateRowsToValues = (leafRows, groupedRows, depth) => {\r\n      const values = {}\r\n\r\n      allColumns.forEach(column => {\r\n        // Don't aggregate columns that are in the groupBy\r\n        if (existingGroupBy.includes(column.id)) {\r\n          values[column.id] = groupedRows[0]\r\n            ? groupedRows[0].values[column.id]\r\n            : null\r\n          return\r\n        }\r\n\r\n        // Get the columnValues to aggregate\r\n        const groupedValues = groupedRows.map(row => row.values[column.id])\r\n\r\n        // Get the columnValues to aggregate\r\n        const leafValues = leafRows.map(row => {\r\n          let columnValue = row.values[column.id]\r\n\r\n          if (!depth && column.aggregatedValue) {\r\n            const aggregateValueFn =\r\n              typeof column.aggregateValue === 'function'\r\n                ? column.aggregateValue\r\n                : userAggregations[column.aggregateValue] ||\r\n                  aggregations[column.aggregateValue]\r\n\r\n            if (!aggregateValueFn) {\r\n              console.info({ column })\r\n              throw new Error(\r\n                `React Table: Invalid column.aggregateValue option for column listed above`\r\n              )\r\n            }\r\n\r\n            columnValue = aggregateValueFn(columnValue, row, column)\r\n          }\r\n          return columnValue\r\n        })\r\n\r\n        // Aggregate the values\r\n        let aggregateFn =\r\n          typeof column.aggregate === 'function'\r\n            ? column.aggregate\r\n            : userAggregations[column.aggregate] ||\r\n              aggregations[column.aggregate]\r\n\r\n        if (aggregateFn) {\r\n          values[column.id] = aggregateFn(leafValues, groupedValues)\r\n        } else if (column.aggregate) {\r\n          console.info({ column })\r\n          throw new Error(\r\n            `React Table: Invalid column.aggregate option for column listed above`\r\n          )\r\n        } else {\r\n          values[column.id] = null\r\n        }\r\n      })\r\n\r\n      return values\r\n    }\r\n\r\n    let groupedFlatRows = []\r\n    const groupedRowsById = {}\r\n    const onlyGroupedFlatRows = []\r\n    const onlyGroupedRowsById = {}\r\n    const nonGroupedFlatRows = []\r\n    const nonGroupedRowsById = {}\r\n\r\n    // Recursively group the data\r\n    const groupUpRecursively = (rows, depth = 0, parentId) => {\r\n      // This is the last level, just return the rows\r\n      if (depth === existingGroupBy.length) {\r\n        return rows\r\n      }\r\n\r\n      const columnId = existingGroupBy[depth]\r\n\r\n      // Group the rows together for this level wih custom column function\r\n      const currentColumn = allColumns.find(col => col.id === columnId)\r\n      const customGroupByFn = typeof currentColumn.groupBy === 'function'\r\n        ? currentColumn.groupBy : groupByFn\r\n      let rowGroupsMap = customGroupByFn(rows, columnId)\r\n      \r\n      // Peform aggregations for each group\r\n      const aggregatedGroupedRows = Object.entries(rowGroupsMap).map(\r\n        ([groupByVal, groupedRows], index) => {\r\n          let id = `${columnId}:${groupByVal}`\r\n          id = parentId ? `${parentId}>${id}` : id\r\n\r\n          // First, Recurse to group sub rows before aggregation\r\n          const subRows = groupUpRecursively(groupedRows, depth + 1, id)\r\n\r\n          // Flatten the leaf rows of the rows in this group\r\n          const leafRows = depth\r\n            ? flattenBy(groupedRows, 'leafRows')\r\n            : groupedRows\r\n\r\n          const values = aggregateRowsToValues(leafRows, groupedRows, depth)\r\n\r\n          const row = {\r\n            id,\r\n            isGrouped: true,\r\n            groupByID: columnId,\r\n            groupByVal,\r\n            values,\r\n            subRows,\r\n            leafRows,\r\n            depth,\r\n            index,\r\n          }\r\n\r\n          subRows.forEach(subRow => {\r\n            groupedFlatRows.push(subRow)\r\n            groupedRowsById[subRow.id] = subRow\r\n            if (subRow.isGrouped) {\r\n              onlyGroupedFlatRows.push(subRow)\r\n              onlyGroupedRowsById[subRow.id] = subRow\r\n            } else {\r\n              nonGroupedFlatRows.push(subRow)\r\n              nonGroupedRowsById[subRow.id] = subRow\r\n            }\r\n          })\r\n\r\n          return row\r\n        }\r\n      )\r\n\r\n      return aggregatedGroupedRows\r\n    }\r\n\r\n    const groupedRows = groupUpRecursively(rows)\r\n\r\n    groupedRows.forEach(subRow => {\r\n      groupedFlatRows.push(subRow)\r\n      groupedRowsById[subRow.id] = subRow\r\n      if (subRow.isGrouped) {\r\n        onlyGroupedFlatRows.push(subRow)\r\n        onlyGroupedRowsById[subRow.id] = subRow\r\n      } else {\r\n        nonGroupedFlatRows.push(subRow)\r\n        nonGroupedRowsById[subRow.id] = subRow\r\n      }\r\n    })\r\n   \r\n    // Assign the new data\r\n    return [\r\n      groupedRows,\r\n      groupedFlatRows,\r\n      groupedRowsById,\r\n      onlyGroupedFlatRows,\r\n      onlyGroupedRowsById,\r\n      nonGroupedFlatRows,\r\n      nonGroupedRowsById,\r\n    ]\r\n  }, [\r\n    manualGroupBy,\r\n    groupBy,\r\n    rows,\r\n    flatRows,\r\n    rowsById,\r\n    allColumns,\r\n    userAggregations,\r\n    groupByFn,\r\n  ])\r\n\r\n  const getAutoResetGroupBy = useGetLatest(autoResetGroupBy)\r\n\r\n  useMountedLayoutEffect(() => {\r\n    if (getAutoResetGroupBy()) {\r\n      dispatch({ type: actions.resetGroupBy })\r\n    }\r\n  }, [dispatch, manualGroupBy ? null : data])\r\n\r\n  Object.assign(instance, {\r\n    preGroupedRows: rows,\r\n    preGroupedFlatRow: flatRows,\r\n    preGroupedRowsById: rowsById,\r\n    groupedRows,\r\n    groupedFlatRows,\r\n    groupedRowsById,\r\n    onlyGroupedFlatRows,\r\n    onlyGroupedRowsById,\r\n    nonGroupedFlatRows,\r\n    nonGroupedRowsById,\r\n    rows: groupedRows,\r\n    flatRows: groupedFlatRows,\r\n    rowsById: groupedRowsById,\r\n    toggleGroupBy,\r\n  })\r\n}\r\n\r\nfunction prepareRow(row) {\r\n  row.allCells.forEach(cell => {\r\n    // Grouped cells are in the groupBy and the pivot cell for the row\r\n    cell.isGrouped = cell.column.isGrouped && cell.column.id === row.groupByID\r\n    // Placeholder cells are any columns in the groupBy that are not grouped\r\n    cell.isPlaceholder = !cell.isGrouped && cell.column.isGrouped\r\n    // Aggregated cells are not grouped, not repeated, but still have subRows\r\n    cell.isAggregated = !cell.isGrouped && !cell.isPlaceholder && row.canExpand\r\n  })\r\n}\r\n\r\nexport function defaultGroupByFn(rows, columnId) {\r\n  return rows.reduce((prev, row, i) => {\r\n    // TODO: Might want to implement a key serializer here so\r\n    // irregular column values can still be grouped if needed?\r\n    const resKey = `${row.values[columnId]}`\r\n    prev[resKey] = Array.isArray(prev[resKey]) ? prev[resKey] : []\r\n    prev[resKey].push(row)\r\n    return prev\r\n  }, {})\r\n}\r\n","const reSplitAlphaNumeric = /([0-9]+)/gm\r\n\r\n// Mixed sorting is slow, but very inclusive of many edge cases.\r\n// It handles numbers, mixed alphanumeric combinations, and even\r\n// null, undefined, and Infinity\r\nexport const alphanumeric = (rowA, rowB, columnId) => {\r\n  let a = getRowValueByColumnID(rowA, columnId)\r\n  let b = getRowValueByColumnID(rowB, columnId)\r\n  // Force to strings (or \"\" for unsupported types)\r\n  a = toString(a)\r\n  b = toString(b)\r\n\r\n  // Split on number groups, but keep the delimiter\r\n  // Then remove falsey split values\r\n  a = a.split(reSplitAlphaNumeric).filter(Boolean)\r\n  b = b.split(reSplitAlphaNumeric).filter(Boolean)\r\n\r\n  // While\r\n  while (a.length && b.length) {\r\n    let aa = a.shift()\r\n    let bb = b.shift()\r\n\r\n    const an = parseInt(aa, 10)\r\n    const bn = parseInt(bb, 10)\r\n\r\n    const combo = [an, bn].sort()\r\n\r\n    // Both are string\r\n    if (isNaN(combo[0])) {\r\n      if (aa > bb) {\r\n        return 1\r\n      }\r\n      if (bb > aa) {\r\n        return -1\r\n      }\r\n      continue\r\n    }\r\n\r\n    // One is a string, one is a number\r\n    if (isNaN(combo[1])) {\r\n      return isNaN(an) ? -1 : 1\r\n    }\r\n\r\n    // Both are numbers\r\n    if (an > bn) {\r\n      return 1\r\n    }\r\n    if (bn > an) {\r\n      return -1\r\n    }\r\n  }\r\n\r\n  return a.length - b.length\r\n}\r\n\r\nexport function datetime(rowA, rowB, columnId) {\r\n  let a = getRowValueByColumnID(rowA, columnId)\r\n  let b = getRowValueByColumnID(rowB, columnId)\r\n\r\n  a = a.getTime()\r\n  b = b.getTime()\r\n\r\n  return compareBasic(a, b)\r\n}\r\n\r\nexport function basic(rowA, rowB, columnId) {\r\n  let a = getRowValueByColumnID(rowA, columnId)\r\n  let b = getRowValueByColumnID(rowB, columnId)\r\n\r\n  return compareBasic(a, b)\r\n}\r\n\r\n// Utils\r\n\r\nfunction compareBasic(a, b) {\r\n  return a === b ? 0 : a > b ? 1 : -1\r\n}\r\n\r\nfunction getRowValueByColumnID(row, columnId) {\r\n  return row.values[columnId]\r\n}\r\n\r\nfunction toString(a) {\r\n  if (typeof a === 'number') {\r\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\r\n      return ''\r\n    }\r\n    return String(a)\r\n  }\r\n  if (typeof a === 'string') {\r\n    return a\r\n  }\r\n  return ''\r\n}\r\n","import React from 'react'\r\n\r\nimport {\r\n  actions,\r\n  ensurePluginOrder,\r\n  defaultColumn,\r\n  makePropGetter,\r\n  useGetLatest,\r\n  useMountedLayoutEffect,\r\n} from '../publicUtils'\r\n\r\nimport { getFirstDefined, isFunction } from '../utils'\r\n\r\nimport * as sortTypes from '../sortTypes'\r\n\r\n// Actions\r\nactions.resetSortBy = 'resetSortBy'\r\nactions.toggleSortBy = 'toggleSortBy'\r\nactions.clearSortBy = 'clearSortBy'\r\n\r\ndefaultColumn.sortType = 'alphanumeric'\r\ndefaultColumn.sortDescFirst = false\r\n\r\nexport const useSortBy = hooks => {\r\n  hooks.getSortByToggleProps = [defaultGetSortByToggleProps]\r\n  hooks.stateReducers.push(reducer)\r\n  hooks.useInstance.push(useInstance)\r\n}\r\n\r\nuseSortBy.pluginName = 'useSortBy'\r\n\r\nconst defaultGetSortByToggleProps = (props, { instance, column }) => {\r\n  const { isMultiSortEvent = e => e.shiftKey } = instance\r\n\r\n  return [\r\n    props,\r\n    {\r\n      onClick: column.canSort\r\n        ? e => {\r\n            e.persist()\r\n            column.toggleSortBy(\r\n              undefined,\r\n              !instance.disableMultiSort && isMultiSortEvent(e)\r\n            )\r\n          }\r\n        : undefined,\r\n      style: {\r\n        cursor: column.canSort ? 'pointer' : undefined,\r\n      },\r\n      title: column.canSort ? 'Toggle SortBy' : undefined,\r\n    },\r\n  ]\r\n}\r\n\r\n// Reducer\r\nfunction reducer(state, action, previousState, instance) {\r\n  if (action.type === actions.init) {\r\n    return {\r\n      sortBy: [],\r\n      ...state,\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.resetSortBy) {\r\n    return {\r\n      ...state,\r\n      sortBy: instance.initialState.sortBy || [],\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.clearSortBy) {\r\n    const { sortBy } = state\r\n    const newSortBy = sortBy.filter(d => d.id !== action.columnId)\r\n\r\n    return {\r\n      ...state,\r\n      sortBy: newSortBy,\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.toggleSortBy) {\r\n    const { columnId, desc, multi } = action\r\n\r\n    const {\r\n      allColumns,\r\n      disableMultiSort,\r\n      disableSortRemove,\r\n      disableMultiRemove,\r\n      maxMultiSortColCount = Number.MAX_SAFE_INTEGER,\r\n    } = instance\r\n\r\n    const { sortBy } = state\r\n\r\n    // Find the column for this columnId\r\n    const column = allColumns.find(d => d.id === columnId)\r\n    const { sortDescFirst } = column\r\n\r\n    // Find any existing sortBy for this column\r\n    const existingSortBy = sortBy.find(d => d.id === columnId)\r\n    const existingIndex = sortBy.findIndex(d => d.id === columnId)\r\n    const hasDescDefined = typeof desc !== 'undefined' && desc !== null\r\n\r\n    let newSortBy = []\r\n\r\n    // What should we do with this sort action?\r\n    let sortAction\r\n\r\n    if (!disableMultiSort && multi) {\r\n      if (existingSortBy) {\r\n        sortAction = 'toggle'\r\n      } else {\r\n        sortAction = 'add'\r\n      }\r\n    } else {\r\n      // Normal mode\r\n      if (existingIndex !== sortBy.length - 1) {\r\n        sortAction = 'replace'\r\n      } else if (existingSortBy) {\r\n        sortAction = 'toggle'\r\n      } else {\r\n        sortAction = 'replace'\r\n      }\r\n    }\r\n\r\n    // Handle toggle states that will remove the sortBy\r\n    if (\r\n      sortAction === 'toggle' && // Must be toggling\r\n      !disableSortRemove && // If disableSortRemove, disable in general\r\n      !hasDescDefined && // Must not be setting desc\r\n      (multi ? !disableMultiRemove : true) && // If multi, don't allow if disableMultiRemove\r\n      ((existingSortBy && // Finally, detect if it should indeed be removed\r\n        existingSortBy.desc &&\r\n        !sortDescFirst) ||\r\n        (!existingSortBy.desc && sortDescFirst))\r\n    ) {\r\n      sortAction = 'remove'\r\n    }\r\n\r\n    if (sortAction === 'replace') {\r\n      newSortBy = [\r\n        {\r\n          id: columnId,\r\n          desc: hasDescDefined ? desc : sortDescFirst,\r\n        },\r\n      ]\r\n    } else if (sortAction === 'add') {\r\n      newSortBy = [\r\n        ...sortBy,\r\n        {\r\n          id: columnId,\r\n          desc: hasDescDefined ? desc : sortDescFirst,\r\n        },\r\n      ]\r\n      // Take latest n columns\r\n      newSortBy.splice(0, newSortBy.length - maxMultiSortColCount)\r\n    } else if (sortAction === 'toggle') {\r\n      // This flips (or sets) the\r\n      newSortBy = sortBy.map(d => {\r\n        if (d.id === columnId) {\r\n          return {\r\n            ...d,\r\n            desc: hasDescDefined ? desc : !existingSortBy.desc,\r\n          }\r\n        }\r\n        return d\r\n      })\r\n    } else if (sortAction === 'remove') {\r\n      newSortBy = sortBy.filter(d => d.id !== columnId)\r\n    }\r\n\r\n    return {\r\n      ...state,\r\n      sortBy: newSortBy,\r\n    }\r\n  }\r\n}\r\n\r\nfunction useInstance(instance) {\r\n  const {\r\n    data,\r\n    rows,\r\n    flatRows,\r\n    allColumns,\r\n    orderByFn = defaultOrderByFn,\r\n    sortTypes: userSortTypes,\r\n    manualSortBy,\r\n    defaultCanSort,\r\n    disableSortBy,\r\n    flatHeaders,\r\n    state: { sortBy },\r\n    dispatch,\r\n    plugins,\r\n    getHooks,\r\n    autoResetSortBy = true,\r\n  } = instance\r\n\r\n  ensurePluginOrder(\r\n    plugins,\r\n    ['useFilters', 'useGlobalFilter', 'useGroupBy', 'usePivotColumns'],\r\n    'useSortBy'\r\n  )\r\n\r\n  // Updates sorting based on a columnId, desc flag and multi flag\r\n  const toggleSortBy = React.useCallback(\r\n    (columnId, desc, multi) => {\r\n      dispatch({ type: actions.toggleSortBy, columnId, desc, multi })\r\n    },\r\n    [dispatch]\r\n  )\r\n\r\n  // use reference to avoid memory leak in #1608\r\n  const getInstance = useGetLatest(instance)\r\n\r\n  // Add the getSortByToggleProps method to columns and headers\r\n  flatHeaders.forEach(column => {\r\n    const {\r\n      accessor,\r\n      canSort: defaultColumnCanSort,\r\n      disableSortBy: columnDisableSortBy,\r\n      id,\r\n    } = column\r\n\r\n    const canSort = accessor\r\n      ? getFirstDefined(\r\n          columnDisableSortBy === true ? false : undefined,\r\n          disableSortBy === true ? false : undefined,\r\n          true\r\n        )\r\n      : getFirstDefined(defaultCanSort, defaultColumnCanSort, false)\r\n\r\n    column.canSort = canSort\r\n\r\n    if (column.canSort) {\r\n      column.toggleSortBy = (desc, multi) =>\r\n        toggleSortBy(column.id, desc, multi)\r\n\r\n      column.clearSortBy = () => {\r\n        dispatch({ type: actions.clearSortBy, columnId: column.id })\r\n      }\r\n    }\r\n\r\n    column.getSortByToggleProps = makePropGetter(\r\n      getHooks().getSortByToggleProps,\r\n      {\r\n        instance: getInstance(),\r\n        column,\r\n      }\r\n    )\r\n\r\n    const columnSort = sortBy.find(d => d.id === id)\r\n    column.isSorted = !!columnSort\r\n    column.sortedIndex = sortBy.findIndex(d => d.id === id)\r\n    column.isSortedDesc = column.isSorted ? columnSort.desc : undefined\r\n  })\r\n\r\n  const [sortedRows, sortedFlatRows] = React.useMemo(() => {\r\n    if (manualSortBy || !sortBy.length) {\r\n      return [rows, flatRows]\r\n    }\r\n\r\n    const sortedFlatRows = []\r\n\r\n    // Filter out sortBys that correspond to non existing columns\r\n    const availableSortBy = sortBy.filter(sort =>\r\n      allColumns.find(col => col.id === sort.id)\r\n    )\r\n\r\n    const sortData = rows => {\r\n      // Use the orderByFn to compose multiple sortBy's together.\r\n      // This will also perform a stable sorting using the row index\r\n      // if needed.\r\n      const sortedData = orderByFn(\r\n        rows,\r\n        availableSortBy.map(sort => {\r\n          // Support custom sorting methods for each column\r\n          const column = allColumns.find(d => d.id === sort.id)\r\n\r\n          if (!column) {\r\n            throw new Error(\r\n              `React-Table: Could not find a column with id: ${sort.id} while sorting`\r\n            )\r\n          }\r\n\r\n          const { sortType } = column\r\n\r\n          // Look up sortBy functions in this order:\r\n          // column function\r\n          // column string lookup on user sortType\r\n          // column string lookup on built-in sortType\r\n          // default function\r\n          // default string lookup on user sortType\r\n          // default string lookup on built-in sortType\r\n          const sortMethod =\r\n            isFunction(sortType) ||\r\n            (userSortTypes || {})[sortType] ||\r\n            sortTypes[sortType]\r\n\r\n          if (!sortMethod) {\r\n            throw new Error(\r\n              `React-Table: Could not find a valid sortType of '${sortType}' for column '${sort.id}'.`\r\n            )\r\n          }\r\n\r\n          // Return the correct sortFn.\r\n          // This function should always return in ascending order\r\n          return (a, b) => sortMethod(a, b, sort.id, sort.desc)\r\n        }),\r\n        // Map the directions\r\n        availableSortBy.map(sort => {\r\n          // Detect and use the sortInverted option\r\n          const column = allColumns.find(d => d.id === sort.id)\r\n\r\n          if (column && column.sortInverted) {\r\n            return sort.desc\r\n          }\r\n\r\n          return !sort.desc\r\n        })\r\n      )\r\n\r\n      // If there are sub-rows, sort them\r\n      sortedData.forEach(row => {\r\n        sortedFlatRows.push(row)\r\n        if (!row.subRows || row.subRows.length <= 1) {\r\n          return\r\n        }\r\n        row.subRows = sortData(row.subRows)\r\n      })\r\n\r\n      return sortedData\r\n    }\r\n\r\n    return [sortData(rows), sortedFlatRows]\r\n  }, [\r\n    manualSortBy,\r\n    sortBy,\r\n    rows,\r\n    flatRows,\r\n    allColumns,\r\n    orderByFn,\r\n    userSortTypes,\r\n  ])\r\n\r\n  const getAutoResetSortBy = useGetLatest(autoResetSortBy)\r\n\r\n  useMountedLayoutEffect(() => {\r\n    if (getAutoResetSortBy()) {\r\n      dispatch({ type: actions.resetSortBy })\r\n    }\r\n  }, [manualSortBy ? null : data])\r\n\r\n  Object.assign(instance, {\r\n    preSortedRows: rows,\r\n    preSortedFlatRows: flatRows,\r\n    sortedRows,\r\n    sortedFlatRows,\r\n    rows: sortedRows,\r\n    flatRows: sortedFlatRows,\r\n    toggleSortBy,\r\n  })\r\n}\r\n\r\nexport function defaultOrderByFn(arr, funcs, dirs) {\r\n  return [...arr].sort((rowA, rowB) => {\r\n    for (let i = 0; i < funcs.length; i += 1) {\r\n      const sortFn = funcs[i]\r\n      const desc = dirs[i] === false || dirs[i] === 'desc'\r\n      const sortInt = sortFn(rowA, rowB)\r\n      if (sortInt !== 0) {\r\n        return desc ? -sortInt : sortInt\r\n      }\r\n    }\r\n    return dirs[0] ? rowA.index - rowB.index : rowB.index - rowA.index\r\n  })\r\n}\r\n","import React from 'react'\r\n\r\n//\r\n\r\nimport {\r\n  actions,\r\n  ensurePluginOrder,\r\n  functionalUpdate,\r\n  useMountedLayoutEffect,\r\n  useGetLatest,\r\n} from '../publicUtils'\r\n\r\nimport { expandRows } from '../utils'\r\n\r\nconst pluginName = 'usePagination'\r\n\r\n// Actions\r\nactions.resetPage = 'resetPage'\r\nactions.gotoPage = 'gotoPage'\r\nactions.setPageSize = 'setPageSize'\r\n\r\nexport const usePagination = hooks => {\r\n  hooks.stateReducers.push(reducer)\r\n  hooks.useInstance.push(useInstance)\r\n}\r\n\r\nusePagination.pluginName = pluginName\r\n\r\nfunction reducer(state, action, previousState, instance) {\r\n  if (action.type === actions.init) {\r\n    return {\r\n      pageSize: 10,\r\n      pageIndex: 0,\r\n      ...state,\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.resetPage) {\r\n    return {\r\n      ...state,\r\n      pageIndex: instance.initialState.pageIndex || 0,\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.gotoPage) {\r\n    const { pageCount, page } = instance\r\n    const newPageIndex = functionalUpdate(action.pageIndex, state.pageIndex)\r\n    const cannnotPreviousPage = newPageIndex < 0\r\n    const cannotNextPage =\r\n      pageCount === -1\r\n        ? page.length < state.pageSize\r\n        : newPageIndex > pageCount - 1\r\n\r\n    if (cannnotPreviousPage || cannotNextPage) {\r\n      return state\r\n    }\r\n\r\n    return {\r\n      ...state,\r\n      pageIndex: newPageIndex,\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.setPageSize) {\r\n    const { pageSize } = action\r\n    const topRowIndex = state.pageSize * state.pageIndex\r\n    const pageIndex = Math.floor(topRowIndex / pageSize)\r\n\r\n    return {\r\n      ...state,\r\n      pageIndex,\r\n      pageSize,\r\n    }\r\n  }\r\n}\r\n\r\nfunction useInstance(instance) {\r\n  const {\r\n    rows,\r\n    autoResetPage = true,\r\n    manualExpandedKey = 'expanded',\r\n    plugins,\r\n    pageCount: userPageCount,\r\n    paginateExpandedRows = true,\r\n    expandSubRows = true,\r\n    state: {\r\n      pageSize,\r\n      pageIndex,\r\n      expanded,\r\n      globalFilter,\r\n      filters,\r\n      groupBy,\r\n      sortBy,\r\n    },\r\n    dispatch,\r\n    data,\r\n    manualPagination,\r\n  } = instance\r\n\r\n  ensurePluginOrder(\r\n    plugins,\r\n    ['useGlobalFilter', 'useFilters', 'useGroupBy', 'useSortBy', 'useExpanded'],\r\n    'usePagination'\r\n  )\r\n\r\n  const getAutoResetPage = useGetLatest(autoResetPage)\r\n\r\n  useMountedLayoutEffect(() => {\r\n    if (getAutoResetPage()) {\r\n      dispatch({ type: actions.resetPage })\r\n    }\r\n  }, [\r\n    dispatch,\r\n    manualPagination ? null : data,\r\n    globalFilter,\r\n    filters,\r\n    groupBy,\r\n    sortBy,\r\n  ])\r\n\r\n  const pageCount = manualPagination\r\n    ? userPageCount\r\n    : Math.ceil(rows.length / pageSize)\r\n\r\n  const pageOptions = React.useMemo(\r\n    () =>\r\n      pageCount > 0\r\n        ? [...new Array(pageCount)].fill(null).map((d, i) => i)\r\n        : [],\r\n    [pageCount]\r\n  )\r\n\r\n  const page = React.useMemo(() => {\r\n    let page\r\n\r\n    if (manualPagination) {\r\n      page = rows\r\n    } else {\r\n      const pageStart = pageSize * pageIndex\r\n      const pageEnd = pageStart + pageSize\r\n\r\n      page = rows.slice(pageStart, pageEnd)\r\n    }\r\n\r\n    if (paginateExpandedRows) {\r\n      return page\r\n    }\r\n\r\n    return expandRows(page, { manualExpandedKey, expanded, expandSubRows })\r\n  }, [\r\n    expandSubRows,\r\n    expanded,\r\n    manualExpandedKey,\r\n    manualPagination,\r\n    pageIndex,\r\n    pageSize,\r\n    paginateExpandedRows,\r\n    rows,\r\n  ])\r\n\r\n  const canPreviousPage = pageIndex > 0\r\n  const canNextPage =\r\n    pageCount === -1 ? page.length >= pageSize : pageIndex < pageCount - 1\r\n\r\n  const gotoPage = React.useCallback(\r\n    pageIndex => {\r\n      dispatch({ type: actions.gotoPage, pageIndex })\r\n    },\r\n    [dispatch]\r\n  )\r\n\r\n  const previousPage = React.useCallback(() => {\r\n    return gotoPage(old => old - 1)\r\n  }, [gotoPage])\r\n\r\n  const nextPage = React.useCallback(() => {\r\n    return gotoPage(old => old + 1)\r\n  }, [gotoPage])\r\n\r\n  const setPageSize = React.useCallback(\r\n    pageSize => {\r\n      dispatch({ type: actions.setPageSize, pageSize })\r\n    },\r\n    [dispatch]\r\n  )\r\n\r\n  Object.assign(instance, {\r\n    pageOptions,\r\n    pageCount,\r\n    page,\r\n    canPreviousPage,\r\n    canNextPage,\r\n    gotoPage,\r\n    previousPage,\r\n    nextPage,\r\n    setPageSize,\r\n  })\r\n}\r\n","/* istanbul ignore file */\r\n\r\nimport {\r\n  actions,\r\n  makePropGetter,\r\n  ensurePluginOrder,\r\n  useMountedLayoutEffect,\r\n  useGetLatest,\r\n} from '../publicUtils'\r\n\r\nimport { flattenColumns, getFirstDefined } from '../utils'\r\n\r\n// Actions\r\nactions.resetPivot = 'resetPivot'\r\nactions.togglePivot = 'togglePivot'\r\n\r\nexport const _UNSTABLE_usePivotColumns = hooks => {\r\n  hooks.getPivotToggleProps = [defaultGetPivotToggleProps]\r\n  hooks.stateReducers.push(reducer)\r\n  hooks.useInstanceAfterData.push(useInstanceAfterData)\r\n  hooks.allColumns.push(allColumns)\r\n  hooks.accessValue.push(accessValue)\r\n  hooks.materializedColumns.push(materializedColumns)\r\n  hooks.materializedColumnsDeps.push(materializedColumnsDeps)\r\n  hooks.visibleColumns.push(visibleColumns)\r\n  hooks.visibleColumnsDeps.push(visibleColumnsDeps)\r\n  hooks.useInstance.push(useInstance)\r\n  hooks.prepareRow.push(prepareRow)\r\n}\r\n\r\n_UNSTABLE_usePivotColumns.pluginName = 'usePivotColumns'\r\n\r\nconst defaultPivotColumns = []\r\n\r\nconst defaultGetPivotToggleProps = (props, { header }) => [\r\n  props,\r\n  {\r\n    onClick: header.canPivot\r\n      ? e => {\r\n          e.persist()\r\n          header.togglePivot()\r\n        }\r\n      : undefined,\r\n    style: {\r\n      cursor: header.canPivot ? 'pointer' : undefined,\r\n    },\r\n    title: 'Toggle Pivot',\r\n  },\r\n]\r\n\r\n// Reducer\r\nfunction reducer(state, action, previousState, instance) {\r\n  if (action.type === actions.init) {\r\n    return {\r\n      pivotColumns: defaultPivotColumns,\r\n      ...state,\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.resetPivot) {\r\n    return {\r\n      ...state,\r\n      pivotColumns: instance.initialState.pivotColumns || defaultPivotColumns,\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.togglePivot) {\r\n    const { columnId, value: setPivot } = action\r\n\r\n    const resolvedPivot =\r\n      typeof setPivot !== 'undefined'\r\n        ? setPivot\r\n        : !state.pivotColumns.includes(columnId)\r\n\r\n    if (resolvedPivot) {\r\n      return {\r\n        ...state,\r\n        pivotColumns: [...state.pivotColumns, columnId],\r\n      }\r\n    }\r\n\r\n    return {\r\n      ...state,\r\n      pivotColumns: state.pivotColumns.filter(d => d !== columnId),\r\n    }\r\n  }\r\n}\r\n\r\nfunction useInstanceAfterData(instance) {\r\n  instance.allColumns.forEach(column => {\r\n    column.isPivotSource = instance.state.pivotColumns.includes(column.id)\r\n  })\r\n}\r\n\r\nfunction allColumns(columns, { instance }) {\r\n  columns.forEach(column => {\r\n    column.isPivotSource = instance.state.pivotColumns.includes(column.id)\r\n    column.uniqueValues = new Set()\r\n  })\r\n  return columns\r\n}\r\n\r\nfunction accessValue(value, { column }) {\r\n  if (column.uniqueValues && typeof value !== 'undefined') {\r\n    column.uniqueValues.add(value)\r\n  }\r\n  return value\r\n}\r\n\r\nfunction materializedColumns(materialized, { instance }) {\r\n  const { allColumns, state } = instance\r\n\r\n  if (!state.pivotColumns.length || !state.groupBy || !state.groupBy.length) {\r\n    return materialized\r\n  }\r\n\r\n  const pivotColumns = state.pivotColumns\r\n    .map(id => allColumns.find(d => d.id === id))\r\n    .filter(Boolean)\r\n\r\n  const sourceColumns = allColumns.filter(\r\n    d =>\r\n      !d.isPivotSource &&\r\n      !state.groupBy.includes(d.id) &&\r\n      !state.pivotColumns.includes(d.id)\r\n  )\r\n\r\n  const buildPivotColumns = (depth = 0, parent, pivotFilters = []) => {\r\n    const pivotColumn = pivotColumns[depth]\r\n\r\n    if (!pivotColumn) {\r\n      return sourceColumns.map(sourceColumn => {\r\n        // TODO: We could offer support here for renesting pivoted\r\n        // columns inside copies of their header groups. For now,\r\n        // that seems like it would be (1) overkill on nesting, considering\r\n        // you already get nesting for every pivot level and (2)\r\n        // really hard. :)\r\n\r\n        return {\r\n          ...sourceColumn,\r\n          canPivot: false,\r\n          isPivoted: true,\r\n          parent,\r\n          depth: depth,\r\n          id: `${parent ? `${parent.id}.${sourceColumn.id}` : sourceColumn.id}`,\r\n          accessor: (originalRow, i, row) => {\r\n            if (pivotFilters.every(filter => filter(row))) {\r\n              return row.values[sourceColumn.id]\r\n            }\r\n          },\r\n        }\r\n      })\r\n    }\r\n\r\n    const uniqueValues = Array.from(pivotColumn.uniqueValues).sort()\r\n\r\n    return uniqueValues.map(uniqueValue => {\r\n      const columnGroup = {\r\n        ...pivotColumn,\r\n        Header:\r\n          pivotColumn.PivotHeader || typeof pivotColumn.header === 'string'\r\n            ? `${pivotColumn.Header}: ${uniqueValue}`\r\n            : uniqueValue,\r\n        isPivotGroup: true,\r\n        parent,\r\n        depth,\r\n        id: parent\r\n          ? `${parent.id}.${pivotColumn.id}.${uniqueValue}`\r\n          : `${pivotColumn.id}.${uniqueValue}`,\r\n        pivotValue: uniqueValue,\r\n      }\r\n\r\n      columnGroup.columns = buildPivotColumns(depth + 1, columnGroup, [\r\n        ...pivotFilters,\r\n        row => row.values[pivotColumn.id] === uniqueValue,\r\n      ])\r\n\r\n      return columnGroup\r\n    })\r\n  }\r\n\r\n  const newMaterialized = flattenColumns(buildPivotColumns())\r\n\r\n  return [...materialized, ...newMaterialized]\r\n}\r\n\r\nfunction materializedColumnsDeps(\r\n  deps,\r\n  {\r\n    instance: {\r\n      state: { pivotColumns, groupBy },\r\n    },\r\n  }\r\n) {\r\n  return [...deps, pivotColumns, groupBy]\r\n}\r\n\r\nfunction visibleColumns(visibleColumns, { instance: { state } }) {\r\n  visibleColumns = visibleColumns.filter(d => !d.isPivotSource)\r\n\r\n  if (state.pivotColumns.length && state.groupBy && state.groupBy.length) {\r\n    visibleColumns = visibleColumns.filter(\r\n      column => column.isGrouped || column.isPivoted\r\n    )\r\n  }\r\n\r\n  return visibleColumns\r\n}\r\n\r\nfunction visibleColumnsDeps(deps, { instance }) {\r\n  return [...deps, instance.state.pivotColumns, instance.state.groupBy]\r\n}\r\n\r\nfunction useInstance(instance) {\r\n  const {\r\n    columns,\r\n    allColumns,\r\n    flatHeaders,\r\n    // pivotFn = defaultPivotFn,\r\n    // manualPivot,\r\n    getHooks,\r\n    plugins,\r\n    dispatch,\r\n    autoResetPivot = true,\r\n    manaulPivot,\r\n    disablePivot,\r\n    defaultCanPivot,\r\n  } = instance\r\n\r\n  ensurePluginOrder(plugins, ['useGroupBy'], 'usePivotColumns')\r\n\r\n  const getInstance = useGetLatest(instance)\r\n\r\n  allColumns.forEach(column => {\r\n    const {\r\n      accessor,\r\n      defaultPivot: defaultColumnPivot,\r\n      disablePivot: columnDisablePivot,\r\n    } = column\r\n\r\n    column.canPivot = accessor\r\n      ? getFirstDefined(\r\n          column.canPivot,\r\n          columnDisablePivot === true ? false : undefined,\r\n          disablePivot === true ? false : undefined,\r\n          true\r\n        )\r\n      : getFirstDefined(\r\n          column.canPivot,\r\n          defaultColumnPivot,\r\n          defaultCanPivot,\r\n          false\r\n        )\r\n\r\n    if (column.canPivot) {\r\n      column.togglePivot = () => instance.togglePivot(column.id)\r\n    }\r\n\r\n    column.Aggregated = column.Aggregated || column.Cell\r\n  })\r\n\r\n  const togglePivot = (columnId, value) => {\r\n    dispatch({ type: actions.togglePivot, columnId, value })\r\n  }\r\n\r\n  flatHeaders.forEach(header => {\r\n    header.getPivotToggleProps = makePropGetter(\r\n      getHooks().getPivotToggleProps,\r\n      {\r\n        instance: getInstance(),\r\n        header,\r\n      }\r\n    )\r\n  })\r\n\r\n  const getAutoResetPivot = useGetLatest(autoResetPivot)\r\n\r\n  useMountedLayoutEffect(() => {\r\n    if (getAutoResetPivot()) {\r\n      dispatch({ type: actions.resetPivot })\r\n    }\r\n  }, [dispatch, manaulPivot ? null : columns])\r\n\r\n  Object.assign(instance, {\r\n    togglePivot,\r\n  })\r\n}\r\n\r\nfunction prepareRow(row) {\r\n  row.allCells.forEach(cell => {\r\n    // Grouped cells are in the pivotColumns and the pivot cell for the row\r\n    cell.isPivoted = cell.column.isPivoted\r\n  })\r\n}\r\n","import React from 'react'\r\n\r\nimport {\r\n  actions,\r\n  makePropGetter,\r\n  ensurePluginOrder,\r\n  useGetLatest,\r\n  useMountedLayoutEffect,\r\n} from '../publicUtils'\r\n\r\nconst pluginName = 'useRowSelect'\r\n\r\n// Actions\r\nactions.resetSelectedRows = 'resetSelectedRows'\r\nactions.toggleAllRowsSelected = 'toggleAllRowsSelected'\r\nactions.toggleRowSelected = 'toggleRowSelected'\r\n\r\nexport const useRowSelect = hooks => {\r\n  hooks.getToggleRowSelectedProps = [defaultGetToggleRowSelectedProps]\r\n  hooks.getToggleAllRowsSelectedProps = [defaultGetToggleAllRowsSelectedProps]\r\n  hooks.stateReducers.push(reducer)\r\n  hooks.useInstance.push(useInstance)\r\n  hooks.prepareRow.push(prepareRow)\r\n}\r\n\r\nuseRowSelect.pluginName = pluginName\r\n\r\nconst defaultGetToggleRowSelectedProps = (props, { instance, row }) => {\r\n  const { manualRowSelectedKey = 'isSelected' } = instance\r\n  let checked = false\r\n\r\n  if (row.original && row.original[manualRowSelectedKey]) {\r\n    checked = true\r\n  } else {\r\n    checked = row.isSelected\r\n  }\r\n\r\n  return [\r\n    props,\r\n    {\r\n      onChange: e => {\r\n        row.toggleRowSelected(e.target.checked)\r\n      },\r\n      style: {\r\n        cursor: 'pointer',\r\n      },\r\n      checked,\r\n      title: 'Toggle Row Selected',\r\n      indeterminate: row.isSomeSelected,\r\n    },\r\n  ]\r\n}\r\n\r\nconst defaultGetToggleAllRowsSelectedProps = (props, { instance }) => [\r\n  props,\r\n  {\r\n    onChange: e => {\r\n      instance.toggleAllRowsSelected(e.target.checked)\r\n    },\r\n    style: {\r\n      cursor: 'pointer',\r\n    },\r\n    checked: instance.isAllRowsSelected,\r\n    title: 'Toggle All Rows Selected',\r\n    indeterminate: Boolean(\r\n      !instance.isAllRowsSelected &&\r\n        Object.keys(instance.state.selectedRowIds).length\r\n    ),\r\n  },\r\n]\r\n\r\nfunction reducer(state, action, previousState, instance) {\r\n  if (action.type === actions.init) {\r\n    return {\r\n      selectedRowIds: {},\r\n      ...state,\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.resetSelectedRows) {\r\n    return {\r\n      ...state,\r\n      selectedRowIds: instance.initialState.selectedRowIds || {},\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.toggleAllRowsSelected) {\r\n    const { value: setSelected } = action\r\n    const {\r\n      isAllRowsSelected,\r\n      rowsById,\r\n      nonGroupedRowsById = rowsById,\r\n    } = instance\r\n\r\n    const selectAll =\r\n      typeof setSelected !== 'undefined' ? setSelected : !isAllRowsSelected\r\n\r\n    // Only remove/add the rows that are visible on the screen\r\n    //  Leave all the other rows that are selected alone.\r\n    const selectedRowIds = Object.assign({}, state.selectedRowIds)\r\n\r\n    if (selectAll) {\r\n      Object.keys(nonGroupedRowsById).forEach(rowId => {\r\n        selectedRowIds[rowId] = true\r\n      })\r\n    } else {\r\n      Object.keys(nonGroupedRowsById).forEach(rowId => {\r\n        delete selectedRowIds[rowId]\r\n      })\r\n    }\r\n\r\n    return {\r\n      ...state,\r\n      selectedRowIds,\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.toggleRowSelected) {\r\n    const { id, value: setSelected } = action\r\n    const { rowsById, selectSubRows = true } = instance\r\n\r\n    // Join the ids of deep rows\r\n    // to make a key, then manage all of the keys\r\n    // in a flat object\r\n    const row = rowsById[id]\r\n    const isSelected = row.isSelected\r\n    const shouldExist =\r\n      typeof setSelected !== 'undefined' ? setSelected : !isSelected\r\n\r\n    if (isSelected === shouldExist) {\r\n      return state\r\n    }\r\n\r\n    const newSelectedRowIds = { ...state.selectedRowIds }\r\n\r\n    const handleRowById = id => {\r\n      const row = rowsById[id]\r\n\r\n      if (!row.isGrouped) {\r\n        if (shouldExist) {\r\n          newSelectedRowIds[id] = true\r\n        } else {\r\n          delete newSelectedRowIds[id]\r\n        }\r\n      }\r\n\r\n      if (selectSubRows && row.subRows) {\r\n        return row.subRows.forEach(row => handleRowById(row.id))\r\n      }\r\n    }\r\n\r\n    handleRowById(id)\r\n\r\n    return {\r\n      ...state,\r\n      selectedRowIds: newSelectedRowIds,\r\n    }\r\n  }\r\n}\r\n\r\nfunction useInstance(instance) {\r\n  const {\r\n    data,\r\n    rows,\r\n    getHooks,\r\n    plugins,\r\n    rowsById,\r\n    nonGroupedRowsById = rowsById,\r\n    autoResetSelectedRows = true,\r\n    state: { selectedRowIds },\r\n    selectSubRows = true,\r\n    dispatch,\r\n  } = instance\r\n\r\n  ensurePluginOrder(\r\n    plugins,\r\n    ['useFilters', 'useGroupBy', 'useSortBy'],\r\n    'useRowSelect'\r\n  )\r\n\r\n  const selectedFlatRows = React.useMemo(() => {\r\n    const selectedFlatRows = []\r\n\r\n    rows.forEach(row => {\r\n      const isSelected = selectSubRows\r\n        ? getRowIsSelected(row, selectedRowIds)\r\n        : !!selectedRowIds[row.id]\r\n      row.isSelected = !!isSelected\r\n      row.isSomeSelected = isSelected === null\r\n\r\n      if (isSelected) {\r\n        selectedFlatRows.push(row)\r\n      }\r\n    })\r\n\r\n    return selectedFlatRows\r\n  }, [rows, selectSubRows, selectedRowIds])\r\n\r\n  let isAllRowsSelected = Boolean(\r\n    Object.keys(nonGroupedRowsById).length && Object.keys(selectedRowIds).length\r\n  )\r\n\r\n  if (isAllRowsSelected) {\r\n    if (Object.keys(nonGroupedRowsById).some(id => !selectedRowIds[id])) {\r\n      isAllRowsSelected = false\r\n    }\r\n  }\r\n\r\n  const getAutoResetSelectedRows = useGetLatest(autoResetSelectedRows)\r\n\r\n  useMountedLayoutEffect(() => {\r\n    if (getAutoResetSelectedRows()) {\r\n      dispatch({ type: actions.resetSelectedRows })\r\n    }\r\n  }, [dispatch, data])\r\n\r\n  const toggleAllRowsSelected = React.useCallback(\r\n    value => dispatch({ type: actions.toggleAllRowsSelected, value }),\r\n    [dispatch]\r\n  )\r\n\r\n  const toggleRowSelected = React.useCallback(\r\n    (id, value) => dispatch({ type: actions.toggleRowSelected, id, value }),\r\n    [dispatch]\r\n  )\r\n\r\n  const getInstance = useGetLatest(instance)\r\n\r\n  const getToggleAllRowsSelectedProps = makePropGetter(\r\n    getHooks().getToggleAllRowsSelectedProps,\r\n    { instance: getInstance() }\r\n  )\r\n\r\n  Object.assign(instance, {\r\n    selectedFlatRows,\r\n    isAllRowsSelected,\r\n    toggleRowSelected,\r\n    toggleAllRowsSelected,\r\n    getToggleAllRowsSelectedProps,\r\n  })\r\n}\r\n\r\nfunction prepareRow(row, { instance }) {\r\n  row.toggleRowSelected = set => instance.toggleRowSelected(row.id, set)\r\n\r\n  row.getToggleRowSelectedProps = makePropGetter(\r\n    instance.getHooks().getToggleRowSelectedProps,\r\n    { instance: instance, row }\r\n  )\r\n}\r\n\r\nfunction getRowIsSelected(row, selectedRowIds) {\r\n  if (selectedRowIds[row.id]) {\r\n    return true\r\n  }\r\n\r\n  if (row.subRows && row.subRows.length) {\r\n    let allChildrenSelected = true\r\n    let someSelected = false\r\n\r\n    row.subRows.forEach(subRow => {\r\n      // Bail out early if we know both of these\r\n      if (someSelected && !allChildrenSelected) {\r\n        return\r\n      }\r\n\r\n      if (getRowIsSelected(subRow, selectedRowIds)) {\r\n        someSelected = true\r\n      } else {\r\n        allChildrenSelected = false\r\n      }\r\n    })\r\n    return allChildrenSelected ? true : someSelected ? null : false\r\n  }\r\n\r\n  return false\r\n}\r\n","import React from 'react'\r\n\r\nimport {\r\n  actions,\r\n  functionalUpdate,\r\n  useMountedLayoutEffect,\r\n  useGetLatest,\r\n} from '../publicUtils'\r\n\r\nconst defaultInitialRowStateAccessor = originalRow => ({})\r\nconst defaultInitialCellStateAccessor = originalRow => ({})\r\n\r\n// Actions\r\nactions.setRowState = 'setRowState'\r\nactions.setCellState = 'setCellState'\r\nactions.resetRowState = 'resetRowState'\r\n\r\nexport const useRowState = hooks => {\r\n  hooks.stateReducers.push(reducer)\r\n  hooks.useInstance.push(useInstance)\r\n  hooks.prepareRow.push(prepareRow)\r\n}\r\n\r\nuseRowState.pluginName = 'useRowState'\r\n\r\nfunction reducer(state, action, previousState, instance) {\r\n  const {\r\n    initialRowStateAccessor = defaultInitialRowStateAccessor,\r\n    initialCellStateAccessor = defaultInitialCellStateAccessor,\r\n    rowsById,\r\n  } = instance\r\n\r\n  if (action.type === actions.init) {\r\n    return {\r\n      rowState: {},\r\n      ...state,\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.resetRowState) {\r\n    return {\r\n      ...state,\r\n      rowState: instance.initialState.rowState || {},\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.setRowState) {\r\n    const { rowId, value } = action\r\n\r\n    const oldRowState =\r\n      typeof state.rowState[rowId] !== 'undefined'\r\n        ? state.rowState[rowId]\r\n        : initialRowStateAccessor(rowsById[rowId].original)\r\n\r\n    return {\r\n      ...state,\r\n      rowState: {\r\n        ...state.rowState,\r\n        [rowId]: functionalUpdate(value, oldRowState),\r\n      },\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.setCellState) {\r\n    const { rowId, columnId, value } = action\r\n\r\n    const oldRowState =\r\n      typeof state.rowState[rowId] !== 'undefined'\r\n        ? state.rowState[rowId]\r\n        : initialRowStateAccessor(rowsById[rowId].original)\r\n\r\n    const oldCellState =\r\n      typeof oldRowState?.cellState?.[columnId] !== 'undefined'\r\n        ? oldRowState.cellState[columnId]\r\n        : initialCellStateAccessor(rowsById[rowId].original)\r\n\r\n    return {\r\n      ...state,\r\n      rowState: {\r\n        ...state.rowState,\r\n        [rowId]: {\r\n          ...oldRowState,\r\n          cellState: {\r\n            ...(oldRowState.cellState || {}),\r\n            [columnId]: functionalUpdate(value, oldCellState),\r\n          },\r\n        },\r\n      },\r\n    }\r\n  }\r\n}\r\n\r\nfunction useInstance(instance) {\r\n  const { autoResetRowState = true, data, dispatch } = instance\r\n\r\n  const setRowState = React.useCallback(\r\n    (rowId, value) =>\r\n      dispatch({\r\n        type: actions.setRowState,\r\n        rowId,\r\n        value,\r\n      }),\r\n    [dispatch]\r\n  )\r\n\r\n  const setCellState = React.useCallback(\r\n    (rowId, columnId, value) =>\r\n      dispatch({\r\n        type: actions.setCellState,\r\n        rowId,\r\n        columnId,\r\n        value,\r\n      }),\r\n    [dispatch]\r\n  )\r\n\r\n  const getAutoResetRowState = useGetLatest(autoResetRowState)\r\n\r\n  useMountedLayoutEffect(() => {\r\n    if (getAutoResetRowState()) {\r\n      dispatch({ type: actions.resetRowState })\r\n    }\r\n  }, [data])\r\n\r\n  Object.assign(instance, {\r\n    setRowState,\r\n    setCellState,\r\n  })\r\n}\r\n\r\nfunction prepareRow(row, { instance }) {\r\n  const {\r\n    initialRowStateAccessor = defaultInitialRowStateAccessor,\r\n    initialCellStateAccessor = defaultInitialCellStateAccessor,\r\n    state: { rowState },\r\n  } = instance\r\n\r\n  if (row.original) {\r\n    row.state =\r\n      typeof rowState[row.id] !== 'undefined'\r\n        ? rowState[row.id]\r\n        : initialRowStateAccessor(row.original)\r\n\r\n    row.setState = updater => {\r\n      return instance.setRowState(row.id, updater)\r\n    }\r\n\r\n    row.cells.forEach(cell => {\r\n      if (!row.state.cellState) {\r\n        row.state.cellState = {}\r\n      }\r\n\r\n      cell.state =\r\n        typeof row.state.cellState[cell.column.id] !== 'undefined'\r\n          ? row.state.cellState[cell.column.id]\r\n          : initialCellStateAccessor(row.original)\r\n\r\n      cell.setState = updater => {\r\n        return instance.setCellState(row.id, cell.column.id, updater)\r\n      }\r\n    })\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nimport { functionalUpdate, actions } from '../publicUtils'\r\n\r\n// Actions\r\nactions.resetColumnOrder = 'resetColumnOrder'\r\nactions.setColumnOrder = 'setColumnOrder'\r\n\r\nexport const useColumnOrder = hooks => {\r\n  hooks.stateReducers.push(reducer)\r\n  hooks.visibleColumnsDeps.push((deps, { instance }) => {\r\n    return [...deps, instance.state.columnOrder]\r\n  })\r\n  hooks.visibleColumns.push(visibleColumns)\r\n  hooks.useInstance.push(useInstance)\r\n}\r\n\r\nuseColumnOrder.pluginName = 'useColumnOrder'\r\n\r\nfunction reducer(state, action, previousState, instance) {\r\n  if (action.type === actions.init) {\r\n    return {\r\n      columnOrder: [],\r\n      ...state,\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.resetColumnOrder) {\r\n    return {\r\n      ...state,\r\n      columnOrder: instance.initialState.columnOrder || [],\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.setColumnOrder) {\r\n    return {\r\n      ...state,\r\n      columnOrder: functionalUpdate(action.columnOrder, state.columnOrder),\r\n    }\r\n  }\r\n}\r\n\r\nfunction visibleColumns(\r\n  columns,\r\n  {\r\n    instance: {\r\n      state: { columnOrder },\r\n    },\r\n  }\r\n) {\r\n  // If there is no order, return the normal columns\r\n  if (!columnOrder || !columnOrder.length) {\r\n    return columns\r\n  }\r\n\r\n  const columnOrderCopy = [...columnOrder]\r\n\r\n  // If there is an order, make a copy of the columns\r\n  const columnsCopy = [...columns]\r\n\r\n  // And make a new ordered array of the columns\r\n  const columnsInOrder = []\r\n\r\n  // Loop over the columns and place them in order into the new array\r\n  while (columnsCopy.length && columnOrderCopy.length) {\r\n    const targetColumnId = columnOrderCopy.shift()\r\n    const foundIndex = columnsCopy.findIndex(d => d.id === targetColumnId)\r\n    if (foundIndex > -1) {\r\n      columnsInOrder.push(columnsCopy.splice(foundIndex, 1)[0])\r\n    }\r\n  }\r\n\r\n  // If there are any columns left, add them to the end\r\n  return [...columnsInOrder, ...columnsCopy]\r\n}\r\n\r\nfunction useInstance(instance) {\r\n  const { dispatch } = instance\r\n\r\n  instance.setColumnOrder = React.useCallback(\r\n    columnOrder => {\r\n      return dispatch({ type: actions.setColumnOrder, columnOrder })\r\n    },\r\n    [dispatch]\r\n  )\r\n}\r\n","import {\r\n  actions,\r\n  defaultColumn,\r\n  makePropGetter,\r\n  useGetLatest,\r\n  ensurePluginOrder,\r\n} from '../publicUtils'\r\n\r\nimport { getFirstDefined } from '../utils'\r\n\r\n// Default Column\r\ndefaultColumn.canResize = true\r\n\r\n// Actions\r\nactions.columnStartResizing = 'columnStartResizing'\r\nactions.columnResizing = 'columnResizing'\r\nactions.columnDoneResizing = 'columnDoneResizing'\r\n\r\nexport const useResizeColumns = hooks => {\r\n  hooks.getResizerProps = [defaultGetResizerProps]\r\n  hooks.getHeaderProps.push({\r\n    style: {\r\n      position: 'relative',\r\n    },\r\n  })\r\n  hooks.stateReducers.push(reducer)\r\n  hooks.useInstance.push(useInstance)\r\n  hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions)\r\n}\r\n\r\nconst defaultGetResizerProps = (props, { instance, header }) => {\r\n  const { dispatch } = instance\r\n\r\n  const onResizeStart = (e, header) => {\r\n    let isTouchEvent = false\r\n    if (e.type === 'touchstart') {\r\n      // lets not respond to multiple touches (e.g. 2 or 3 fingers)\r\n      if (e.touches && e.touches.length > 1) {\r\n        return\r\n      }\r\n      isTouchEvent = true\r\n    }\r\n    const headersToResize = getLeafHeaders(header)\r\n    const headerIdWidths = headersToResize.map(d => [d.id, d.totalWidth])\r\n\r\n    const clientX = isTouchEvent ? Math.round(e.touches[0].clientX) : e.clientX\r\n\r\n    const dispatchMove = clientXPos => {\r\n      dispatch({ type: actions.columnResizing, clientX: clientXPos })\r\n    }\r\n    const dispatchEnd = () => dispatch({ type: actions.columnDoneResizing })\r\n\r\n    const handlersAndEvents = {\r\n      mouse: {\r\n        moveEvent: 'mousemove',\r\n        moveHandler: e => dispatchMove(e.clientX),\r\n        upEvent: 'mouseup',\r\n        upHandler: e => {\r\n          document.removeEventListener(\r\n            'mousemove',\r\n            handlersAndEvents.mouse.moveHandler\r\n          )\r\n          document.removeEventListener(\r\n            'mouseup',\r\n            handlersAndEvents.mouse.upHandler\r\n          )\r\n          dispatchEnd()\r\n        },\r\n      },\r\n      touch: {\r\n        moveEvent: 'touchmove',\r\n        moveHandler: e => {\r\n          if (e.cancelable) {\r\n            e.preventDefault()\r\n            e.stopPropagation()\r\n          }\r\n          dispatchMove(e.touches[0].clientX)\r\n          return false\r\n        },\r\n        upEvent: 'touchend',\r\n        upHandler: e => {\r\n          document.removeEventListener(\r\n            handlersAndEvents.touch.moveEvent,\r\n            handlersAndEvents.touch.moveHandler\r\n          )\r\n          document.removeEventListener(\r\n            handlersAndEvents.touch.upEvent,\r\n            handlersAndEvents.touch.moveHandler\r\n          )\r\n          dispatchEnd()\r\n        },\r\n      },\r\n    }\r\n\r\n    const events = isTouchEvent\r\n      ? handlersAndEvents.touch\r\n      : handlersAndEvents.mouse\r\n    document.addEventListener(events.moveEvent, events.moveHandler, {\r\n      passive: false,\r\n    })\r\n    document.addEventListener(events.upEvent, events.upHandler, {\r\n      passive: false,\r\n    })\r\n\r\n    dispatch({\r\n      type: actions.columnStartResizing,\r\n      columnId: header.id,\r\n      columnWidth: header.totalWidth,\r\n      headerIdWidths,\r\n      clientX,\r\n    })\r\n  }\r\n\r\n  return [\r\n    props,\r\n    {\r\n      onMouseDown: e => e.persist() || onResizeStart(e, header),\r\n      onTouchStart: e => e.persist() || onResizeStart(e, header),\r\n      style: {\r\n        cursor: 'ew-resize',\r\n      },\r\n      draggable: false,\r\n      role: 'separator',\r\n    },\r\n  ]\r\n}\r\n\r\nuseResizeColumns.pluginName = 'useResizeColumns'\r\n\r\nfunction reducer(state, action) {\r\n  if (action.type === actions.init) {\r\n    return {\r\n      columnResizing: {\r\n        columnWidths: {},\r\n      },\r\n      ...state,\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.columnStartResizing) {\r\n    const { clientX, columnId, columnWidth, headerIdWidths } = action\r\n\r\n    return {\r\n      ...state,\r\n      columnResizing: {\r\n        ...state.columnResizing,\r\n        startX: clientX,\r\n        headerIdWidths,\r\n        columnWidth,\r\n        isResizingColumn: columnId,\r\n      },\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.columnResizing) {\r\n    const { clientX } = action\r\n    const { startX, columnWidth, headerIdWidths } = state.columnResizing\r\n\r\n    const deltaX = clientX - startX\r\n    const percentageDeltaX = deltaX / columnWidth\r\n\r\n    const newColumnWidths = {}\r\n\r\n    headerIdWidths.forEach(([headerId, headerWidth]) => {\r\n      newColumnWidths[headerId] = Math.max(\r\n        headerWidth + headerWidth * percentageDeltaX,\r\n        0\r\n      )\r\n    })\r\n\r\n    return {\r\n      ...state,\r\n      columnResizing: {\r\n        ...state.columnResizing,\r\n        columnWidths: {\r\n          ...state.columnResizing.columnWidths,\r\n          ...newColumnWidths,\r\n        },\r\n      },\r\n    }\r\n  }\r\n\r\n  if (action.type === actions.columnDoneResizing) {\r\n    return {\r\n      ...state,\r\n      columnResizing: {\r\n        ...state.columnResizing,\r\n        startX: null,\r\n        isResizingColumn: null,\r\n      },\r\n    }\r\n  }\r\n}\r\n\r\nconst useInstanceBeforeDimensions = instance => {\r\n  const {\r\n    flatHeaders,\r\n    disableResizing,\r\n    getHooks,\r\n    state: { columnResizing },\r\n  } = instance\r\n\r\n  const getInstance = useGetLatest(instance)\r\n\r\n  flatHeaders.forEach(header => {\r\n    const canResize = getFirstDefined(\r\n      header.disableResizing === true ? false : undefined,\r\n      disableResizing === true ? false : undefined,\r\n      true\r\n    )\r\n\r\n    header.canResize = canResize\r\n    header.width = columnResizing.columnWidths[header.id] || header.width\r\n    header.isResizing = columnResizing.isResizingColumn === header.id\r\n\r\n    if (canResize) {\r\n      header.getResizerProps = makePropGetter(getHooks().getResizerProps, {\r\n        instance: getInstance(),\r\n        header,\r\n      })\r\n    }\r\n  })\r\n}\r\n\r\nfunction useInstance({ plugins }) {\r\n  ensurePluginOrder(plugins, ['useAbsoluteLayout'], 'useResizeColumns')\r\n}\r\n\r\nfunction getLeafHeaders(header) {\r\n  const leafHeaders = []\r\n  const recurseHeader = header => {\r\n    if (header.columns && header.columns.length) {\r\n      header.columns.map(recurseHeader)\r\n    }\r\n    leafHeaders.push(header)\r\n  }\r\n  recurseHeader(header)\r\n  return leafHeaders\r\n}\r\n","const cellStyles = {\r\n  position: 'absolute',\r\n  top: 0,\r\n}\r\n\r\nexport const useAbsoluteLayout = hooks => {\r\n  hooks.getTableBodyProps.push(getRowStyles)\r\n  hooks.getRowProps.push(getRowStyles)\r\n  hooks.getHeaderGroupProps.push(getRowStyles)\r\n\r\n  hooks.getHeaderProps.push((props, { column }) => [\r\n    props,\r\n    {\r\n      style: {\r\n        ...cellStyles,\r\n        left: `${column.totalLeft}px`,\r\n        width: `${column.totalWidth}px`,\r\n      },\r\n    },\r\n  ])\r\n\r\n  hooks.getCellProps.push((props, { cell }) => [\r\n    props,\r\n    {\r\n      style: {\r\n        ...cellStyles,\r\n        left: `${cell.column.totalLeft}px`,\r\n        width: `${cell.column.totalWidth}px`,\r\n      },\r\n    },\r\n  ])\r\n}\r\n\r\nuseAbsoluteLayout.pluginName = 'useAbsoluteLayout'\r\n\r\nconst getRowStyles = (props, { instance }) => [\r\n  props,\r\n  {\r\n    style: {\r\n      position: 'relative',\r\n      width: `${instance.totalColumnsWidth}px`,\r\n    },\r\n  },\r\n]\r\n","const cellStyles = {\r\n  display: 'inline-block',\r\n  boxSizing: 'border-box',\r\n}\r\n\r\nconst getRowStyles = (props, { instance }) => [\r\n  props,\r\n  {\r\n    style: {\r\n      display: 'flex',\r\n      width: `${instance.totalColumnsWidth}px`,\r\n    },\r\n  },\r\n]\r\n\r\nexport const useBlockLayout = hooks => {\r\n  hooks.getRowProps.push(getRowStyles)\r\n  hooks.getHeaderGroupProps.push(getRowStyles)\r\n\r\n  hooks.getHeaderProps.push((props, { column }) => [\r\n    props,\r\n    {\r\n      style: {\r\n        ...cellStyles,\r\n        width: `${column.totalWidth}px`,\r\n      },\r\n    },\r\n  ])\r\n\r\n  hooks.getCellProps.push((props, { cell }) => [\r\n    props,\r\n    {\r\n      style: {\r\n        ...cellStyles,\r\n        width: `${cell.column.totalWidth}px`,\r\n      },\r\n    },\r\n  ])\r\n}\r\n\r\nuseBlockLayout.pluginName = 'useBlockLayout'\r\n","export function useFlexLayout(hooks) {\r\n  hooks.getTableProps.push(getTableProps)\r\n  hooks.getRowProps.push(getRowStyles)\r\n  hooks.getHeaderGroupProps.push(getRowStyles)\r\n  hooks.getHeaderProps.push(getHeaderProps)\r\n  hooks.getCellProps.push(getCellProps)\r\n}\r\n\r\nuseFlexLayout.pluginName = 'useFlexLayout'\r\n\r\nconst getTableProps = (props, { instance }) => [\r\n  props,\r\n  {\r\n    style: {\r\n      minWidth: `${instance.totalColumnsWidth}px`,\r\n    },\r\n  },\r\n]\r\n\r\nconst getRowStyles = (props, { instance }) => [\r\n  props,\r\n  {\r\n    style: {\r\n      display: 'flex',\r\n      flex: '1 0 auto',\r\n      minWidth: `${instance.totalColumnsMinWidth}px`,\r\n    },\r\n  },\r\n]\r\n\r\nconst getHeaderProps = (props, { column }) => [\r\n  props,\r\n  {\r\n    style: {\r\n      boxSizing: 'border-box',\r\n      flex: column.totalFlexWidth\r\n        ? `${column.totalFlexWidth} 0 auto`\r\n        : undefined,\r\n      minWidth: `${column.totalMinWidth}px`,\r\n      width: `${column.totalWidth}px`,\r\n    },\r\n  },\r\n]\r\n\r\nconst getCellProps = (props, { cell }) => [\r\n  props,\r\n  {\r\n    style: {\r\n      boxSizing: 'border-box',\r\n      flex: `${cell.column.totalFlexWidth} 0 auto`,\r\n      minWidth: `${cell.column.totalMinWidth}px`,\r\n      width: `${cell.column.totalWidth}px`,\r\n    },\r\n  },\r\n]\r\n"],"names":["actions","init","defaultColumn","Cell","value","width","minWidth","maxWidth","Number","MAX_SAFE_INTEGER","mergeProps","propList","reduce","props","next","style","className","makePropGetter","hooks","meta","userProps","prev","handlePropGetter","prevProps","Array","isArray","reduceHooks","initial","allowUndefined","nextValue","process","env","NODE_ENV","console","info","Error","loopHooks","context","forEach","hook","ensurePluginOrder","plugins","befores","pluginName","afters","pluginIndex","findIndex","plugin","before","beforeIndex","functionalUpdate","updater","old","useGetLatest","obj","ref","React","useRef","current","useCallback","safeUseLayoutEffect","document","useLayoutEffect","useEffect","useMountedLayoutEffect","fn","deps","mountedRef","makeRenderer","instance","column","type","Comp","flexRender","component","proto","Object","getPrototypeOf","prototype","isReactComponent","isClassComponent","$$typeof","includes","description","isExoticComponent","linkColumnStructure","columns","parent","depth","map","assignColumnAccessor","flattenColumns","flattenBy","id","accessor","Header","accessorPath","split","row","path","def","val","cacheKey","JSON","stringify","pathObj","pathObjCache","get","flattenDeep","arr","newArr","i","length","push","d","String","replace","join","reOpenBracket","reCloseBracket","makePathArray","set","cursor","pathPart","e","getBy","error","assign","decorateColumn","userDefaultColumn","Footer","makeHeaderGroups","allColumns","headerGroups","scanColumns","uid","getUID","headerGroup","headers","parentColumns","hasParents","some","newParent","latestParentColumn","reverse","originalId","placeholderOf","Map","getFirstDefined","args","isFunction","a","key","flat","recurse","expandRows","rows","manualExpandedKey","expanded","expandSubRows","expandedRows","handleRow","isExpanded","original","canExpand","subRows","getFilterMethod","filter","userFilterTypes","filterTypes","text","shouldAutoRemoveFilter","autoRemove","unpreparedAccessWarning","defaultGetTableProps","role","defaultGetTableBodyProps","defaultGetHeaderProps","colSpan","totalVisibleHeaderCount","defaultGetFooterProps","defaultGetHeaderGroupProps","index","defaultGetFooterGroupProps","defaultGetRowProps","defaultGetCellProps","cell","makeDefaultPluginHooks","useOptions","stateReducers","useControlledState","columnsDeps","allColumnsDeps","accessValue","materializedColumns","materializedColumnsDeps","useInstanceAfterData","visibleColumns","visibleColumnsDeps","headerGroupsDeps","useInstanceBeforeDimensions","useInstance","prepareRow","getTableProps","getTableBodyProps","getHeaderGroupProps","getFooterGroupProps","getHeaderProps","getFooterProps","getRowProps","getCellProps","useFinalInstance","resetHiddenColumns","toggleHideColumn","setHiddenColumns","toggleHideAllColumns","useColumnVisibility","getToggleHiddenProps","defaultGetToggleHiddenProps","getToggleHideAllColumnsProps","defaultGetToggleHideAllColumnsProps","reducer","state","hiddenColumns","onChange","toggleHidden","target","checked","isVisible","title","allColumnsHidden","indeterminate","action","previousState","initialState","log","should","columnId","result","subHeader","handleColumn","parentVisible","subColumn","flatHeaders","dispatch","getHooks","autoResetHiddenColumns","getInstance","getAutoResetHiddenColumns","defaultInitialState","defaultColumnInstance","defaultReducer","prevState","defaultGetSubRows","defaultGetRowId","defaultUseControlledState","applyDefaults","getSubRows","getRowId","stateReducer","calculateHeaderWidths","left","sumTotalMinWidth","sumTotalWidth","sumTotalMaxWidth","sumTotalFlexWidth","header","subHeaders","totalLeft","totalMinWidth","totalWidth","totalMaxWidth","totalFlexWidth","Math","min","max","canResize","accessRowsForColumn","data","flatRows","rowsById","accessValueHooks","originalRow","rowIndex","accessRow","parentRows","originalSubRows","cells","values","undefined","resetExpanded","toggleRowExpanded","toggleAllRowsExpanded","useExpanded","getToggleAllRowsExpandedProps","defaultGetToggleAllRowsExpandedProps","getToggleRowExpandedProps","defaultGetToggleRowExpandedProps","onClick","isAllRowsExpanded","keys","rowId","setExpanded","exists","shouldExist","paginateExpandedRows","autoResetExpanded","getAutoResetExpanded","Boolean","useMemo","expandedDepth","maxDepth","splitId","findExpandedDepth","preExpandedRows","ids","filterValue","rowValue","toLowerCase","exactText","exactTextCase","includesAll","every","exact","equals","between","Infinity","temp","resetFilters","setFilter","setAllFilters","useFilters","filters","find","filterMethod","previousfilter","newFilter","manualFilters","defaultCanFilter","disableFilters","autoResetFilters","columnDefaultCanFilter","columnDisableFilters","canFilter","found","filteredFlatRows","filteredRowsById","filterRows","filteredRows","filteredSoFar","preFilteredRows","warn","getAutoResetFilters","preFilteredFlatRows","preFilteredRowsById","resetGlobalFilter","setGlobalFilter","useGlobalFilter","globalFilter","manualGlobalFilter","globalFilterValue","autoResetGlobalFilter","disableGlobalFilter","columnDisableGlobalFilter","filterableColumns","c","globalFilteredRows","globalFilteredFlatRows","globalFilteredRowsById","getAutoResetGlobalFilter","preGlobalFilteredRows","preGlobalFilteredFlatRows","preGlobalFilteredRowsById","sum","aggregatedValues","Set","size","emptyArray","emptyObject","resetGroupBy","toggleGroupBy","useGroupBy","getGroupByToggleProps","defaultGetGroupByToggleProps","groupBy","canGroupBy","persist","setGroupBy","resolvedGroupBy","groupByColumns","g","col","nonGroupByColumns","isGrouped","groupedIndex","indexOf","defaultUserAggregations","groupByFn","defaultGroupByFn","manualGroupBy","aggregations","userAggregations","autoResetGroupBy","disableGroupBy","defaultCanGroupBy","defaultColumnGroupBy","defaultGroupBy","columnDisableGroupBy","Aggregated","existingGroupBy","groupedFlatRows","groupedRowsById","onlyGroupedFlatRows","onlyGroupedRowsById","nonGroupedFlatRows","nonGroupedRowsById","groupedRows","groupUpRecursively","parentId","currentColumn","rowGroupsMap","entries","groupByVal","leafRows","groupedValues","leafValues","columnValue","aggregatedValue","aggregateValueFn","aggregateValue","aggregateFn","aggregate","aggregateRowsToValues","groupByID","subRow","getAutoResetGroupBy","preGroupedRows","preGroupedFlatRow","preGroupedRowsById","allCells","isPlaceholder","isAggregated","resKey","reSplitAlphaNumeric","compareBasic","b","getRowValueByColumnID","toString","isNaN","rowA","rowB","aa","shift","bb","an","parseInt","bn","combo","sort","getTime","resetSortBy","toggleSortBy","clearSortBy","sortType","sortDescFirst","useSortBy","getSortByToggleProps","defaultGetSortByToggleProps","isMultiSortEvent","shiftKey","canSort","disableMultiSort","sortBy","sortAction","desc","multi","disableSortRemove","disableMultiRemove","maxMultiSortColCount","existingSortBy","existingIndex","hasDescDefined","newSortBy","splice","orderByFn","defaultOrderByFn","userSortTypes","sortTypes","manualSortBy","defaultCanSort","disableSortBy","autoResetSortBy","defaultColumnCanSort","columnDisableSortBy","columnSort","isSorted","sortedIndex","isSortedDesc","sortedFlatRows","availableSortBy","sortData","sortedData","sortMethod","sortInverted","sortedRows","getAutoResetSortBy","preSortedRows","preSortedFlatRows","funcs","dirs","sortFn","sortInt","resetPage","gotoPage","setPageSize","usePagination","pageSize","pageIndex","pageCount","page","newPageIndex","cannnotPreviousPage","cannotNextPage","topRowIndex","floor","autoResetPage","userPageCount","manualPagination","getAutoResetPage","ceil","pageOptions","fill","pageStart","pageEnd","slice","canPreviousPage","canNextPage","previousPage","nextPage","resetPivot","togglePivot","_UNSTABLE_usePivotColumns","getPivotToggleProps","defaultGetPivotToggleProps","defaultPivotColumns","canPivot","pivotColumns","setPivot","resolvedPivot","isPivotSource","uniqueValues","add","materialized","sourceColumns","newMaterialized","buildPivotColumns","pivotFilters","pivotColumn","from","uniqueValue","columnGroup","PivotHeader","isPivotGroup","pivotValue","sourceColumn","isPivoted","autoResetPivot","manaulPivot","disablePivot","defaultCanPivot","defaultColumnPivot","defaultPivot","columnDisablePivot","getAutoResetPivot","resetSelectedRows","toggleAllRowsSelected","toggleRowSelected","useRowSelect","getToggleRowSelectedProps","defaultGetToggleRowSelectedProps","getToggleAllRowsSelectedProps","defaultGetToggleAllRowsSelectedProps","manualRowSelectedKey","isSelected","isSomeSelected","isAllRowsSelected","selectedRowIds","setSelected","selectAll","selectSubRows","newSelectedRowIds","handleRowById","autoResetSelectedRows","selectedFlatRows","getRowIsSelected","allChildrenSelected","someSelected","getAutoResetSelectedRows","defaultInitialRowStateAccessor","defaultInitialCellStateAccessor","setRowState","setCellState","resetRowState","useRowState","initialRowStateAccessor","initialCellStateAccessor","rowState","oldRowState","oldCellState","cellState","_oldRowState$cellStat","autoResetRowState","getAutoResetRowState","setState","resetColumnOrder","setColumnOrder","useColumnOrder","columnOrder","columnOrderCopy","columnsCopy","columnsInOrder","targetColumnId","foundIndex","columnStartResizing","columnResizing","columnDoneResizing","useResizeColumns","getResizerProps","defaultGetResizerProps","position","onResizeStart","isTouchEvent","touches","headerIdWidths","leafHeaders","recurseHeader","getLeafHeaders","clientX","round","dispatchMove","clientXPos","dispatchEnd","handlersAndEvents","mouse","moveEvent","moveHandler","upEvent","upHandler","removeEventListener","touch","cancelable","preventDefault","stopPropagation","events","addEventListener","passive","columnWidth","onMouseDown","onTouchStart","draggable","columnWidths","startX","isResizingColumn","percentageDeltaX","newColumnWidths","headerId","headerWidth","disableResizing","isResizing","cellStyles","top","useAbsoluteLayout","getRowStyles","totalColumnsWidth","display","boxSizing","useBlockLayout","useFlexLayout","flex","totalColumnsMinWidth","defaultFn","defaultWait","debounceRef","getDefaultFn","getDefaultWait","promise","Promise","resolve","reject","timeout","clearTimeout","setTimeout","instanceRef","userColumns","getStateReducer","s","handler","useReducer","reducerState","allColumnsQueue","duplicateColumns","all","visibleColumnsDep","totalColumnsMaxWidth","render","footerGroups"],"mappings":"6wCAEA,IAEaA,EAAU,CACrBC,KAAM,QAGKC,EAAgB,CAC3BC,KAAM,oBAAGC,wBAAQ,MACjBC,MAAO,IACPC,SAAU,EACVC,SAAUC,OAAOC,kBAGnB,SAASC,+BAAcC,2BAAAA,yBACdA,EAASC,QAAO,SAACC,EAAOC,OACrBC,EAA8BD,EAA9BC,MAAOC,EAAuBF,EAAvBE,iBAEfH,OACKA,OAHiCC,0BAOlCC,IACFF,EAAME,MAAQF,EAAME,WACVF,EAAME,OAAS,MAASA,GAAS,IACvCA,GAGFC,IACFH,EAAMG,UAAYH,EAAMG,UACpBH,EAAMG,UAAY,IAAMA,EACxBA,GAGkB,KAApBH,EAAMG,kBACDH,EAAMG,UAGRH,IACN,QAkBQI,EAAiB,SAACC,EAAOC,mBAAAA,IAAAA,EAAO,IACpC,SAACC,mBAAAA,IAAAA,EAAY,IAClB,UAAIF,GAAOE,IAAWR,QACpB,SAACS,EAAMP,UAlBb,SAASQ,EAAiBC,EAAWH,EAAWD,SAErB,mBAAdC,EACFE,EAAiB,GAAIF,EAAUG,EAAWJ,IAI/CK,MAAMC,QAAQL,GACTV,gBAAWa,UAAcH,IAI3BV,EAAWa,EAAWH,GAOvBE,CAAiBD,EAAMP,OAClBK,GACHC,UAAAA,OAEJ,MAIOM,EAAc,SAACR,EAAOS,EAASR,EAAWS,mBAAXT,IAAAA,EAAO,IACjDD,EAAMN,QAAO,SAACS,EAAMP,OACZe,EAAYf,EAAKO,EAAMF,MACA,eAAzBW,QAAQC,IAAIC,WACTJ,QAAuC,IAAdC,QAC5BI,QAAQC,KAAKpB,GACP,IAAIqB,MACR,uFAICN,IACNF,IAEQS,EAAY,SAAClB,EAAOmB,EAASlB,mBAAAA,IAAAA,EAAO,IAC/CD,EAAMoB,SAAQ,SAAAC,OACNV,EAAYU,EAAKF,EAASlB,MACH,eAAzBW,QAAQC,IAAIC,eACW,IAAdH,QACTI,QAAQC,KAAKK,EAAMV,GACb,IAAIM,MACR,oFAMH,SAASK,EAAkBC,EAASC,EAASC,EAAYC,MACjC,eAAzBd,QAAQC,IAAIC,UAA6BY,QACrC,IAAIT,yGAC2FQ,WAGjGE,EAAcJ,EAAQK,WAC1B,SAAAC,UAAUA,EAAOJ,aAAeA,SAGb,IAAjBE,GAC2B,eAAzBf,QAAQC,IAAIC,eACR,IAAIG,qBAAqBQ,4KAGjCA,oBAA4BA,SAK9BD,EAAQJ,SAAQ,SAAAU,OACRC,EAAcR,EAAQK,WAC1B,SAAAC,UAAUA,EAAOJ,aAAeK,QAE9BC,GAAe,GAAKA,EAAcJ,GACP,eAAzBf,QAAQC,IAAIC,eACR,IAAIG,0BACYQ,2CAAmDK,sBAO1E,SAASE,EAAiBC,EAASC,SACd,mBAAZD,EAAyBA,EAAQC,GAAOD,EAGjD,SAASE,EAAaC,OACrBC,EAAMC,EAAMC,gBAClBF,EAAIG,QAAUJ,EAEPE,EAAMG,aAAY,kBAAMJ,EAAIG,UAAS,QAIjCE,EACS,oBAAbC,SAA2BL,EAAMM,gBAAkBN,EAAMO,UAE3D,SAASC,EAAuBC,EAAIC,OACnCC,EAAaX,EAAMC,QAAO,GAEhCG,GAAoB,WACdO,EAAWT,SACbO,IAEFE,EAAWT,SAAU,IAEpBQ,GAuCE,SAASE,EAAaC,EAAUC,EAAQnD,mBAAAA,IAAAA,EAAO,IAC7C,SAACoD,EAAMnD,YAAAA,IAAAA,EAAY,QAClBoD,EAAuB,iBAATD,EAAoBD,EAAOC,GAAQA,UAEnC,IAATC,QACTvC,QAAQC,KAAKoC,GACP,IAAInC,MAvMA,4BA0MLsC,EAAWD,OAAWH,GAAUC,OAAAA,GAAWnD,KAASC,KAIxD,SAASqD,EAAWD,EAAM3D,UAYjC,SAA0B6D,SAED,mBAAdA,KAECC,EAAQC,OAAOC,eAAeH,IACvBI,WAAaH,EAAMG,UAAUC,kBAF3C,IACOJ,EAVRK,CAFsBN,EAHAF,IAMD,mBAAdE,GAeX,SAA2BA,SAEF,iBAAdA,GACuB,iBAAvBA,EAAUO,UACjB,CAAC,aAAc,qBAAqBC,SAASR,EAAUO,SAASE,aAlBhEC,CAAkBV,GAPYlB,gBAACgB,EAAS3D,GAAY2D,EAGxD,IAA0BE,ECtMnB,SAASW,EAAoBC,EAASC,EAAQC,mBAAAA,IAAAA,EAAQ,GACpDF,EAAQG,KAAI,SAAAnB,UAOjBoB,EANApB,OACKA,GACHiB,OAAAA,EACAC,MAAAA,KAKElB,EAAOgB,UACThB,EAAOgB,QAAUD,EAAoBf,EAAOgB,QAAShB,EAAQkB,EAAQ,IAEhElB,KAIJ,SAASqB,EAAeL,UACtBM,EAAUN,EAAS,WAGrB,SAASI,EAAqBpB,OAE7BuB,EAAyBvB,EAAzBuB,GAAIC,EAAqBxB,EAArBwB,SAAUC,EAAWzB,EAAXyB,UAEI,iBAAbD,EAAuB,CAChCD,EAAKA,GAAMC,MACLE,EAAeF,EAASG,MAAM,KACpCH,EAAW,SAAAI,UAoHR,SAAe5C,EAAK6C,EAAMC,OAC1BD,SACI7C,MAYL+C,EAVEC,EAA2B,mBAATH,EAAsBA,EAAOI,KAAKC,UAAUL,GAE9DM,EACJC,EAAaC,IAAIL,IAChB,eACOG,EAwHZ,SAAuBnD,UAevB,SAASsD,EAAYC,EAAKC,YAAAA,IAAAA,EAAS,OAC5BtF,MAAMC,QAAQoF,OAGZ,IAAIE,EAAI,EAAGA,EAAIF,EAAIG,OAAQD,GAAK,EACnCH,EAAYC,EAAIE,GAAID,QAHtBA,EAAOG,KAAKJ,UAMPC,EArBLF,CAAYtD,GAETmC,KAAI,SAAAyB,UAAKC,OAAOD,GAAGE,QAAQ,IAAK,QAEhCC,KAAK,KAELD,QAAQE,EAAe,KACvBF,QAAQG,EAAgB,IAExBtB,MAAM,KAnISuB,CAAcrB,UAC9BO,EAAae,IAAInB,EAAUG,GACpBA,EAHR,OASDJ,EAAMI,EAAQ7F,QAAO,SAAC8G,EAAQC,UAAaD,EAAOC,KAAWrE,GAC7D,MAAOsE,gBAGa,IAARvB,EAAsBA,EAAMD,EAzItByB,CAAM3B,EAAKF,QAG1BH,GAAwB,iBAAXE,GAAuBA,IACvCF,EAAKE,IAGFF,GAAMvB,EAAOgB,cAChBrD,QAAQ6F,MAAMxD,GACR,IAAInC,MAAM,2DAGb0D,QACH5D,QAAQ6F,MAAMxD,GACR,IAAInC,MAAM,wDAGlByC,OAAOmD,OAAOzD,EAAQ,CACpBuB,GAAAA,EACAC,SAAAA,IAGKxB,EAGF,SAAS0D,EAAe1D,EAAQ2D,OAChCA,QACG,IAAI9F,aAEZyC,OAAOmD,OAAOzD,KAEZyB,OAAQ,kBAAMvC,sCACd0E,OAAQ,kBAAM1E,uCACXtD,KACA+H,KACA3D,IAEEA,EAIF,SAAS6D,EAAiBC,EAAYlI,WACrCmI,EAAe,GAEjBC,EAAcF,EAEdG,EAAM,EACJC,EAAS,kBAAMD,sBAIbE,EAAc,CAClBC,QAAS,IAILC,EAAgB,GAEhBC,EAAaN,EAAYO,MAAK,SAAA3B,UAAKA,EAAE3B,UAG3C+C,EAAYhG,SAAQ,SAAAgC,OAIdwE,EAFAC,EAAqB,UAAIJ,GAAeK,UAAU,MAIlDJ,EAAY,IAEVtE,EAAOiB,OACTuD,OACKxE,EAAOiB,QACV0D,WAAY3E,EAAOiB,OAAOM,GAC1BA,GAAOvB,EAAOiB,OAAOM,OAAM2C,IAC3BE,QAAS,CAACpE,UAKZwE,EAAYd,EACV,CACEiB,WAHkB3E,EAAOuB,kBAIzBA,GAAOvB,EAAOuB,mBAAkB2C,IAChCU,cAAe5E,EACfoE,QAAS,CAACpE,IAEZpE,GAOF6I,GACAA,EAAmBE,aAAeH,EAAUG,WAE5CF,EAAmBL,QAAQzB,KAAK3C,GAEhCqE,EAAc1B,KAAK6B,GAIvBL,EAAYC,QAAQzB,KAAK3C,MAG3B+D,EAAapB,KAAKwB,GAGlBH,EAAcK,GA3DTL,EAAYtB,mBA8DZqB,EAAaW,UAGtB,IAAMtC,EAAe,IAAIyC,IA0BlB,SAASC,+BAAmBC,2BAAAA,sBAC5B,IAAItC,EAAI,EAAGA,EAAIsC,EAAKrC,OAAQD,GAAK,UACb,IAAZsC,EAAKtC,UACPsC,EAAKtC,GA8BX,SAASuC,EAAWC,MACR,mBAANA,SACFA,EAIJ,SAAS3D,EAAUiB,EAAK2C,OACvBC,EAAO,UAEG,SAAVC,EAAU7C,GACdA,EAAIvE,SAAQ,SAAA4E,GACLA,EAAEsC,GAGLE,EAAQxC,EAAEsC,IAFVC,EAAKxC,KAAKC,MAOhBwC,CAAQ7C,GAED4C,EAGF,SAASE,EACdC,SACEC,IAAAA,kBAAmBC,IAAAA,aAAUC,cAAAA,gBAEzBC,EAAe,UAerBJ,EAAKtH,SAba,SAAZ2H,EAAY/D,GAChBA,EAAIgE,WACDhE,EAAIiE,UAAYjE,EAAIiE,SAASN,IAAuBC,EAAS5D,EAAIL,IAEpEK,EAAIkE,UAAYlE,EAAImE,WAAanE,EAAImE,QAAQrD,OAE7CgD,EAAa/C,KAAKf,GAEd6D,GAAiB7D,EAAImE,SAAWnE,EAAImE,QAAQrD,QAAUd,EAAIgE,YAC5DhE,EAAImE,QAAQ/H,QAAQ2H,MAMjBD,EAGF,SAASM,EAAgBC,EAAQC,EAAiBC,UAErDnB,EAAWiB,IACXC,EAAgBD,IAChBE,EAAYF,IACZE,EAAYC,KAIT,SAASC,EAAuBC,EAAYxK,EAAOkE,UACjDsG,EAAaA,EAAWxK,EAAOkE,QAA2B,IAAVlE,EAGlD,SAASyK,UACR,IAAI1I,MACR,mGAMJ,IAAMmF,EAAgB,MAChBC,EAAiB,MC7RvB,IAAMuD,EAAuB,SAAAjK,aAC3BkK,KAAM,SACHlK,IAGCmK,EAA2B,SAAAnK,aAC/BkK,KAAM,YACHlK,IAGCoK,EAAwB,SAACpK,SAASyD,IAAAA,iBACtCkF,cAAelF,EAAOuB,GACtBqF,QAAS5G,EAAO6G,wBAChBJ,KAAM,gBACHlK,IAGCuK,EAAwB,SAACvK,SAASyD,IAAAA,iBACtCkF,cAAelF,EAAOuB,GACtBqF,QAAS5G,EAAO6G,yBACbtK,IAGCwK,EAA6B,SAACxK,eAClC2I,qBAD2C8B,MAE3CP,KAAM,OACHlK,IAGC0K,EAA6B,SAAC1K,eAClC2I,qBAD2C8B,OAExCzK,IAGC2K,EAAqB,SAAC3K,eAC1B2I,aADmCtD,IACnBL,GAChBkF,KAAM,OACHlK,IAGC4K,EAAsB,SAAC5K,SAAS6K,IAAAA,eACpClC,YAAakC,EAAKxF,IAAIL,OAAM6F,EAAKpH,OAAOuB,GACxCkF,KAAM,QACHlK,IAGU,SAAS8K,UACf,CACLC,WAAY,GACZC,cAAe,GACfC,mBAAoB,GACpBxG,QAAS,GACTyG,YAAa,GACb3D,WAAY,GACZ4D,eAAgB,GAChBC,YAAa,GACbC,oBAAqB,GACrBC,wBAAyB,GACzBC,qBAAsB,GACtBC,eAAgB,GAChBC,mBAAoB,GACpBjE,aAAc,GACdkE,iBAAkB,GAClBC,4BAA6B,GAC7BC,YAAa,GACbC,WAAY,GACZC,cAAe,CAAC7B,GAChB8B,kBAAmB,CAAC5B,GACpB6B,oBAAqB,CAACxB,GACtByB,oBAAqB,CAACvB,GACtBwB,eAAgB,CAAC9B,GACjB+B,eAAgB,CAAC5B,GACjB6B,YAAa,CAACzB,GACd0B,aAAc,CAACzB,GACf0B,iBAAkB,IChEtBnN,EAAQoN,mBAAqB,qBAC7BpN,EAAQqN,iBAAmB,mBAC3BrN,EAAQsN,iBAAmB,mBAC3BtN,EAAQuN,qBAAuB,uBAExB,IAAMC,EAAsB,SAAAtM,GACjCA,EAAMuM,qBAAuB,CAACC,GAC9BxM,EAAMyM,6BAA+B,CAACC,GAEtC1M,EAAM2K,cAAc5E,KAAK4G,GACzB3M,EAAMsL,4BAA4BvF,KAAKuF,GACvCtL,EAAMqL,iBAAiBtF,MAAK,SAAC/C,SAAQG,IAAAA,yBAChCH,GACHG,EAASyJ,MAAMC,mBAEjB7M,EAAMuL,YAAYxF,KAAKwF,IAGzBe,EAAoB7K,WAAa,sBAEjC,IAAM+K,EAA8B,SAAC7M,SAASyD,IAAAA,aAAa,CACzDzD,EACA,CACEmN,SAAU,SAAApG,GACRtD,EAAO2J,cAAcrG,EAAEsG,OAAOC,UAEhCpN,MAAO,CACL2G,OAAQ,WAEVyG,QAAS7J,EAAO8J,UAChBC,MAAO,2BAILT,EAAsC,SAAC/M,SAASwD,IAAAA,eAAe,CACnExD,EACA,CACEmN,SAAU,SAAApG,GACRvD,EAASkJ,sBAAsB3F,EAAEsG,OAAOC,UAE1CpN,MAAO,CACL2G,OAAQ,WAEVyG,SAAU9J,EAASiK,mBAAqBjK,EAASyJ,MAAMC,cAAc/G,OACrEqH,MAAO,4BACPE,eACGlK,EAASiK,kBAAoBjK,EAASyJ,MAAMC,cAAc/G,UAIjE,SAAS6G,EAAQC,EAAOU,EAAQC,EAAepK,MACzCmK,EAAOjK,OAASvE,EAAQC,eAExB8N,cAAe,IACZD,MAIHU,EAAOjK,OAASvE,EAAQoN,+BAErBU,GACHC,cAAe1J,EAASqK,aAAaX,eAAiB,QAItDS,EAAOjK,OAASvE,EAAQqN,iBAAkB,CAC5CpL,QAAQ0M,IAAI,wBACZ1M,QAAQ0M,IAAIH,GACZvM,QAAQ0M,IAAI,eACZ1M,QAAQ0M,IAAIb,OACNc,OACoB,IAAjBJ,EAAOpO,MACVoO,EAAOpO,OACN0N,EAAMC,cAAc7I,SAASsJ,EAAOK,UAC3C5M,QAAQ0M,IAAI,iBACZ1M,QAAQ0M,IAAIC,OACNb,EAAgBa,YACdd,EAAMC,eAAeS,EAAOK,WAChCf,EAAMC,cAAcxD,QAAO,SAAArD,UAAKA,IAAMsH,EAAOK,YACjD5M,QAAQ0M,IAAI,wBACZ1M,QAAQ0M,IAAIZ,OACNe,OACDhB,GACHC,cAAAA,WAEF9L,QAAQ0M,IAAI,gBACZ1M,QAAQ0M,IAAIG,GACLA,KAGLN,EAAOjK,OAASvE,EAAQsN,iBAAkB,CAC5CrL,QAAQ0M,IAAI,qBACZ1M,QAAQ0M,IAAIH,GACZvM,QAAQ0M,IAAI,eACZ1M,QAAQ0M,IAAIb,OACNC,YAAqB7K,EAAiBsL,EAAOpO,MAAO0N,EAAMC,gBAChE9L,QAAQ0M,IAAI,uBACZ1M,QAAQ0M,IAAIZ,OACNe,OACDhB,GACHC,cAAAA,WAEF9L,QAAQ0M,IAAI,gBACZ1M,QAAQ0M,IAAIG,GACLA,SAGLN,EAAOjK,OAASvE,EAAQuN,0BAOrBO,GACHC,oBANwB,IAAjBS,EAAOpO,MACVoO,EAAOpO,OACN0N,EAAMC,cAAc/G,QAIE3C,EAAS+D,WAAW3C,KAAI,SAAAyB,UAAKA,EAAErB,MAAM,YAKtE,SAAS2G,EAA4BnI,OAEjCqE,EAEErE,EAFFqE,QACSqF,EACP1J,EADFyJ,MAASC,cAGUvK,EAAMC,QAAO,GAEhBC,YAsBdyH,EAA0B,EAE9BzC,EAAQpG,SACN,SAAAyM,UAAc5D,GAtBK,SAAf6D,EAAgB1K,EAAQ2K,GAC5B3K,EAAO8J,UAAYa,IAAkBlB,EAAc7I,SAASZ,EAAOuB,QAE/DsF,EAA0B,SAE1B7G,EAAOoE,SAAWpE,EAAOoE,QAAQ1B,OACnC1C,EAAOoE,QAAQpG,SACb,SAAA4M,UACG/D,GAA2B6D,EAAaE,EAAW5K,EAAO8J,cAG/DjD,EAA0B7G,EAAO8J,UAAY,EAAI,EAGnD9J,EAAO6G,wBAA0BA,EAE1BA,EAMkC6D,CAAaD,GAAW,MAIrE,SAAStC,EAAYpI,OAEjBiB,EAOEjB,EAPFiB,QACA6J,EAME9K,EANF8K,YACAC,EAKE/K,EALF+K,SACAhH,EAIE/D,EAJF+D,WACAiH,EAGEhL,EAHFgL,SACStB,EAEP1J,EAFFyJ,MAASC,gBAEP1J,EADFiL,uBAAAA,gBAGIC,EAAclM,EAAagB,GAE3BiK,EAAmBlG,EAAWpB,SAAW+G,EAAc/G,OAEvDqG,EAAmB7J,EAAMG,aAC7B,SAACkL,EAAUzO,UACTgP,EAAS,CAAE7K,KAAMvE,EAAQqN,iBAAkBwB,SAAAA,EAAUzO,MAAAA,MACvD,CAACgP,IAGG9B,EAAmB9J,EAAMG,aAC7B,SAAAvD,UAASgP,EAAS,CAAE7K,KAAMvE,EAAQsN,iBAAkBlN,MAAAA,MACpD,CAACgP,IAGG7B,EAAuB/J,EAAMG,aACjC,SAAAvD,UAASgP,EAAS,CAAE7K,KAAMvE,EAAQuN,qBAAsBnN,MAAAA,MACxD,CAACgP,IAGGzB,EAA+B1M,EACnCoO,IAAW1B,6BACX,CAAEtJ,SAAUkL,MAGdJ,EAAY7M,SAAQ,SAAAgC,GAClBA,EAAO2J,aAAe,SAAA7N,GACpBgP,EAAS,CACP7K,KAAMvE,EAAQqN,iBACdwB,SAAUvK,EAAOuB,GACjBzF,MAAAA,KAIJkE,EAAOmJ,qBAAuBxM,EAC5BoO,IAAW5B,qBACX,CACEpJ,SAAUkL,IACVjL,OAAAA,WAKAkL,EAA4BnM,EAAaiM,GAE/CtL,GAAuB,WACjBwL,KACFJ,EAAS,CAAE7K,KAAMvE,EAAQoN,uBAE1B,CAACgC,EAAU9J,IAEdV,OAAOmD,OAAO1D,EAAU,CACtBiK,iBAAAA,EACAjB,iBAAAA,EACAC,iBAAAA,EACAC,qBAAAA,EACAI,6BAAAA,IChNJ,IAAM8B,EAAsB,GACtBC,EAAwB,GACxBC,EAAiB,SAAC7B,EAAOU,EAAQoB,UAAc9B,GAC/C+B,EAAoB,SAAC3J,EAAKoF,UAAUpF,EAAImE,SAAW,IACnDyF,GAAkB,SAAC5J,EAAKoF,EAAO/F,aAChCA,EAAS,CAACA,EAAOM,GAAIyF,GAAOjE,KAAK,KAAOiE,IACvCyE,GAA4B,SAAA7I,UAAKA,GAEvC,SAAS8I,GAAcnP,SASjBA,EAPF6N,aAAAA,aAAee,MAOb5O,EANFX,cAAAA,aAAgBwP,MAMd7O,EALFoP,WAAAA,aAAaJ,MAKXhP,EAJFqP,SAAAA,aAAWJ,OAITjP,EAHFsP,aAAAA,aAAeR,MAGb9O,EAFFiL,mBAAAA,aAAqBiE,mBAEnBlP,iGAIF6N,aAAAA,EACAxO,cAAAA,EACA+P,WAAAA,EACAC,SAAAA,EACAC,aAAAA,EACArE,mBAAAA,IAkZJ,SAASsE,GAAsB1H,EAAS2H,YAAAA,IAAAA,EAAO,OACzCC,EAAmB,EACnBC,EAAgB,EAChBC,EAAmB,EACnBC,EAAoB,SAExB/H,EAAQpG,SAAQ,SAAAoO,OACCC,EAAeD,EAAxBhI,WAENgI,EAAOE,UAAYP,EAEfM,GAAcA,EAAW3J,OAAQ,OAM/BoJ,GAAsBO,EAAYN,GAJpCQ,OACAC,OACAC,OACAC,OAEFN,EAAOG,cAAgBA,EACvBH,EAAOI,WAAaA,EACpBJ,EAAOK,cAAgBA,EACvBL,EAAOM,eAAiBA,OAExBN,EAAOG,cAAgBH,EAAOpQ,SAC9BoQ,EAAOI,WAAaG,KAAKC,IACvBD,KAAKE,IAAIT,EAAOpQ,SAAUoQ,EAAOrQ,OACjCqQ,EAAOnQ,UAETmQ,EAAOK,cAAgBL,EAAOnQ,SAC9BmQ,EAAOM,eAAiBN,EAAOU,UAAYV,EAAOI,WAAa,EAE7DJ,EAAOtC,YACTiC,GAAQK,EAAOI,WACfR,GAAoBI,EAAOG,cAC3BN,GAAiBG,EAAOI,WACxBN,GAAoBE,EAAOK,cAC3BN,GAAqBC,EAAOM,mBAIzB,CAACV,EAAkBC,EAAeC,EAAkBC,GAG7D,SAASY,UACPC,IAAAA,KACA1H,IAAAA,KACA2H,IAAAA,SACAC,IAAAA,SACAlN,IAAAA,OACA4L,IAAAA,SACAD,IAAAA,WACAwB,IAAAA,iBACAlC,IAAAA,YA6EA+B,EAAKhP,SAAQ,SAACoP,EAAaC,UAxET,SAAZC,EAAaF,EAAaC,EAAUnM,EAAWD,EAAQsM,YAAnBrM,IAAAA,EAAQ,OAE1C2E,EAAWuH,EAEX7L,EAAKqK,EAASwB,EAAaC,EAAUpM,GAEvCW,EAAMsL,EAAS3L,MAGdK,EAsCMA,EAAImE,SAIbnE,EAAI4L,gBAAgBxP,SAAQ,SAAC4E,EAAGH,UAAM6K,EAAU1K,EAAGH,EAAGvB,EAAQ,EAAGU,eAzCjEA,EAAM,CACJL,GAAAA,EACAsE,SAAAA,EACAmB,MAAOqG,EACPnM,MAAAA,EACAuM,MAAO,CAAC,MAKNA,MAAMtM,IAAMoF,EAChB3E,EAAI6L,MAAMxH,OAASM,EACnB3E,EAAI6L,MAAMzP,QAAUuI,EACpB3E,EAAI6L,MAAM,GAAG7E,aAAerC,EAG5B3E,EAAI8L,OAAS,GAGbH,EAAW5K,KAAKf,GAEhBqL,EAAStK,KAAKf,GAEdsL,EAAS3L,GAAMK,EAGfA,EAAI4L,gBAAkB7B,EAAWyB,EAAaC,GAG1CzL,EAAI4L,gBAAiB,KACjBzH,EAAU,GAChBnE,EAAI4L,gBAAgBxP,SAAQ,SAAC4E,EAAGH,UAC9B6K,EAAU1K,EAAGH,EAAGvB,EAAQ,EAAGU,EAAKmE,MAGlCnE,EAAImE,QAAUA,EAUd/F,EAAOwB,WACTI,EAAI8L,OAAO1N,EAAOuB,IAAMvB,EAAOwB,SAAS4L,EAAaC,EAAUzL,IAIjEA,EAAI8L,OAAO1N,EAAOuB,IAAMnE,EACtB+P,EACAvL,EAAI8L,OAAO1N,EAAOuB,IAClB,CACEK,IAAAA,EACA5B,OAAAA,EACAD,SAAUkL,MAEZ,GAKFqC,CAAUF,EAAaC,EAAU,OAAGM,EAAWrI,MC3jBnD5J,EAAQkS,cAAgB,gBACxBlS,EAAQmS,kBAAoB,oBAC5BnS,EAAQoS,sBAAwB,4BAEnBC,GAAc,SAAAnR,GACzBA,EAAMoR,8BAAgC,CAACC,IACvCrR,EAAMsR,0BAA4B,CAACC,IACnCvR,EAAM2K,cAAc5E,KAAK4G,IACzB3M,EAAMuL,YAAYxF,KAAKwF,IACvBvL,EAAMwL,WAAWzF,KAAKyF,KAGxB2F,GAAY1P,WAAa,cAEzB,IAAM4P,GAAuC,SAAC1R,SAASwD,IAAAA,eAAe,CACpExD,EACA,CACE6R,QAAS,SAAA9K,GACPvD,EAAS+N,yBAEXrR,MAAO,CACL2G,OAAQ,WAEV2G,MAAO,8BAILoE,GAAmC,SAAC5R,SAASqF,IAAAA,UAAU,CAC3DrF,EACA,CACE6R,QAAS,WACPxM,EAAIiM,qBAENpR,MAAO,CACL2G,OAAQ,WAEV2G,MAAO,yBAKX,SAASR,GAAQC,EAAOU,EAAQC,EAAepK,MACzCmK,EAAOjK,OAASvE,EAAQC,eAExB6J,SAAU,IACPgE,MAIHU,EAAOjK,OAASvE,EAAQkS,0BAErBpE,GACHhE,SAAUzF,EAASqK,aAAa5E,UAAY,QAI5C0E,EAAOjK,OAASvE,EAAQoS,sBAAuB,KACzChS,EAAUoO,EAAVpO,MACAuS,EAAgCtO,EAAhCsO,kBAAmBnB,EAAanN,EAAbmN,iBAEQ,IAAVpR,EAAwBA,GAASuS,EAE3C,KACP7I,EAAW,UAEjBlF,OAAOgO,KAAKpB,GAAUlP,SAAQ,SAAAuQ,GAC5B/I,EAAS+I,IAAS,UAIf/E,GACHhE,SAAAA,gBAKCgE,GACHhE,SAAU,QAIV0E,EAAOjK,OAASvE,EAAQmS,kBAAmB,OACrCtM,EAA2B2I,EAA3B3I,GAAWiN,EAAgBtE,EAAvBpO,MACN2S,EAASjF,EAAMhE,SAASjE,GAExBmN,OACmB,IAAhBF,EAA8BA,GAAeC,MAEjDA,GAAUC,cAERlF,GACHhE,cACKgE,EAAMhE,iBACRjE,IAAK,QAGL,GAAIkN,IAAWC,EAAa,OACJlF,EAAMhE,WAA1BjE,eAEJiI,GACHhE,cAHOjE,oBAMFiI,GAKb,SAASrB,GAAYpI,OAEjBiN,EAWEjN,EAXFiN,KACA1H,EAUEvF,EAVFuF,KACA4H,EASEnN,EATFmN,WASEnN,EARFwF,kBAAAA,aAAoB,eAQlBxF,EAPF4O,qBAAAA,kBAOE5O,EANF0F,cAAAA,kBAME1F,EALF6O,kBAAAA,gBACA7D,EAIEhL,EAJFgL,SACA5M,EAGE4B,EAHF5B,QACSqH,EAEPzF,EAFFyJ,MAAShE,SACTsF,EACE/K,EADF+K,SAGF5M,EACEC,EACA,CAAC,YAAa,aAAc,kBAAmB,mBAC/C,mBAGI0Q,EAAuB9P,EAAa6P,GAEtCP,EAAoBS,QACtBxO,OAAOgO,KAAKpB,GAAUxK,QAAUpC,OAAOgO,KAAK9I,GAAU9C,QAGpD2L,GACE/N,OAAOgO,KAAKpB,GAAU3I,MAAK,SAAAhD,UAAOiE,EAASjE,QAC7C8M,GAAoB,GAKxB3O,GAAuB,WACjBmP,KACF/D,EAAS,CAAE7K,KAAMvE,EAAQkS,kBAE1B,CAAC9C,EAAUkC,QAERa,EAAoB3O,EAAMG,aAC9B,SAACkC,EAAIzF,GACHgP,EAAS,CAAE7K,KAAMvE,EAAQmS,kBAAmBtM,GAAAA,EAAIzF,MAAAA,MAElD,CAACgP,IAGGgD,EAAwB5O,EAAMG,aAClC,SAAAvD,UAASgP,EAAS,CAAE7K,KAAMvE,EAAQoS,sBAAuBhS,MAAAA,MACzD,CAACgP,IAGGpF,EAAexG,EAAM6P,SAAQ,kBAC7BJ,EACKtJ,EAAWC,EAAM,CAAEC,kBAAAA,EAAmBC,SAAAA,EAAUC,cAAAA,IAGlDH,IACN,CAACqJ,EAAsBrJ,EAAMC,EAAmBC,EAAUC,IAEvDuJ,EAAgB9P,EAAM6P,SAAQ,kBAmCtC,SAA2BvJ,OACrByJ,EAAW,SAEf3O,OAAOgO,KAAK9I,GAAUxH,SAAQ,SAAAuD,OACtB2N,EAAU3N,EAAGI,MAAM,KACzBsN,EAAWtC,KAAKE,IAAIoC,EAAUC,EAAQxM,WAGjCuM,EA3CmCE,CAAkB3J,KAAW,CACrEA,IAGIyF,EAAclM,EAAagB,GAE3BiO,EAAgCrR,EACpCoO,IAAWiD,8BACX,CAAEjO,SAAUkL,MAGd3K,OAAOmD,OAAO1D,EAAU,CACtBqP,gBAAiB9J,EACjBI,aAAAA,EACAJ,KAAMI,EACNsJ,cAAAA,EACAX,kBAAAA,EACAR,kBAAAA,EACAC,sBAAAA,EACAE,8BAAAA,IAIJ,SAAS5F,GAAWxG,SAAmBmJ,IAAZhL,SAAYgL,SAAYhL,IAAAA,SACjD6B,EAAIiM,kBAAoB,SAAA1K,UAAOpD,EAAS8N,kBAAkBjM,EAAIL,GAAI4B,IAElEvB,EAAIsM,0BAA4BvR,EAC9BoO,IAAWmD,0BACX,CACEnO,SAAAA,EACA6B,IAAAA,QCnNOwE,GAAO,SAACd,EAAM+J,EAAKC,UAC9BhK,EAAOA,EAAKW,QAAO,SAAArE,UACVyN,EAAI9K,MAAK,SAAAhD,OACRgO,EAAW3N,EAAI8L,OAAOnM,UACrBsB,OAAO0M,GACXC,cACA5O,SAASiC,OAAOyM,GAAaE,sBAMtCpJ,GAAKE,WAAa,SAAAvE,UAAQA,GAEnB,IAAM0N,GAAY,SAACnK,EAAM+J,EAAKC,UAC5BhK,EAAKW,QAAO,SAAArE,UACVyN,EAAI9K,MAAK,SAAAhD,OACRgO,EAAW3N,EAAI8L,OAAOnM,eACRoM,IAAb4B,GACH1M,OAAO0M,GAAUC,gBAAkB3M,OAAOyM,GAAaE,qBAMjEC,GAAUnJ,WAAa,SAAAvE,UAAQA,GAExB,IAAM2N,GAAgB,SAACpK,EAAM+J,EAAKC,UAChChK,EAAKW,QAAO,SAAArE,UACVyN,EAAI9K,MAAK,SAAAhD,OACRgO,EAAW3N,EAAI8L,OAAOnM,eACRoM,IAAb4B,GACH1M,OAAO0M,KAAc1M,OAAOyM,UAMtCI,GAAcpJ,WAAa,SAAAvE,UAAQA,GAE5B,IAAMnB,GAAW,SAAC0E,EAAM+J,EAAKC,UAC3BhK,EAAKW,QAAO,SAAArE,UACVyN,EAAI9K,MAAK,SAAAhD,UACGK,EAAI8L,OAAOnM,GACZX,SAAS0O,UAK/B1O,GAAS0F,WAAa,SAAAvE,UAAQA,IAAQA,EAAIW,QAEnC,IAAMiN,GAAc,SAACrK,EAAM+J,EAAKC,UAC9BhK,EAAKW,QAAO,SAAArE,UACVyN,EAAI9K,MAAK,SAAAhD,OACRgO,EAAW3N,EAAI8L,OAAOnM,UAE1BgO,GACAA,EAAS7M,QACT4M,EAAYM,OAAM,SAAA7N,UAAOwN,EAAS3O,SAASmB,aAMnD4N,GAAYrJ,WAAa,SAAAvE,UAAQA,IAAQA,EAAIW,QAEtC,IAAMmN,GAAQ,SAACvK,EAAM+J,EAAKC,UACxBhK,EAAKW,QAAO,SAAArE,UACVyN,EAAI9K,MAAK,SAAAhD,UACGK,EAAI8L,OAAOnM,KACR+N,SAK1BO,GAAMvJ,WAAa,SAAAvE,eAAsB,IAARA,GAE1B,IAAM+N,GAAS,SAACxK,EAAM+J,EAAKC,UACzBhK,EAAKW,QAAO,SAAArE,UACVyN,EAAI9K,MAAK,SAAAhD,UACGK,EAAI8L,OAAOnM,IAET+N,SAKzBQ,GAAOxJ,WAAa,SAAAvE,UAAc,MAAPA,GAEpB,IAAMgO,GAAU,SAACzK,EAAM+J,EAAKC,SAChBA,GAAe,GAA3B1C,OAAKC,WAEVD,EAAqB,iBAARA,EAAmBA,GAAOoD,EAAAA,IACvCnD,EAAqB,iBAARA,EAAmBA,EAAMmD,EAAAA,GAEvB,KACPC,EAAOrD,EACbA,EAAMC,EACNA,EAAMoD,SAGD3K,EAAKW,QAAO,SAAArE,UACVyN,EAAI9K,MAAK,SAAAhD,OACRgO,EAAW3N,EAAI8L,OAAOnM,UACrBgO,GAAY3C,GAAO2C,GAAY1C,SAK5CkD,GAAQzJ,WAAa,SAAAvE,UAClBA,GAA0B,iBAAXA,EAAI,IAAqC,iBAAXA,EAAI,0IC5FpDrG,EAAQwU,aAAe,eACvBxU,EAAQyU,UAAY,YACpBzU,EAAQ0U,cAAgB,oBAEXC,GAAa,SAAAzT,GACxBA,EAAM2K,cAAc5E,KAAK4G,IACzB3M,EAAMuL,YAAYxF,KAAKwF,KAKzB,SAASoB,GAAQC,EAAOU,EAAQC,EAAepK,MACzCmK,EAAOjK,OAASvE,EAAQC,eAExB2U,QAAS,IACN9G,MAIHU,EAAOjK,OAASvE,EAAQwU,yBAErB1G,GACH8G,QAASvQ,EAASqK,aAAakG,SAAW,QAI1CpG,EAAOjK,OAASvE,EAAQyU,UAAW,KAC7B5F,EAA0BL,EAA1BK,SAAU+E,EAAgBpF,EAAhBoF,YACVxL,EAA6C/D,EAA7C+D,WAAyBoC,EAAoBnG,EAAjCoG,YAEdnG,EAAS8D,EAAWyM,MAAK,SAAA3N,UAAKA,EAAErB,KAAOgJ,SAExCvK,QACG,IAAInC,uDACyC0M,OAI/CiG,EAAexK,EACnBhG,EAAOiG,OACPC,GAAmB,GACnBC,IAGIsK,EAAiBjH,EAAM8G,QAAQC,MAAK,SAAA3N,UAAKA,EAAErB,KAAOgJ,KAElDmG,EAAY9R,EAChB0Q,EACAmB,GAAkBA,EAAe3U,cAI/BuK,EAAuBmK,EAAalK,WAAYoK,EAAW1Q,QAExDwJ,GACH8G,QAAS9G,EAAM8G,QAAQrK,QAAO,SAAArD,UAAKA,EAAErB,KAAOgJ,YAMzCf,EAFHiH,GAGAH,QAAS9G,EAAM8G,QAAQnP,KAAI,SAAAyB,UACrBA,EAAErB,KAAOgJ,EACJ,CAAEhJ,GAAIgJ,EAAUzO,MAAO4U,GAEzB9N,OAOX0N,kBAAa9G,EAAM8G,SAAS,CAAE/O,GAAIgJ,EAAUzO,MAAO4U,UAInDxG,EAAOjK,OAASvE,EAAQ0U,cAAe,KACjCE,EAAYpG,EAAZoG,QACAxM,EAA6C/D,EAA7C+D,WAAyBoC,EAAoBnG,EAAjCoG,wBAGfqD,GAEH8G,QAAS1R,EAAiB0R,EAAS9G,EAAM8G,SAASrK,QAAO,SAAAA,OACjDjG,EAAS8D,EAAWyM,MAAK,SAAA3N,UAAKA,EAAErB,KAAO0E,EAAO1E,aAQlD8E,EAPmBL,EACnBhG,EAAOiG,OACPC,GAAmB,GACnBC,IAIoCG,WAAYL,EAAOnK,MAAOkE,SAUxE,SAASmI,GAAYpI,OAEjBiN,EAYEjN,EAZFiN,KACA1H,EAWEvF,EAXFuF,KACA2H,EAUElN,EAVFkN,SACAC,EASEnN,EATFmN,SACApJ,EAQE/D,EARF+D,WACaoC,EAOXnG,EAPFoG,YACAwK,EAME5Q,EANF4Q,gBAME5Q,EALF6Q,iBAAAA,gBACAC,EAIE9Q,EAJF8Q,eACSP,EAGPvQ,EAHFyJ,MAAS8G,QACTxF,EAEE/K,EAFF+K,WAEE/K,EADF+Q,iBAAAA,gBAGIX,EAAYjR,EAAMG,aACtB,SAACkL,EAAU+E,GACTxE,EAAS,CAAE7K,KAAMvE,EAAQyU,UAAW5F,SAAAA,EAAU+E,YAAAA,MAEhD,CAACxE,IAGGsF,EAAgBlR,EAAMG,aAC1B,SAAAiR,GACExF,EAAS,CACP7K,KAAMvE,EAAQ0U,cACdE,QAAAA,MAGJ,CAACxF,IAGHhH,EAAW9F,SAAQ,SAAAgC,OAEfuB,EAIEvB,EAJFuB,GACAC,EAGExB,EAHFwB,SACkBuP,EAEhB/Q,EAFF4Q,iBACgBI,EACdhR,EADF6Q,eAIF7Q,EAAOiR,UAAYzP,EACfsD,GAC2B,IAAzBkM,QAAwCrD,GACrB,IAAnBkD,QAAkClD,GAClC,GAEF7I,EAAgBiM,EAAwBH,GAAkB,GAG9D5Q,EAAOmQ,UAAY,SAAApO,UAAOoO,EAAUnQ,EAAOuB,GAAIQ,QAIzCmP,EAAQZ,EAAQC,MAAK,SAAA3N,UAAKA,EAAErB,KAAOA,KACzCvB,EAAOsP,YAAc4B,GAASA,EAAMpV,eAOlCoD,EAAM6P,SAAQ,cACZ4B,IAAkBL,EAAQ5N,aACrB,CAAC4C,EAAM2H,EAAUC,OAGpBiE,EAAmB,GACnBC,EAAmB,SAiElB,CA9DY,SAAbC,EAAc/L,EAAMpE,YAAAA,IAAAA,EAAQ,OAC5BoQ,EAAehM,SAEnBgM,EAAehB,EAAQhU,QACrB,SAACiV,SAAqBhH,IAAJhJ,GAAqB+N,IAAPxT,MAExBkE,EAAS8D,EAAWyM,MAAK,SAAA3N,UAAKA,EAAErB,KAAOgJ,SAExCvK,SACIuR,EAGK,IAAVrQ,IACFlB,EAAOwR,gBAAkBD,OAGrBf,EAAexK,EACnBhG,EAAOiG,OACPC,GAAmB,GACnBC,WAGGqK,GASLxQ,EAAOsR,aAAed,EACpBe,EACA,CAAChH,GACD+E,GAGKtP,EAAOsR,eAdZ3T,QAAQ8T,uEAC4DzR,EAAOuB,QAEpEgQ,KAaXjM,IAOWtH,SAAQ,SAAA4D,GACnBuP,EAAiBxO,KAAKf,GACtBwP,EAAiBxP,EAAIL,IAAMK,EACtBA,EAAImE,UAITnE,EAAImE,QACFnE,EAAImE,SAAWnE,EAAImE,QAAQrD,OAAS,EAChC2O,EAAWzP,EAAImE,QAAS7E,EAAQ,GAChCU,EAAImE,YAGLuL,EAGDD,CAAW/L,GAAO6L,EAAkBC,KAC3C,CACDT,EACAL,EACAhL,EACA2H,EACAC,EACApJ,EACAoC,IAlFAoL,OACAH,OACAC,OAmFFlS,EAAM6P,SAAQ,WAGejL,EAAWmC,QACpC,SAAAjG,UAAWsQ,EAAQC,MAAK,SAAA3N,UAAKA,EAAErB,KAAOvB,EAAOuB,SAK5BvD,SAAQ,SAAAgC,GACzBA,EAAOwR,gBAAkBF,EACzBtR,EAAOsR,aAAeA,OAEvB,CAACA,EAAchB,EAASxM,QAErB4N,EAAsB3S,EAAa+R,GAEzCpR,GAAuB,WACjBgS,KACF5G,EAAS,CAAE7K,KAAMvE,EAAQwU,iBAE1B,CAACpF,EAAU6F,EAAgB,KAAO3D,IAErC1M,OAAOmD,OAAO1D,EAAU,CACtByR,gBAAiBlM,EACjBqM,oBAAqB1E,EACrB2E,oBAAqB1E,EACrBoE,aAAAA,EACAH,iBAAAA,EACAC,iBAAAA,EACA9L,KAAMgM,EACNrE,SAAUkE,EACVjE,SAAUkE,EACVjB,UAAAA,EACAC,cAAAA,IAjRJC,GAAWhS,WAAa,aCTxB3C,EAAQmW,kBAAoB,oBAC5BnW,EAAQoW,gBAAkB,sBAEbC,GAAkB,SAAAnV,GAC7BA,EAAM2K,cAAc5E,KAAK4G,IACzB3M,EAAMuL,YAAYxF,KAAKwF,KAKzB,SAASoB,GAAQC,EAAOU,EAAQC,EAAepK,MACzCmK,EAAOjK,OAASvE,EAAQmW,8BAErBrI,GACHwI,aAAcjS,EAASqK,aAAa4H,mBAAgBrE,OAIpDzD,EAAOjK,OAASvE,EAAQoW,gBAAiB,KACnCxC,EAAgBpF,EAAhBoF,YACApJ,EAAoBnG,EAApBmG,gBAEFsK,EAAexK,EACnBjG,EAASiS,aACT9L,GAAmB,GACnBC,IAGIuK,EAAY9R,EAAiB0Q,EAAa9F,EAAMwI,iBAGlD3L,EAAuBmK,EAAalK,WAAYoK,GAAY,CACRlH,EAA9CwI,sBAA8CxI,gCAKnDA,GACHwI,aAActB,KAKpB,SAASvI,GAAYpI,OAEjBiN,EAYEjN,EAZFiN,KACA1H,EAWEvF,EAXFuF,KACA2H,EAUElN,EAVFkN,SACAC,EASEnN,EATFmN,SACApJ,EAQE/D,EARF+D,WACaoC,EAOXnG,EAPFoG,YACA6L,EAMEjS,EANFiS,aACAC,EAKElS,EALFkS,mBACuBC,EAIrBnS,EAJFyJ,MAASwI,aACTlH,EAGE/K,EAHF+K,WAGE/K,EAFFoS,sBAAAA,gBACAC,EACErS,EADFqS,oBAGIN,EAAkB5S,EAAMG,aAC5B,SAAAiQ,GACExE,EAAS,CAAE7K,KAAMvE,EAAQoW,gBAAiBxC,YAAAA,MAE5C,CAACxE,MAYC5L,EAAM6P,SAAQ,cACZkD,QAAmD,IAAtBC,QACxB,CAAC5M,EAAM2H,EAAUC,OAGpBiE,EAAmB,GACnBC,EAAmB,GAEnBZ,EAAexK,EACnBgM,EACA9L,GAAmB,GACnBC,QAGGqK,SACH7S,QAAQ8T,sDACDnM,EAGTxB,EAAW9F,SAAQ,SAAAgC,OACYqS,EAA8BrS,EAAnDoS,oBAERpS,EAAOiR,UAAYnM,GACa,IAA9BuN,QAA6C1E,GACrB,IAAxByE,QAAuCzE,GACvC,UAIE2E,EAAoBxO,EAAWmC,QAAO,SAAAsM,UAAqB,IAAhBA,EAAEtB,mBAuB5C,CApBY,SAAbI,EAAaC,UACjBA,EAAed,EACbc,EACAgB,EAAkBnR,KAAI,SAAAyB,UAAKA,EAAErB,MAC7B2Q,IAGWlU,SAAQ,SAAA4D,GACnBuP,EAAiBxO,KAAKf,GACtBwP,EAAiBxP,EAAIL,IAAMK,EAE3BA,EAAImE,QACFnE,EAAImE,SAAWnE,EAAImE,QAAQrD,OACvB2O,EAAWzP,EAAImE,SACfnE,EAAImE,WAGLuL,EAGDD,CAAW/L,GAAO6L,EAAkBC,KAC3C,CACDa,EACAC,EACAF,EACA9L,EACApC,EACAwB,EACA2H,EACAC,EACAkF,IAjEAI,OACAC,OACAC,OAkEIC,EAA2B5T,EAAaoT,GAE9CzS,GAAuB,WACjBiT,KACF7H,EAAS,CAAE7K,KAAMvE,EAAQmW,sBAE1B,CAAC/G,EAAUmH,EAAqB,KAAOjF,IAE1C1M,OAAOmD,OAAO1D,EAAU,CACtB6S,sBAAuBtN,EACvBuN,0BAA2B5F,EAC3B6F,0BAA2B5F,EAC3BsF,mBAAAA,EACAC,uBAAAA,EACAC,uBAAAA,EACApN,KAAMkN,EACNvF,SAAUwF,EACVvF,SAAUwF,EACVZ,gBAAAA,EACAM,oBAAAA,ICjLG,SAASW,GAAIrF,EAAQsF,UAGnBA,EAAiB1W,QACtB,SAACyW,EAAKvW,UAASuW,GAAuB,iBAATvW,EAAoBA,EAAO,KACxD,GDqBJuV,GAAgB1T,WAAa,kECjBtB,SAAaqP,OACdd,EAAM,SAEVc,EAAO1P,SAAQ,SAAAlC,GACQ,iBAAVA,IACT8Q,EAAMD,KAAKC,IAAIA,EAAK9Q,OAIjB8Q,OAGF,SAAac,OACdb,EAAM,SAEVa,EAAO1P,SAAQ,SAAAlC,GACQ,iBAAVA,IACT+Q,EAAMF,KAAKE,IAAIA,EAAK/Q,OAIjB+Q,UAGF,SAAgBa,OACjBd,EAAM,EACNC,EAAM,SAEVa,EAAO1P,SAAQ,SAAAlC,GACQ,iBAAVA,IACT8Q,EAAMD,KAAKC,IAAIA,EAAK9Q,GACpB+Q,EAAMF,KAAKE,IAAIA,EAAK/Q,OAId8Q,OAAQC,WAGb,SAAiBa,UACfqF,GAAI,EAAMrF,GAAUA,EAAOhL,eAG7B,SAAgBgL,OAChBA,EAAOhL,cACH,SAGLkK,EAAM,EACNC,EAAM,SAEVa,EAAO1P,SAAQ,SAAAlC,GACQ,iBAAVA,IACT8Q,EAAMD,KAAKC,IAAIA,EAAK9Q,GACpB+Q,EAAMF,KAAKE,IAAIA,EAAK/Q,QAIhB8Q,EAAMC,GAAO,UAGhB,SAAgBa,mBACV,IAAIuF,IAAIvF,GAAQA,uBAGtB,SAAqBA,UACnB,IAAIuF,IAAIvF,GAAQwF,YAGlB,SAAexF,UACbA,EAAOhL,UChEVyQ,GAAa,GACbC,GAAc,GAGpB1X,EAAQ2X,aAAe,eACvB3X,EAAQ4X,cAAgB,oBAEXC,GAAa,SAAA3W,GACxBA,EAAM4W,sBAAwB,CAACC,IAC/B7W,EAAM2K,cAAc5E,KAAK4G,IACzB3M,EAAMoL,mBAAmBrF,MAAK,SAAC/C,SAAQG,IAAAA,yBAClCH,GACHG,EAASyJ,MAAMkK,aAEjB9W,EAAMmL,eAAepF,KAAKoF,IAC1BnL,EAAMuL,YAAYxF,KAAKwF,IACvBvL,EAAMwL,WAAWzF,KAAKyF,KAGxBmL,GAAWlV,WAAa,aAExB,IAAMoV,GAA+B,SAAClX,SAAS6P,IAAAA,aAAa,CAC1D7P,EACA,CACE6R,QAAShC,EAAOuH,WACZ,SAAArQ,GACEA,EAAEsQ,UACFxH,EAAOkH,sBAET3F,EACJlR,MAAO,CACL2G,OAAQgJ,EAAOuH,WAAa,eAAYhG,GAE1C5D,MAAO,oBAKX,SAASR,GAAQC,EAAOU,EAAQC,EAAepK,MACzCmK,EAAOjK,OAASvE,EAAQC,eAExB+X,QAAS,IACNlK,MAIHU,EAAOjK,OAASvE,EAAQ2X,yBAErB7J,GACHkK,QAAS3T,EAASqK,aAAasJ,SAAW,QAI1CxJ,EAAOjK,OAASvE,EAAQ4X,cAAe,KACjC/I,EAAgCL,EAAhCK,SAAiBsJ,EAAe3J,EAAtBpO,MAEZgY,OACkB,IAAfD,EACHA,GACCrK,EAAMkK,QAAQ9S,SAAS2J,eAIvBf,EAFHsK,GAGAJ,kBAAalK,EAAMkK,SAASnJ,MAM9BmJ,QAASlK,EAAMkK,QAAQzN,QAAO,SAAArD,UAAKA,IAAM2H,QAK/C,SAASxC,GACP/G,SAGa0S,IADX3T,SACEyJ,MAASkK,QAOPK,EAAiBL,EACpBvS,KAAI,SAAA6S,UAAKhT,EAAQuP,MAAK,SAAA0D,UAAOA,EAAI1S,KAAOyS,QACxC/N,OAAO6I,SAEJoF,EAAoBlT,EAAQiF,QAAO,SAAAgO,UAAQP,EAAQ9S,SAASqT,EAAI1S,cAEtEP,YAAc+S,EAAmBG,IAEzBlW,SAAQ,SAAAgC,GACdA,EAAOmU,UAAYT,EAAQ9S,SAASZ,EAAOuB,IAC3CvB,EAAOoU,aAAeV,EAAQW,QAAQrU,EAAOuB,OAGxCP,EAGT,IAAMsT,GAA0B,GAEhC,SAASnM,GAAYpI,OAEjBiN,EAgBEjN,EAhBFiN,KACA1H,EAeEvF,EAfFuF,KACA2H,EAcElN,EAdFkN,SACAC,EAaEnN,EAbFmN,SACApJ,EAYE/D,EAZF+D,WACA+G,EAWE9K,EAXF8K,cAWE9K,EAVFwU,UAAAA,aAAYC,KACZC,EASE1U,EATF0U,gBASE1U,EARF2U,aAAcC,aAAmBL,KACjCnW,EAOE4B,EAPF5B,QACSuV,EAMP3T,EANFyJ,MAASkK,QACT5I,EAKE/K,EALF+K,WAKE/K,EAJF6U,iBAAAA,gBACAC,EAGE9U,EAHF8U,eACAC,EAEE/U,EAFF+U,kBACA/J,EACEhL,EADFgL,SAGF7M,EAAkBC,EAAS,CAAC,cAAe,kBAErC8M,EAAclM,EAAagB,GAEjC+D,EAAW9F,SAAQ,SAAAgC,OAEfwB,EAGExB,EAHFwB,SACgBuT,EAEd/U,EAFFgV,eACgBC,EACdjV,EADF6U,eAGF7U,EAAO2T,WAAanS,EAChBsD,EACE9E,EAAO2T,YACkB,IAAzBsB,QAAwCtH,GACrB,IAAnBkH,QAAkClH,GAClC,GAEF7I,EACE9E,EAAO2T,WACPoB,EACAD,GACA,GAGF9U,EAAO2T,aACT3T,EAAOsT,cAAgB,kBAAMvT,EAASuT,cAActT,EAAOuB,MAG7DvB,EAAOkV,WAAalV,EAAOkV,YAAclV,EAAOnE,YAG5CyX,EAAgBpU,EAAMG,aAC1B,SAACkL,EAAUzO,GACTgP,EAAS,CAAE7K,KAAMvE,EAAQ4X,cAAe/I,SAAAA,EAAUzO,MAAAA,MAEpD,CAACgP,IAGHD,EAAY7M,SAAQ,SAAAoO,GAClBA,EAAOoH,sBAAwB7W,EAC7BoO,IAAWyI,sBACX,CAAEzT,SAAUkL,IAAemB,OAAAA,aAY3BlN,EAAM6P,SAAQ,cACZ0F,IAAkBf,EAAQhR,aACrB,CACL4C,EACA2H,EACAC,EACAiG,GACAC,GACAnG,EACAC,OAKEiI,EAAkBzB,EAAQzN,QAAO,SAAA+N,UACrClQ,EAAWyM,MAAK,SAAA0D,UAAOA,EAAI1S,KAAOyS,QAiEhCoB,EAAkB,GAChBC,EAAkB,GAClBC,EAAsB,GACtBC,EAAsB,GACtBC,EAAqB,GACrBC,EAAqB,GAgErBC,EA7DqB,SAArBC,EAAsBrQ,EAAMpE,EAAW0U,eAAX1U,IAAAA,EAAQ,GAEpCA,IAAUiU,EAAgBzS,cACrB4C,MAGHiF,EAAW4K,EAAgBjU,GAG3B2U,EAAgB/R,EAAWyM,MAAK,SAAA0D,UAAOA,EAAI1S,KAAOgJ,KAGpDuL,GAFqD,mBAA1BD,EAAcnC,QACzCmC,EAAcnC,QAAUa,GACOjP,EAAMiF,UAGXjK,OAAOyV,QAAQD,GAAc3U,KACzD,WAA4B6F,OAA1BgP,OAAYN,OACRnU,EAAQgJ,MAAYyL,EAIlBjQ,EAAU4P,EAAmBD,EAAaxU,EAAQ,EAHxDK,EAAKqU,EAAcA,MAAYrU,EAAOA,GAMhC0U,EAAW/U,EACbI,EAAUoU,EAAa,YACvBA,EAEEhI,EAhGkB,SAACuI,EAAUP,EAAaxU,OAC9CwM,EAAS,UAEf5J,EAAW9F,SAAQ,SAAAgC,MAEbmV,EAAgBvU,SAASZ,EAAOuB,IAClCmM,EAAO1N,EAAOuB,IAAMmU,EAAY,GAC5BA,EAAY,GAAGhI,OAAO1N,EAAOuB,IAC7B,cAKA2U,EAAgBR,EAAYvU,KAAI,SAAAS,UAAOA,EAAI8L,OAAO1N,EAAOuB,OAGzD4U,EAAaF,EAAS9U,KAAI,SAAAS,OAC1BwU,EAAcxU,EAAI8L,OAAO1N,EAAOuB,QAE/BL,GAASlB,EAAOqW,gBAAiB,KAC9BC,EAC6B,mBAA1BtW,EAAOuW,eACVvW,EAAOuW,eACP5B,EAAiB3U,EAAOuW,iBACxB7B,GAAa1U,EAAOuW,oBAErBD,QACH3Y,QAAQC,KAAK,CAAEoC,OAAAA,IACT,IAAInC,mFAKZuY,EAAcE,EAAiBF,EAAaxU,EAAK5B,UAE5CoW,KAILI,EAC0B,mBAArBxW,EAAOyW,UACVzW,EAAOyW,UACP9B,EAAiB3U,EAAOyW,YACxB/B,GAAa1U,EAAOyW,cAEtBD,EACF9I,EAAO1N,EAAOuB,IAAMiV,EAAYL,EAAYD,OACvC,CAAA,GAAIlW,EAAOyW,gBAChB9Y,QAAQC,KAAK,CAAEoC,OAAAA,IACT,IAAInC,8EAIV6P,EAAO1N,EAAOuB,IAAM,UAIjBmM,EAuCYgJ,CAAsBT,EAAUP,EAAaxU,GAEtDU,EAAM,CACVL,GAAAA,EACA4S,WAAW,EACXwC,UAAWpM,EACXyL,WAAAA,EACAtI,OAAAA,EACA3H,QAAAA,EACAkQ,SAAAA,EACA/U,MAAAA,EACA8F,MAAAA,UAGFjB,EAAQ/H,SAAQ,SAAA4Y,GACdxB,EAAgBzS,KAAKiU,GACrBvB,EAAgBuB,EAAOrV,IAAMqV,EACzBA,EAAOzC,WACTmB,EAAoB3S,KAAKiU,GACzBrB,EAAoBqB,EAAOrV,IAAMqV,IAEjCpB,EAAmB7S,KAAKiU,GACxBnB,EAAmBmB,EAAOrV,IAAMqV,MAI7BhV,KAOO+T,CAAmBrQ,UAEvCoQ,EAAY1X,SAAQ,SAAA4Y,GAClBxB,EAAgBzS,KAAKiU,GACrBvB,EAAgBuB,EAAOrV,IAAMqV,EACzBA,EAAOzC,WACTmB,EAAoB3S,KAAKiU,GACzBrB,EAAoBqB,EAAOrV,IAAMqV,IAEjCpB,EAAmB7S,KAAKiU,GACxBnB,EAAmBmB,EAAOrV,IAAMqV,MAK7B,CACLlB,EACAN,EACAC,EACAC,EACAC,EACAC,EACAC,KAED,CACDhB,EACAf,EACApO,EACA2H,EACAC,EACApJ,EACA6Q,EACAJ,IA5LAmB,OACAN,OACAC,OACAC,OACAC,OACAC,OACAC,OAyLIoB,EAAsB9X,EAAa6V,GAEzClV,GAAuB,WACjBmX,KACF/L,EAAS,CAAE7K,KAAMvE,EAAQ2X,iBAE1B,CAACvI,EAAU2J,EAAgB,KAAOzH,IAErC1M,OAAOmD,OAAO1D,EAAU,CACtB+W,eAAgBxR,EAChByR,kBAAmB9J,EACnB+J,mBAAoB9J,EACpBwI,YAAAA,EACAN,gBAAAA,EACAC,gBAAAA,EACAC,oBAAAA,EACAC,oBAAAA,EACAC,mBAAAA,EACAC,mBAAAA,EACAnQ,KAAMoQ,EACNzI,SAAUmI,EACVlI,SAAUmI,EACV/B,cAAAA,IAIJ,SAASlL,GAAWxG,GAClBA,EAAIqV,SAASjZ,SAAQ,SAAAoJ,GAEnBA,EAAK+M,UAAY/M,EAAKpH,OAAOmU,WAAa/M,EAAKpH,OAAOuB,KAAOK,EAAI+U,UAEjEvP,EAAK8P,eAAiB9P,EAAK+M,WAAa/M,EAAKpH,OAAOmU,UAEpD/M,EAAK+P,cAAgB/P,EAAK+M,YAAc/M,EAAK8P,eAAiBtV,EAAIkE,aAI/D,SAAS0O,GAAiBlP,EAAMiF,UAC9BjF,EAAKhJ,QAAO,SAACS,EAAM6E,EAAKa,OAGvB2U,KAAYxV,EAAI8L,OAAOnD,UAC7BxN,EAAKqa,GAAUla,MAAMC,QAAQJ,EAAKqa,IAAWra,EAAKqa,GAAU,GAC5Dra,EAAKqa,GAAQzU,KAAKf,GACX7E,IACN,ICraL,IAAMsa,GAAsB,aA0E5B,SAASC,GAAarS,EAAGsS,UAChBtS,IAAMsS,EAAI,EAAItS,EAAIsS,EAAI,GAAK,EAGpC,SAASC,GAAsB5V,EAAK2I,UAC3B3I,EAAI8L,OAAOnD,GAGpB,SAASkN,GAASxS,SACC,iBAANA,EACLyS,MAAMzS,IAAMA,IAAM+K,EAAAA,GAAY/K,KAAO+K,EAAAA,EAChC,GAEFnN,OAAOoC,GAEC,iBAANA,EACFA,EAEF,qDAvFmB,SAAC0S,EAAMC,EAAMrN,OACnCtF,EAAIuS,GAAsBG,EAAMpN,GAChCgN,EAAIC,GAAsBI,EAAMrN,OAEpCtF,EAAIwS,GAASxS,GACbsS,EAAIE,GAASF,GAIbtS,EAAIA,EAAEtD,MAAM0V,IAAqBpR,OAAO6I,SACxCyI,EAAIA,EAAE5V,MAAM0V,IAAqBpR,OAAO6I,SAGjC7J,EAAEvC,QAAU6U,EAAE7U,QAAQ,KACvBmV,EAAK5S,EAAE6S,QACPC,EAAKR,EAAEO,QAELE,EAAKC,SAASJ,EAAI,IAClBK,EAAKD,SAASF,EAAI,IAElBI,EAAQ,CAACH,EAAIE,GAAIE,UAGnBV,MAAMS,EAAM,QACVN,EAAKE,SACA,KAELA,EAAKF,SACC,UAMRH,MAAMS,EAAM,WACPT,MAAMM,IAAO,EAAI,KAItBA,EAAKE,SACA,KAELA,EAAKF,SACC,UAIL/S,EAAEvC,OAAS6U,EAAE7U,iBAGf,SAAkBiV,EAAMC,EAAMrN,OAC/BtF,EAAIuS,GAAsBG,EAAMpN,GAChCgN,EAAIC,GAAsBI,EAAMrN,UAK7B+M,GAHPrS,EAAIA,EAAEoT,UACNd,EAAIA,EAAEc,kBAKD,SAAeV,EAAMC,EAAMrN,UAIzB+M,GAHCE,GAAsBG,EAAMpN,GAC5BiN,GAAsBI,EAAMrN,OCnDtC7O,EAAQ4c,YAAc,cACtB5c,EAAQ6c,aAAe,eACvB7c,EAAQ8c,YAAc,cAEtB5c,EAAc6c,SAAW,eACzB7c,EAAc8c,eAAgB,MAEjBC,GAAY,SAAA/b,GACvBA,EAAMgc,qBAAuB,CAACC,IAC9Bjc,EAAM2K,cAAc5E,KAAK4G,IACzB3M,EAAMuL,YAAYxF,KAAKwF,KAGzBwQ,GAAUta,WAAa,YAEvB,IAAMwa,GAA8B,SAACtc,SAASwD,IAAAA,SAAUC,IAAAA,SACPD,EAAvC+Y,iBAAAA,aAAmB,SAAAxV,UAAKA,EAAEyV,kBAE3B,CACLxc,EACA,CACE6R,QAASpO,EAAOgZ,QACZ,SAAA1V,GACEA,EAAEsQ,UACF5T,EAAOuY,kBACL5K,GACC5N,EAASkZ,kBAAoBH,EAAiBxV,UAGnDqK,EACJlR,MAAO,CACL2G,OAAQpD,EAAOgZ,QAAU,eAAYrL,GAEvC5D,MAAO/J,EAAOgZ,QAAU,qBAAkBrL,KAMhD,SAASpE,GAAQC,EAAOU,EAAQC,EAAepK,MACzCmK,EAAOjK,OAASvE,EAAQC,eAExBud,OAAQ,IACL1P,MAIHU,EAAOjK,OAASvE,EAAQ4c,wBAErB9O,GACH0P,OAAQnZ,EAASqK,aAAa8O,QAAU,QAIxChP,EAAOjK,OAASvE,EAAQ8c,wBAKrBhP,GACH0P,OALiB1P,EAAX0P,OACiBjT,QAAO,SAAArD,UAAKA,EAAErB,KAAO2I,EAAOK,iBAQnDL,EAAOjK,OAASvE,EAAQ6c,aAAc,KAyBpCY,EAxBI5O,EAA0BL,EAA1BK,SAAU6O,EAAgBlP,EAAhBkP,KAAMC,EAAUnP,EAAVmP,MAGtBvV,EAKE/D,EALF+D,WACAmV,EAIElZ,EAJFkZ,iBACAK,EAGEvZ,EAHFuZ,kBACAC,EAEExZ,EAFFwZ,qBAEExZ,EADFyZ,qBAAAA,aAAuBtd,OAAOC,mBAGxB+c,EAAW1P,EAAX0P,OAIAR,EADO5U,EAAWyM,MAAK,SAAA3N,UAAKA,EAAErB,KAAOgJ,KACrCmO,cAGFe,EAAiBP,EAAO3I,MAAK,SAAA3N,UAAKA,EAAErB,KAAOgJ,KAC3CmP,EAAgBR,EAAO1a,WAAU,SAAAoE,UAAKA,EAAErB,KAAOgJ,KAC/CoP,EAAiB,MAAOP,EAE1BQ,EAAY,SAwBC,YAjBbT,GAFCF,GAAoBI,EACnBI,EACW,SAEA,MAIXC,IAAkBR,EAAOxW,OAAS,EACvB,UACJ+W,EACI,SAEA,YAOdH,GACAK,GACAN,GAASE,KACRE,GACAA,EAAeL,OACdV,IACCe,EAAeL,MAAQV,KAE3BS,EAAa,UAGI,YAAfA,EACFS,EAAY,CACV,CACErY,GAAIgJ,EACJ6O,KAAMO,EAAiBP,EAAOV,IAGV,QAAfS,GACTS,YACKV,GACH,CACE3X,GAAIgJ,EACJ6O,KAAMO,EAAiBP,EAAOV,MAIxBmB,OAAO,EAAGD,EAAUlX,OAAS8W,GACf,WAAfL,EAETS,EAAYV,EAAO/X,KAAI,SAAAyB,UACjBA,EAAErB,KAAOgJ,OAEN3H,GACHwW,KAAMO,EAAiBP,GAAQK,EAAeL,OAG3CxW,KAEe,WAAfuW,IACTS,EAAYV,EAAOjT,QAAO,SAAArD,UAAKA,EAAErB,KAAOgJ,WAIrCf,GACH0P,OAAQU,KAKd,SAASzR,GAAYpI,OAEjBiN,EAeEjN,EAfFiN,KACA1H,EAcEvF,EAdFuF,KACA2H,EAaElN,EAbFkN,SACAnJ,EAYE/D,EAZF+D,aAYE/D,EAXF+Z,UAAAA,aAAYC,KACDC,EAUTja,EAVFka,UACAC,EASEna,EATFma,aACAC,EAQEpa,EARFoa,eACAC,EAOEra,EAPFqa,cACAvP,EAME9K,EANF8K,YACSqO,EAKPnZ,EALFyJ,MAAS0P,OACTpO,EAIE/K,EAJF+K,SACA3M,EAGE4B,EAHF5B,QACA4M,EAEEhL,EAFFgL,WAEEhL,EADFsa,gBAAAA,gBAGFnc,EACEC,EACA,CAAC,aAAc,kBAAmB,aAAc,mBAChD,iBAIIoa,EAAerZ,EAAMG,aACzB,SAACkL,EAAU6O,EAAMC,GACfvO,EAAS,CAAE7K,KAAMvE,EAAQ6c,aAAchO,SAAAA,EAAU6O,KAAAA,EAAMC,MAAAA,MAEzD,CAACvO,IAIGG,EAAclM,EAAagB,GAGjC8K,EAAY7M,SAAQ,SAAAgC,OAEhBwB,EAIExB,EAJFwB,SACS8Y,EAGPta,EAHFgZ,QACeuB,EAEbva,EAFFoa,cACA7Y,EACEvB,EADFuB,GAGIyX,EAAUxX,EACZsD,GAC0B,IAAxByV,QAAuC5M,GACrB,IAAlByM,QAAiCzM,GACjC,GAEF7I,EAAgBqV,EAAgBG,GAAsB,GAE1Dta,EAAOgZ,QAAUA,EAEbhZ,EAAOgZ,UACThZ,EAAOuY,aAAe,SAACa,EAAMC,UAC3Bd,EAAavY,EAAOuB,GAAI6X,EAAMC,IAEhCrZ,EAAOwY,YAAc,WACnB1N,EAAS,CAAE7K,KAAMvE,EAAQ8c,YAAajO,SAAUvK,EAAOuB,OAI3DvB,EAAO4Y,qBAAuBjc,EAC5BoO,IAAW6N,qBACX,CACE7Y,SAAUkL,IACVjL,OAAAA,QAIEwa,EAAatB,EAAO3I,MAAK,SAAA3N,UAAKA,EAAErB,KAAOA,KAC7CvB,EAAOya,WAAaD,EACpBxa,EAAO0a,YAAcxB,EAAO1a,WAAU,SAAAoE,UAAKA,EAAErB,KAAOA,KACpDvB,EAAO2a,aAAe3a,EAAOya,SAAWD,EAAWpB,UAAOzL,WAGvBzO,EAAM6P,SAAQ,cAC7CmL,IAAiBhB,EAAOxW,aACnB,CAAC4C,EAAM2H,OAGV2N,EAAiB,GAGjBC,EAAkB3B,EAAOjT,QAAO,SAAAmS,UACpCtU,EAAWyM,MAAK,SAAA0D,UAAOA,EAAI1S,KAAO6W,EAAK7W,eAoElC,CAjEU,SAAXuZ,EAAWxV,OAITyV,EAAajB,EACjBxU,EACAuV,EAAgB1Z,KAAI,SAAAiX,OAEZpY,EAAS8D,EAAWyM,MAAK,SAAA3N,UAAKA,EAAErB,KAAO6W,EAAK7W,UAE7CvB,QACG,IAAInC,uDACyCua,EAAK7W,yBAIlDkX,EAAazY,EAAbyY,SASFuC,EACJhW,EAAWyT,KACVuB,GAAiB,IAAIvB,IACtBwB,GAAUxB,OAEPuC,QACG,IAAInd,0DAC4C4a,mBAAyBL,EAAK7W,gBAM/E,SAAC0D,EAAGsS,UAAMyD,EAAW/V,EAAGsS,EAAGa,EAAK7W,GAAI6W,EAAKgB,UAGlDyB,EAAgB1Z,KAAI,SAAAiX,OAEZpY,EAAS8D,EAAWyM,MAAK,SAAA3N,UAAKA,EAAErB,KAAO6W,EAAK7W,aAE9CvB,GAAUA,EAAOib,aACZ7C,EAAKgB,MAGNhB,EAAKgB,gBAKjB2B,EAAW/c,SAAQ,SAAA4D,GACjBgZ,EAAejY,KAAKf,IACfA,EAAImE,SAAWnE,EAAImE,QAAQrD,QAAU,IAG1Cd,EAAImE,QAAU+U,EAASlZ,EAAImE,aAGtBgV,EAGDD,CAASxV,GAAOsV,KACvB,CACDV,EACAhB,EACA5T,EACA2H,EACAnJ,EACAgW,EACAE,IArFKkB,OAAYN,OAwFbO,EAAqBpc,EAAasb,GAExC3a,GAAuB,WACjByb,KACFrQ,EAAS,CAAE7K,KAAMvE,EAAQ4c,gBAE1B,CAAC4B,EAAe,KAAOlN,IAE1B1M,OAAOmD,OAAO1D,EAAU,CACtBqb,cAAe9V,EACf+V,kBAAmBpO,EACnBiO,WAAAA,EACAN,eAAAA,EACAtV,KAAM4V,EACNjO,SAAU2N,EACVrC,aAAAA,IAIG,SAASwB,GAAiBxX,EAAK+Y,EAAOC,SACpC,UAAIhZ,GAAK6V,MAAK,SAACT,EAAMC,OACrB,IAAInV,EAAI,EAAGA,EAAI6Y,EAAM5Y,OAAQD,GAAK,EAAG,KAClC+Y,EAASF,EAAM7Y,GACf2W,GAAmB,IAAZmC,EAAK9Y,IAA4B,SAAZ8Y,EAAK9Y,GACjCgZ,EAAUD,EAAO7D,EAAMC,MACb,IAAZ6D,SACKrC,GAAQqC,EAAUA,SAGtBF,EAAK,GAAK5D,EAAK3Q,MAAQ4Q,EAAK5Q,MAAQ4Q,EAAK5Q,MAAQ2Q,EAAK3Q,SCnWjEtL,EAAQggB,UAAY,YACpBhgB,EAAQigB,SAAW,WACnBjgB,EAAQkgB,YAAc,kBAETC,GAAgB,SAAAjf,GAC3BA,EAAM2K,cAAc5E,KAAK4G,IACzB3M,EAAMuL,YAAYxF,KAAKwF,KAKzB,SAASoB,GAAQC,EAAOU,EAAQC,EAAepK,MACzCmK,EAAOjK,OAASvE,EAAQC,eAExBmgB,SAAU,GACVC,UAAW,GACRvS,MAIHU,EAAOjK,OAASvE,EAAQggB,sBAErBlS,GACHuS,UAAWhc,EAASqK,aAAa2R,WAAa,OAI9C7R,EAAOjK,OAASvE,EAAQigB,SAAU,KAC5BK,EAAoBjc,EAApBic,UAAWC,EAASlc,EAATkc,KACbC,EAAetd,EAAiBsL,EAAO6R,UAAWvS,EAAMuS,WACxDI,EAAsBD,EAAe,EACrCE,GACW,IAAfJ,EACIC,EAAKvZ,OAAS8G,EAAMsS,SACpBI,EAAeF,EAAY,SAE7BG,GAAuBC,EAClB5S,OAIJA,GACHuS,UAAWG,OAIXhS,EAAOjK,OAASvE,EAAQkgB,YAAa,KAC/BE,EAAa5R,EAAb4R,SACFO,EAAc7S,EAAMsS,SAAWtS,EAAMuS,sBAItCvS,GACHuS,UAJgBpP,KAAK2P,MAAMD,EAAcP,GAKzCA,SAAAA,KAKN,SAAS3T,GAAYpI,OAEjBuF,EAmBEvF,EAnBFuF,OAmBEvF,EAlBFwc,cAAAA,kBAkBExc,EAjBFwF,kBAAAA,aAAoB,aACpBpH,EAgBE4B,EAhBF5B,QACWqe,EAeTzc,EAfFic,YAeEjc,EAdF4O,qBAAAA,kBAcE5O,EAbF0F,cAAAA,kBAaE1F,EAZFyJ,MACEsS,IAAAA,SACAC,IAAAA,UACAvW,IAAAA,SACAwM,IAAAA,aACA1B,IAAAA,QACAoD,IAAAA,QACAwF,IAAAA,OAEFpO,EAGE/K,EAHF+K,SACAkC,EAEEjN,EAFFiN,KACAyP,EACE1c,EADF0c,iBAGFve,EACEC,EACA,CAAC,kBAAmB,aAAc,aAAc,YAAa,eAC7D,qBAGIue,EAAmB3d,EAAawd,GAEtC7c,GAAuB,WACjBgd,KACF5R,EAAS,CAAE7K,KAAMvE,EAAQggB,cAE1B,CACD5Q,EACA2R,EAAmB,KAAOzP,EAC1BgF,EACA1B,EACAoD,EACAwF,QAGI8C,EAAYS,EACdD,EACA7P,KAAKgQ,KAAKrX,EAAK5C,OAASoZ,GAEtBc,EAAc1d,EAAM6P,SACxB,kBACEiN,EAAY,EACR,UAAI,IAAI9e,MAAM8e,IAAYa,KAAK,MAAM1b,KAAI,SAACyB,EAAGH,UAAMA,KACnD,KACN,CAACuZ,IAGGC,EAAO/c,EAAM6P,SAAQ,eACrBkN,KAEAQ,EACFR,EAAO3W,MACF,KACCwX,EAAYhB,EAAWC,EACvBgB,EAAUD,EAAYhB,EAE5BG,EAAO3W,EAAK0X,MAAMF,EAAWC,UAG3BpO,EACKsN,EAGF5W,EAAW4W,EAAM,CAAE1W,kBAAAA,EAAmBC,SAAAA,EAAUC,cAAAA,MACtD,CACDA,EACAD,EACAD,EACAkX,EACAV,EACAD,EACAnN,EACArJ,IAGI2X,EAAkBlB,EAAY,EAC9BmB,GACW,IAAflB,EAAmBC,EAAKvZ,QAAUoZ,EAAWC,EAAYC,EAAY,EAEjEL,EAAWzc,EAAMG,aACrB,SAAA0c,GACEjR,EAAS,CAAE7K,KAAMvE,EAAQigB,SAAUI,UAAAA,MAErC,CAACjR,IAGGqS,EAAeje,EAAMG,aAAY,kBAC9Bsc,GAAS,SAAA7c,UAAOA,EAAM,OAC5B,CAAC6c,IAEEyB,EAAWle,EAAMG,aAAY,kBAC1Bsc,GAAS,SAAA7c,UAAOA,EAAM,OAC5B,CAAC6c,IAEEC,EAAc1c,EAAMG,aACxB,SAAAyc,GACEhR,EAAS,CAAE7K,KAAMvE,EAAQkgB,YAAaE,SAAAA,MAExC,CAAChR,IAGHxK,OAAOmD,OAAO1D,EAAU,CACtB6c,YAAAA,EACAZ,UAAAA,EACAC,KAAAA,EACAgB,gBAAAA,EACAC,YAAAA,EACAvB,SAAAA,EACAwB,aAAAA,EACAC,SAAAA,EACAxB,YAAAA,IAzKJC,GAAcxd,WAZK,gBCDnB3C,EAAQ2hB,WAAa,aACrB3hB,EAAQ4hB,YAAc,kBAETC,GAA4B,SAAA3gB,GACvCA,EAAM4gB,oBAAsB,CAACC,IAC7B7gB,EAAM2K,cAAc5E,KAAK4G,IACzB3M,EAAMkL,qBAAqBnF,KAAKmF,IAChClL,EAAMkH,WAAWnB,KAAKmB,IACtBlH,EAAM+K,YAAYhF,KAAKgF,IACvB/K,EAAMgL,oBAAoBjF,KAAKiF,IAC/BhL,EAAMiL,wBAAwBlF,KAAKkF,IACnCjL,EAAMmL,eAAepF,KAAKoF,IAC1BnL,EAAMoL,mBAAmBrF,KAAKqF,IAC9BpL,EAAMuL,YAAYxF,KAAKwF,IACvBvL,EAAMwL,WAAWzF,KAAKyF,KAGxBmV,GAA0Blf,WAAa,kBAEvC,IAAMqf,GAAsB,GAEtBD,GAA6B,SAAClhB,SAAS6P,IAAAA,aAAa,CACxD7P,EACA,CACE6R,QAAShC,EAAOuR,SACZ,SAAAra,GACEA,EAAEsQ,UACFxH,EAAOkR,oBAET3P,EACJlR,MAAO,CACL2G,OAAQgJ,EAAOuR,SAAW,eAAYhQ,GAExC5D,MAAO,kBAKX,SAASR,GAAQC,EAAOU,EAAQC,EAAepK,MACzCmK,EAAOjK,OAASvE,EAAQC,eAExBiiB,aAAcF,IACXlU,MAIHU,EAAOjK,OAASvE,EAAQ2hB,uBAErB7T,GACHoU,aAAc7d,EAASqK,aAAawT,cAAgBF,QAIpDxT,EAAOjK,OAASvE,EAAQ4hB,YAAa,KAC/B/S,EAA8BL,EAA9BK,SAAiBsT,EAAa3T,EAApBpO,MAEZgiB,OACgB,IAAbD,EACHA,GACCrU,EAAMoU,aAAahd,SAAS2J,eAI5Bf,EAFHsU,GAGAF,uBAAkBpU,EAAMoU,cAAcrT,MAMxCqT,aAAcpU,EAAMoU,aAAa3X,QAAO,SAAArD,UAAKA,IAAM2H,QAKzD,SAASzC,GAAqB/H,GAC5BA,EAAS+D,WAAW9F,SAAQ,SAAAgC,GAC1BA,EAAO+d,cAAgBhe,EAASyJ,MAAMoU,aAAahd,SAASZ,EAAOuB,OAIvE,SAASuC,GAAW9C,SAAWjB,IAAAA,gBAC7BiB,EAAQhD,SAAQ,SAAAgC,GACdA,EAAO+d,cAAgBhe,EAASyJ,MAAMoU,aAAahd,SAASZ,EAAOuB,IACnEvB,EAAOge,aAAe,IAAI/K,OAErBjS,EAGT,SAAS2G,GAAY7L,SAASkE,IAAAA,cACxBA,EAAOge,mBAAiC,IAAVliB,GAChCkE,EAAOge,aAAaC,IAAIniB,GAEnBA,EAGT,SAAS8L,GAAoBsW,SAAgBne,IAAAA,SACnC+D,EAAsB/D,EAAtB+D,WAAY0F,EAAUzJ,EAAVyJ,UAEfA,EAAMoU,aAAalb,SAAW8G,EAAMkK,UAAYlK,EAAMkK,QAAQhR,cAC1Dwb,MAGHN,EAAepU,EAAMoU,aACxBzc,KAAI,SAAAI,UAAMuC,EAAWyM,MAAK,SAAA3N,UAAKA,EAAErB,KAAOA,QACxC0E,OAAO6I,SAEJqP,EAAgBra,EAAWmC,QAC/B,SAAArD,UACGA,EAAEmb,gBACFvU,EAAMkK,QAAQ9S,SAASgC,EAAErB,MACzBiI,EAAMoU,aAAahd,SAASgC,EAAErB,OAyD7B6c,EAAkB/c,EAtDE,SAApBgd,EAAqBnd,EAAWD,EAAQqd,YAAnBpd,IAAAA,EAAQ,YAAWod,IAAAA,EAAe,QACrDC,EAAcX,EAAa1c,UAE5Bqd,EAwBgBrhB,MAAMshB,KAAKD,EAAYP,cAAc5F,OAEtCjX,KAAI,SAAAsd,OAChBC,OACDH,GACH9c,OACE8c,EAAYI,aAA6C,iBAAvBJ,EAAYnS,OACvCmS,EAAY9c,YAAWgd,EAC1BA,EACNG,cAAc,EACd3d,OAAAA,EACAC,MAAAA,EACAK,GAAIN,EACGA,EAAOM,OAAMgd,EAAYhd,OAAMkd,EAC/BF,EAAYhd,OAAMkd,EACzBI,WAAYJ,WAGdC,EAAY1d,QAAUqd,EAAkBnd,EAAQ,EAAGwd,YAC9CJ,GACH,SAAA1c,UAAOA,EAAI8L,OAAO6Q,EAAYhd,MAAQkd,MAGjCC,KA9CAP,EAAchd,KAAI,SAAA2d,eAQlBA,GACHnB,UAAU,EACVoB,WAAW,EACX9d,OAAAA,EACAC,MAAOA,EACPK,OAAON,EAAYA,EAAOM,OAAMud,EAAavd,GAAOud,EAAavd,IACjEC,SAAU,SAAC4L,EAAa3K,EAAGb,MACrB0c,EAAa1O,OAAM,SAAA3J,UAAUA,EAAOrE,aAC/BA,EAAI8L,OAAOoR,EAAavd,UAkCJ8c,oBAE5BH,EAAiBE,GAG9B,SAASvW,GACPjI,aAEEG,SACEyJ,MAASoU,IAAAA,aAAclK,IAAAA,wBAIhB9T,GAAMge,EAAclK,IAGjC,SAAS3L,GAAeA,SAA8ByB,IAAZzJ,SAAYyJ,aACpDzB,EAAiBA,EAAe9B,QAAO,SAAArD,UAAMA,EAAEmb,iBAE3CvU,EAAMoU,aAAalb,QAAU8G,EAAMkK,SAAWlK,EAAMkK,QAAQhR,SAC9DqF,EAAiBA,EAAe9B,QAC9B,SAAAjG,UAAUA,EAAOmU,WAAanU,EAAO+e,cAIlChX,EAGT,SAASC,GAAmBpI,SAAQG,IAAAA,yBACvBH,GAAMG,EAASyJ,MAAMoU,aAAc7d,EAASyJ,MAAMkK,UAG/D,SAASvL,GAAYpI,OAEjBiB,EAYEjB,EAZFiB,QACA8C,EAWE/D,EAXF+D,WACA+G,EAUE9K,EAVF8K,YAGAE,EAOEhL,EAPFgL,SACA5M,EAME4B,EANF5B,QACA2M,EAKE/K,EALF+K,WAKE/K,EAJFif,eAAAA,gBACAC,EAGElf,EAHFkf,YACAC,EAEEnf,EAFFmf,aACAC,EACEpf,EADFof,gBAGFjhB,EAAkBC,EAAS,CAAC,cAAe,uBAErC8M,EAAclM,EAAagB,GAEjC+D,EAAW9F,SAAQ,SAAAgC,OAEfwB,EAGExB,EAHFwB,SACc4d,EAEZpf,EAFFqf,aACcC,EACZtf,EADFkf,aAGFlf,EAAO2d,SAAWnc,EACdsD,EACE9E,EAAO2d,UACgB,IAAvB2B,QAAsC3R,GACrB,IAAjBuR,QAAgCvR,GAChC,GAEF7I,EACE9E,EAAO2d,SACPyB,EACAD,GACA,GAGFnf,EAAO2d,WACT3d,EAAOsd,YAAc,kBAAMvd,EAASud,YAAYtd,EAAOuB,MAGzDvB,EAAOkV,WAAalV,EAAOkV,YAAclV,EAAOnE,QAOlDgP,EAAY7M,SAAQ,SAAAoO,GAClBA,EAAOoR,oBAAsB7gB,EAC3BoO,IAAWyS,oBACX,CACEzd,SAAUkL,IACVmB,OAAAA,WAKAmT,EAAoBxgB,EAAaigB,GAEvCtf,GAAuB,WACjB6f,KACFzU,EAAS,CAAE7K,KAAMvE,EAAQ2hB,eAE1B,CAACvS,EAAUmU,EAAc,KAAOje,IAEnCV,OAAOmD,OAAO1D,EAAU,CACtBud,YAvBkB,SAAC/S,EAAUzO,GAC7BgP,EAAS,CAAE7K,KAAMvE,EAAQ4hB,YAAa/S,SAAAA,EAAUzO,MAAAA,OA0BpD,SAASsM,GAAWxG,GAClBA,EAAIqV,SAASjZ,SAAQ,SAAAoJ,GAEnBA,EAAK2X,UAAY3X,EAAKpH,OAAO+e,aCtRjCrjB,EAAQ8jB,kBAAoB,oBAC5B9jB,EAAQ+jB,sBAAwB,wBAChC/jB,EAAQgkB,kBAAoB,wBAEfC,GAAe,SAAA/iB,GAC1BA,EAAMgjB,0BAA4B,CAACC,IACnCjjB,EAAMkjB,8BAAgC,CAACC,IACvCnjB,EAAM2K,cAAc5E,KAAK4G,IACzB3M,EAAMuL,YAAYxF,KAAKwF,IACvBvL,EAAMwL,WAAWzF,KAAKyF,KAGxBuX,GAAathB,WAfM,eAiBnB,IAAMwhB,GAAmC,SAACtjB,SAASwD,IAAAA,SAAU6B,IAAAA,MACX7B,EAAxCigB,qBAAAA,aAAuB,qBASxB,CACLzjB,EACA,CACEmN,SAAU,SAAApG,GACR1B,EAAI8d,kBAAkBpc,EAAEsG,OAAOC,UAEjCpN,MAAO,CACL2G,OAAQ,WAEVyG,WAfAjI,EAAIiE,WAAYjE,EAAIiE,SAASma,KAGrBpe,EAAIqe,WAaZlW,MAAO,sBACPE,cAAerI,EAAIse,kBAKnBH,GAAuC,SAACxjB,SAASwD,IAAAA,eAAe,CACpExD,EACA,CACEmN,SAAU,SAAApG,GACRvD,EAAS0f,sBAAsBnc,EAAEsG,OAAOC,UAE1CpN,MAAO,CACL2G,OAAQ,WAEVyG,QAAS9J,EAASogB,kBAClBpW,MAAO,2BACPE,cAAe6E,SACZ/O,EAASogB,mBACR7f,OAAOgO,KAAKvO,EAASyJ,MAAM4W,gBAAgB1d,WAKnD,SAAS6G,GAAQC,EAAOU,EAAQC,EAAepK,MACzCmK,EAAOjK,OAASvE,EAAQC,eAExBykB,eAAgB,IACb5W,MAIHU,EAAOjK,OAASvE,EAAQ8jB,8BAErBhW,GACH4W,eAAgBrgB,EAASqK,aAAagW,gBAAkB,QAIxDlW,EAAOjK,OAASvE,EAAQ+jB,sBAAuB,KAClCY,EAAgBnW,EAAvBpO,MAENqkB,EAGEpgB,EAHFogB,kBACAjT,EAEEnN,EAFFmN,WAEEnN,EADF0V,mBAAAA,aAAqBvI,IAGjBoT,OACmB,IAAhBD,EAA8BA,GAAeF,EAIhDC,EAAiB9f,OAAOmD,OAAO,GAAI+F,EAAM4W,uBAE3CE,EACFhgB,OAAOgO,KAAKmH,GAAoBzX,SAAQ,SAAAuQ,GACtC6R,EAAe7R,IAAS,KAG1BjO,OAAOgO,KAAKmH,GAAoBzX,SAAQ,SAAAuQ,UAC/B6R,EAAe7R,WAKrB/E,GACH4W,eAAAA,OAIAlW,EAAOjK,OAASvE,EAAQgkB,kBAAmB,KACrCne,EAA2B2I,EAA3B3I,GAAW8e,EAAgBnW,EAAvBpO,MACJoR,EAAmCnN,EAAnCmN,WAAmCnN,EAAzBwgB,cAAAA,gBAMZN,EADM/S,EAAS3L,GACE0e,WACjBvR,OACmB,IAAhB2R,EAA8BA,GAAeJ,KAElDA,IAAevR,SACVlF,MAGHgX,OAAyBhX,EAAM4W,uBAEf,SAAhBK,EAAgBlf,OACdK,EAAMsL,EAAS3L,MAEhBK,EAAIuS,YACHzF,EACF8R,EAAkBjf,IAAM,SAEjBif,EAAkBjf,IAIzBgf,GAAiB3e,EAAImE,eAChBnE,EAAImE,QAAQ/H,SAAQ,SAAA4D,UAAO6e,EAAc7e,EAAIL,OAIxDkf,CAAclf,QAGTiI,GACH4W,eAAgBI,KAKtB,SAASrY,GAAYpI,OAEjBiN,EAUEjN,EAVFiN,KACA1H,EASEvF,EATFuF,KACAyF,EAQEhL,EARFgL,SACA5M,EAOE4B,EAPF5B,QACA+O,EAMEnN,EANFmN,WAMEnN,EALF0V,mBAAAA,aAAqBvI,MAKnBnN,EAJF2gB,sBAAAA,gBACSN,EAGPrgB,EAHFyJ,MAAS4W,iBAGPrgB,EAFFwgB,cAAAA,gBACAzV,EACE/K,EADF+K,SAGF5M,EACEC,EACA,CAAC,aAAc,aAAc,aAC7B,oBAGIwiB,EAAmBzhB,EAAM6P,SAAQ,eAC/B4R,EAAmB,UAEzBrb,EAAKtH,SAAQ,SAAA4D,OACLqe,EAAaM,EAmEzB,SAASK,EAAiBhf,EAAKwe,MACzBA,EAAexe,EAAIL,WACd,KAGLK,EAAImE,SAAWnE,EAAImE,QAAQrD,OAAQ,KACjCme,GAAsB,EACtBC,GAAe,SAEnBlf,EAAImE,QAAQ/H,SAAQ,SAAA4Y,GAEdkK,IAAiBD,IAIjBD,EAAiBhK,EAAQwJ,GAC3BU,GAAe,EAEfD,GAAsB,QAGnBA,KAA6BC,GAAe,YAG9C,EA1FCF,CAAiBhf,EAAKwe,KACpBA,EAAexe,EAAIL,IACzBK,EAAIqe,aAAeA,EACnBre,EAAIse,eAAgC,OAAfD,EAEjBA,GACFU,EAAiBhe,KAAKf,MAInB+e,IACN,CAACrb,EAAMib,EAAeH,IAErBD,EAAoBrR,QACtBxO,OAAOgO,KAAKmH,GAAoB/S,QAAUpC,OAAOgO,KAAK8R,GAAgB1d,QAGpEyd,GACE7f,OAAOgO,KAAKmH,GAAoBlR,MAAK,SAAAhD,UAAO6e,EAAe7e,QAC7D4e,GAAoB,OAIlBY,EAA2BhiB,EAAa2hB,GAE9ChhB,GAAuB,WACjBqhB,KACFjW,EAAS,CAAE7K,KAAMvE,EAAQ8jB,sBAE1B,CAAC1U,EAAUkC,QAERyS,EAAwBvgB,EAAMG,aAClC,SAAAvD,UAASgP,EAAS,CAAE7K,KAAMvE,EAAQ+jB,sBAAuB3jB,MAAAA,MACzD,CAACgP,IAGG4U,EAAoBxgB,EAAMG,aAC9B,SAACkC,EAAIzF,UAAUgP,EAAS,CAAE7K,KAAMvE,EAAQgkB,kBAAmBne,GAAAA,EAAIzF,MAAAA,MAC/D,CAACgP,IAGGG,EAAclM,EAAagB,GAE3B+f,EAAgCnjB,EACpCoO,IAAW+U,8BACX,CAAE/f,SAAUkL,MAGd3K,OAAOmD,OAAO1D,EAAU,CACtB4gB,iBAAAA,EACAR,kBAAAA,EACAT,kBAAAA,EACAD,sBAAAA,EACAK,8BAAAA,IAIJ,SAAS1X,GAAWxG,SAAO7B,IAAAA,SACzB6B,EAAI8d,kBAAoB,SAAAvc,UAAOpD,EAAS2f,kBAAkB9d,EAAIL,GAAI4B,IAElEvB,EAAIge,0BAA4BjjB,EAC9BoD,EAASgL,WAAW6U,0BACpB,CAAE7f,SAAUA,EAAU6B,IAAAA,IC9O1B,IAAMof,GAAiC,SAAA5T,SAAgB,IACjD6T,GAAkC,SAAA7T,SAAgB,IAGxD1R,EAAQwlB,YAAc,cACtBxlB,EAAQylB,aAAe,eACvBzlB,EAAQ0lB,cAAgB,oBAEXC,GAAc,SAAAzkB,GACzBA,EAAM2K,cAAc5E,KAAK4G,IACzB3M,EAAMuL,YAAYxF,KAAKwF,IACvBvL,EAAMwL,WAAWzF,KAAKyF,KAKxB,SAASmB,GAAQC,EAAOU,EAAQC,EAAepK,SAKzCA,EAHFuhB,wBAAAA,aAA0BN,OAGxBjhB,EAFFwhB,yBAAAA,aAA2BN,KAC3B/T,EACEnN,EADFmN,YAGEhD,EAAOjK,OAASvE,EAAQC,eAExB6lB,SAAU,IACPhY,MAIHU,EAAOjK,OAASvE,EAAQ0lB,0BAErB5X,GACHgY,SAAUzhB,EAASqK,aAAaoX,UAAY,QAI5CtX,EAAOjK,OAASvE,EAAQwlB,YAAa,OAC/B3S,EAAiBrE,EAAjBqE,MAAOzS,EAAUoO,EAAVpO,MAET2lB,OAC6B,IAA1BjY,EAAMgY,SAASjT,GAClB/E,EAAMgY,SAASjT,GACf+S,EAAwBpU,EAASqB,GAAO1I,sBAGzC2D,GACHgY,cACKhY,EAAMgY,iBACRjT,GAAQ3P,EAAiB9C,EAAO2lB,YAKnCvX,EAAOjK,OAASvE,EAAQylB,aAAc,WAChC5S,EAA2BrE,EAA3BqE,MAAOhE,EAAoBL,EAApBK,SAAUzO,EAAUoO,EAAVpO,MAEnB2lB,OAC6B,IAA1BjY,EAAMgY,SAASjT,GAClB/E,EAAMgY,SAASjT,GACf+S,EAAwBpU,EAASqB,GAAO1I,UAExC6b,OAC0C,WAAvCD,YAAAA,EAAaE,kBAAbC,EAAyBrX,IAC5BkX,EAAYE,UAAUpX,GACtBgX,EAAyBrU,EAASqB,GAAO1I,sBAG1C2D,GACHgY,cACKhY,EAAMgY,iBACRjT,QACIkT,GACHE,eACMF,EAAYE,WAAa,WAC5BpX,GAAW3L,EAAiB9C,EAAO4lB,gBAQhD,SAASvZ,GAAYpI,SACkCA,EAA7C8hB,kBAAAA,gBAA0B7U,EAAmBjN,EAAnBiN,KAAMlC,EAAa/K,EAAb+K,SAElCoW,EAAchiB,EAAMG,aACxB,SAACkP,EAAOzS,UACNgP,EAAS,CACP7K,KAAMvE,EAAQwlB,YACd3S,MAAAA,EACAzS,MAAAA,MAEJ,CAACgP,IAGGqW,EAAejiB,EAAMG,aACzB,SAACkP,EAAOhE,EAAUzO,UAChBgP,EAAS,CACP7K,KAAMvE,EAAQylB,aACd5S,MAAAA,EACAhE,SAAAA,EACAzO,MAAAA,MAEJ,CAACgP,IAGGgX,EAAuB/iB,EAAa8iB,GAE1CniB,GAAuB,WACjBoiB,KACFhX,EAAS,CAAE7K,KAAMvE,EAAQ0lB,kBAE1B,CAACpU,IAEJ1M,OAAOmD,OAAO1D,EAAU,CACtBmhB,YAAAA,EACAC,aAAAA,IAIJ,SAAS/Y,GAAWxG,SAAO7B,IAAAA,WAKrBA,EAHFuhB,wBAAAA,aAA0BN,OAGxBjhB,EAFFwhB,yBAAAA,aAA2BN,KAClBO,EACPzhB,EADFyJ,MAASgY,SAGP5f,EAAIiE,WACNjE,EAAI4H,WAC0B,IAArBgY,EAAS5f,EAAIL,IAChBigB,EAAS5f,EAAIL,IACb+f,EAAwB1f,EAAIiE,UAElCjE,EAAImgB,SAAW,SAAAljB,UACNkB,EAASmhB,YAAYtf,EAAIL,GAAI1C,IAGtC+C,EAAI6L,MAAMzP,SAAQ,SAAAoJ,GACXxF,EAAI4H,MAAMmY,YACb/f,EAAI4H,MAAMmY,UAAY,IAGxBva,EAAKoC,WAC4C,IAAxC5H,EAAI4H,MAAMmY,UAAUva,EAAKpH,OAAOuB,IACnCK,EAAI4H,MAAMmY,UAAUva,EAAKpH,OAAOuB,IAChCggB,EAAyB3f,EAAIiE,UAEnCuB,EAAK2a,SAAW,SAAAljB,UACPkB,EAASohB,aAAavf,EAAIL,GAAI6F,EAAKpH,OAAOuB,GAAI1C,QAvI7DwiB,GAAYhjB,WAAa,cClBzB3C,EAAQsmB,iBAAmB,mBAC3BtmB,EAAQumB,eAAiB,qBAEZC,GAAiB,SAAAtlB,GAC5BA,EAAM2K,cAAc5E,KAAK4G,IACzB3M,EAAMoL,mBAAmBrF,MAAK,SAAC/C,SAAQG,IAAAA,yBAC1BH,GAAMG,EAASyJ,MAAM2Y,iBAElCvlB,EAAMmL,eAAepF,KAAKoF,IAC1BnL,EAAMuL,YAAYxF,KAAKwF,KAKzB,SAASoB,GAAQC,EAAOU,EAAQC,EAAepK,UACzCmK,EAAOjK,OAASvE,EAAQC,QAExBwmB,YAAa,IACV3Y,GAIHU,EAAOjK,OAASvE,EAAQsmB,sBAErBxY,GACH2Y,YAAapiB,EAASqK,aAAa+X,aAAe,KAIlDjY,EAAOjK,OAASvE,EAAQumB,oBAErBzY,GACH2Y,YAAavjB,EAAiBsL,EAAOiY,YAAa3Y,EAAM2Y,sBAK9D,SAASpa,GACP/G,SAGamhB,IADXpiB,SACEyJ,MAAS2Y,gBAKRA,IAAgBA,EAAYzf,cACxB1B,UAGHohB,YAAsBD,GAGtBE,YAAkBrhB,GAGlBshB,EAAiB,oBAIfC,EAAiBH,EAAgBtK,QACjC0K,EAAaH,EAAY7jB,WAAU,SAAAoE,UAAKA,EAAErB,KAAOghB,KACnDC,GAAc,GAChBF,EAAe3f,KAAK0f,EAAYxI,OAAO2I,EAAY,GAAG,KAJnDH,EAAY3f,QAAU0f,EAAgB1f,4BASlC4f,EAAmBD,GAGhC,SAASla,GAAYpI,OACX+K,EAAa/K,EAAb+K,SAER/K,EAASkiB,eAAiB/iB,EAAMG,aAC9B,SAAA8iB,UACSrX,EAAS,CAAE7K,KAAMvE,EAAQumB,eAAgBE,YAAAA,MAElD,CAACrX,IAlELoX,GAAe7jB,WAAa,iBCN5BzC,EAAckR,WAAY,EAG1BpR,EAAQ+mB,oBAAsB,sBAC9B/mB,EAAQgnB,eAAiB,iBACzBhnB,EAAQinB,mBAAqB,yBAEhBC,GAAmB,SAAAhmB,GAC9BA,EAAMimB,gBAAkB,CAACC,IACzBlmB,EAAM6L,eAAe9F,KAAK,CACxBlG,MAAO,CACLsmB,SAAU,cAGdnmB,EAAM2K,cAAc5E,KAAK4G,IACzB3M,EAAMuL,YAAYxF,KAAKwF,IACvBvL,EAAMsL,4BAA4BvF,KAAKuF,KAGnC4a,GAAyB,SAACvmB,SAASwD,IAAAA,SAAUqM,IAAAA,OACzCtB,EAAa/K,EAAb+K,SAEFkY,EAAgB,SAAC1f,EAAG8I,OACpB6W,GAAe,KACJ,eAAX3f,EAAErD,KAAuB,IAEvBqD,EAAE4f,SAAW5f,EAAE4f,QAAQxgB,OAAS,SAGpCugB,GAAe,MAGXE,EAyLV,SAAwB/W,OAChBgX,EAAc,UACE,SAAhBC,EAAgBjX,GAChBA,EAAOpL,SAAWoL,EAAOpL,QAAQ0B,QACnC0J,EAAOpL,QAAQG,IAAIkiB,GAErBD,EAAYzgB,KAAKyJ,GAEnBiX,CAAcjX,GACPgX,EAnMmBE,CAAelX,GACAjL,KAAI,SAAAyB,SAAK,CAACA,EAAErB,GAAIqB,EAAE4J,eAEnD+W,EAAUN,EAAetW,KAAK6W,MAAMlgB,EAAE4f,QAAQ,GAAGK,SAAWjgB,EAAEigB,QAE9DE,EAAe,SAAAC,GACnB5Y,EAAS,CAAE7K,KAAMvE,EAAQgnB,eAAgBa,QAASG,KAE9CC,EAAc,kBAAM7Y,EAAS,CAAE7K,KAAMvE,EAAQinB,sBAE7CiB,EAAoB,CACxBC,MAAO,CACLC,UAAW,YACXC,YAAa,SAAAzgB,UAAKmgB,EAAangB,EAAEigB,UACjCS,QAAS,UACTC,UAAW,SAAA3gB,GACT/D,SAAS2kB,oBACP,YACAN,EAAkBC,MAAME,aAE1BxkB,SAAS2kB,oBACP,UACAN,EAAkBC,MAAMI,WAE1BN,MAGJQ,MAAO,CACLL,UAAW,YACXC,YAAa,SAAAzgB,UACPA,EAAE8gB,aACJ9gB,EAAE+gB,iBACF/gB,EAAEghB,mBAEJb,EAAangB,EAAE4f,QAAQ,GAAGK,UACnB,GAETS,QAAS,WACTC,UAAW,SAAA3gB,GACT/D,SAAS2kB,oBACPN,EAAkBO,MAAML,UACxBF,EAAkBO,MAAMJ,aAE1BxkB,SAAS2kB,oBACPN,EAAkBO,MAAMH,QACxBJ,EAAkBO,MAAMJ,aAE1BJ,OAKAY,EAAStB,EACXW,EAAkBO,MAClBP,EAAkBC,MACtBtkB,SAASilB,iBAAiBD,EAAOT,UAAWS,EAAOR,YAAa,CAC9DU,SAAS,IAEXllB,SAASilB,iBAAiBD,EAAOP,QAASO,EAAON,UAAW,CAC1DQ,SAAS,IAGX3Z,EAAS,CACP7K,KAAMvE,EAAQ+mB,oBACdlY,SAAU6B,EAAO7K,GACjBmjB,YAAatY,EAAOI,WACpB2W,eAAAA,EACAI,QAAAA,WAIG,CACLhnB,EACA,CACEooB,YAAa,SAAArhB,UAAKA,EAAEsQ,WAAaoP,EAAc1f,EAAG8I,IAClDwY,aAAc,SAAAthB,UAAKA,EAAEsQ,WAAaoP,EAAc1f,EAAG8I,IACnD3P,MAAO,CACL2G,OAAQ,aAEVyhB,WAAW,EACXpe,KAAM,eAOZ,SAAS8C,GAAQC,EAAOU,MAClBA,EAAOjK,OAASvE,EAAQC,eAExB+mB,eAAgB,CACdoC,aAAc,KAEbtb,MAIHU,EAAOjK,OAASvE,EAAQ+mB,oBAAqB,KACvCc,EAAmDrZ,EAAnDqZ,QAAShZ,EAA0CL,EAA1CK,SAAUma,EAAgCxa,EAAhCwa,YAAavB,EAAmBjZ,EAAnBiZ,2BAGnC3Z,GACHkZ,oBACKlZ,EAAMkZ,gBACTqC,OAAQxB,EACRJ,eAAAA,EACAuB,YAAAA,EACAM,iBAAkBza,SAKpBL,EAAOjK,OAASvE,EAAQgnB,eAAgB,KAClCa,EAAYrZ,EAAZqZ,UACwC/Z,EAAMkZ,eAA9CqC,IAAAA,OAAQL,IAAAA,YAAavB,IAAAA,eAGvB8B,GADS1B,EAAUwB,GACSL,EAE5BQ,EAAkB,UAExB/B,EAAenlB,SAAQ,gBAAEmnB,OAAUC,OACjCF,EAAgBC,GAAYxY,KAAKE,IAC/BuY,EAAcA,EAAcH,EAC5B,WAKCzb,GACHkZ,oBACKlZ,EAAMkZ,gBACToC,kBACKtb,EAAMkZ,eAAeoC,gBACrBI,cAMPhb,EAAOjK,OAASvE,EAAQinB,wBAErBnZ,GACHkZ,oBACKlZ,EAAMkZ,gBACTqC,OAAQ,KACRC,iBAAkB,gBA7D1BpC,GAAiBvkB,WAAa,mBAmE9B,IAAM6J,GAA8B,SAAAnI,OAEhC8K,EAIE9K,EAJF8K,YACAwa,EAGEtlB,EAHFslB,gBACAta,EAEEhL,EAFFgL,SACS2X,EACP3iB,EADFyJ,MAASkZ,eAGLzX,EAAclM,EAAagB,GAEjC8K,EAAY7M,SAAQ,SAAAoO,OACZU,EAAYhI,GACW,IAA3BsH,EAAOiZ,sBAAmC1X,GACtB,IAApB0X,QAAmC1X,GACnC,GAGFvB,EAAOU,UAAYA,EACnBV,EAAOrQ,MAAQ2mB,EAAeoC,aAAa1Y,EAAO7K,KAAO6K,EAAOrQ,MAChEqQ,EAAOkZ,WAAa5C,EAAesC,mBAAqB5Y,EAAO7K,GAE3DuL,IACFV,EAAOyW,gBAAkBlmB,EAAeoO,IAAW8X,gBAAiB,CAClE9iB,SAAUkL,IACVmB,OAAAA,SAMR,SAASjE,MACPjK,IADqBC,QACM,CAAC,qBAAsB,wBCjO9ConB,GAAa,CACjBxC,SAAU,WACVyC,IAAK,GAGMC,GAAoB,SAAA7oB,GAC/BA,EAAM0L,kBAAkB3F,KAAK+iB,IAC7B9oB,EAAM+L,YAAYhG,KAAK+iB,IACvB9oB,EAAM2L,oBAAoB5F,KAAK+iB,IAE/B9oB,EAAM6L,eAAe9F,MAAK,SAACpG,SAASyD,IAAAA,aAAa,CAC/CzD,EACA,CACEE,WACK8oB,IACHxZ,KAAS/L,EAAOsM,eAChBvQ,MAAUiE,EAAOwM,uBAKvB5P,EAAMgM,aAAajG,MAAK,SAACpG,SAAS6K,IAAAA,WAAW,CAC3C7K,EACA,CACEE,WACK8oB,IACHxZ,KAAS3E,EAAKpH,OAAOsM,eACrBvQ,MAAUqL,EAAKpH,OAAOwM,wBAM9BiZ,GAAkBpnB,WAAa,oBAE/B,IAAMqnB,GAAe,SAACnpB,WAAwB,CAC5CA,EACA,CACEE,MAAO,CACLsmB,SAAU,WACVhnB,QALyBgE,SAKN4lB,2BCxCnBJ,GAAa,CACjBK,QAAS,eACTC,UAAW,cAGPH,GAAe,SAACnpB,WAAwB,CAC5CA,EACA,CACEE,MAAO,CACLmpB,QAAS,OACT7pB,QALyBgE,SAKN4lB,2BAKZG,GAAiB,SAAAlpB,GAC5BA,EAAM+L,YAAYhG,KAAK+iB,IACvB9oB,EAAM2L,oBAAoB5F,KAAK+iB,IAE/B9oB,EAAM6L,eAAe9F,MAAK,SAACpG,SAASyD,IAAAA,aAAa,CAC/CzD,EACA,CACEE,WACK8oB,IACHxpB,MAAUiE,EAAOwM,uBAKvB5P,EAAMgM,aAAajG,MAAK,SAACpG,SAAS6K,IAAAA,WAAW,CAC3C7K,EACA,CACEE,WACK8oB,IACHxpB,MAAUqL,EAAKpH,OAAOwM,wBClCvB,SAASuZ,GAAcnpB,GAC5BA,EAAMyL,cAAc1F,KAAK0F,IACzBzL,EAAM+L,YAAYhG,KAAK+iB,IACvB9oB,EAAM2L,oBAAoB5F,KAAK+iB,IAC/B9oB,EAAM6L,eAAe9F,KAAK8F,IAC1B7L,EAAMgM,aAAajG,KAAKiG,IDmC1Bkd,GAAeznB,WAAa,iBChC5B0nB,GAAc1nB,WAAa,gBAE3B,IAAMgK,GAAgB,SAAC9L,WAAwB,CAC7CA,EACA,CACEE,MAAO,CACLT,WAJ0B+D,SAIJ4lB,2BAKtBD,GAAe,SAACnpB,WAAwB,CAC5CA,EACA,CACEE,MAAO,CACLmpB,QAAS,OACTI,KAAM,WACNhqB,WANyB+D,SAMHkmB,8BAKtBxd,GAAiB,SAAClM,SAASyD,IAAAA,aAAa,CAC5CzD,EACA,CACEE,MAAO,CACLopB,UAAW,aACXG,KAAMhmB,EAAO0M,eACN1M,EAAO0M,8BACViB,EACJ3R,SAAagE,EAAOuM,mBACpBxQ,MAAUiE,EAAOwM,oBAKjB5D,GAAe,SAACrM,SAAS6K,IAAAA,WAAW,CACxC7K,EACA,CACEE,MAAO,CACLopB,UAAW,aACXG,KAAS5e,EAAKpH,OAAO0M,yBACrB1Q,SAAaoL,EAAKpH,OAAOuM,mBACzBxQ,MAAUqL,EAAKpH,OAAOwM,2TrB4GrB,SAA0B0Z,EAAWC,YAAAA,IAAAA,EAAc,OAClDC,EAAclnB,EAAMC,OAAO,IAE3BknB,EAAetnB,EAAamnB,GAC5BI,EAAiBvnB,EAAaonB,UAE7BjnB,EAAMG,uCACX,kIAAU0F,2BAAAA,iBACHqhB,EAAYhnB,QAAQmnB,UACvBH,EAAYhnB,QAAQmnB,QAAU,IAAIC,SAAQ,SAACC,EAASC,GAClDN,EAAYhnB,QAAQqnB,QAAUA,EAC9BL,EAAYhnB,QAAQsnB,OAASA,MAI7BN,EAAYhnB,QAAQunB,SACtBC,aAAaR,EAAYhnB,QAAQunB,SAGnCP,EAAYhnB,QAAQunB,QAAUE,sCAAW,2GAChCT,EAAYhnB,QAAQunB,sBAEzBP,EAAYhnB,iBAAsBinB,iBAAkBthB,2BAAhC0hB,wEAEpBL,EAAYhnB,QAAQsnB,6CAEbN,EAAYhnB,QAAQmnB,oFAE5BD,uBAEIF,EAAYhnB,QAAQmnB,oDAE7B,CAACF,EAAcC,wRIvIK,SAAC/pB,8BAAU4B,mCAAAA,oBAEjC5B,EAAQmP,GAAcnP,GAGtB4B,GAAW+K,UAAwB/K,OAG/B2oB,EAAc5nB,EAAMC,OAAO,IAGzB8L,EAAclM,EAAa+nB,EAAY1nB,SAG7CkB,OAAOmD,OAAOwH,SACT1O,GACH4B,QAAAA,EACAvB,MAAOyK,OAITlJ,EAAQ8H,OAAO6I,SAAS9Q,SAAQ,SAAAS,GAC9BA,EAAOwM,IAAcrO,cAIjBmO,EAAWhM,EAAakM,IAAcrO,OAC5CqO,IAAcF,SAAWA,SAClBE,IAAcrO,MAGrB0D,OAAOmD,OACLwH,IACA7N,EAAY2N,IAAWzD,WAAYoE,GAAcnP,WAY/C0O,IARF+B,IAAAA,KACS+Z,IAAT/lB,QACAoJ,IAAAA,aACAxO,IAAAA,cACA+P,IAAAA,WACAC,IAAAA,SACAC,IAAAA,aACArE,IAAAA,mBAIIwf,EAAkBjoB,EAAa8M,GAG/BtC,EAAUrK,EAAMG,aACpB,SAACmK,EAAOU,OAEDA,EAAOjK,WACVtC,QAAQC,KAAK,CAAEsM,OAAAA,IACT,IAAIrM,MAAM,2BAIX,UACFkN,IAAWxD,cAEVrK,MAAMC,QAAQ6pB,KACdA,IACA,CAACA,MACL1qB,QACA,SAAC2qB,EAAGC,UAAYA,EAAQD,EAAG/c,EAAQV,EAAOyB,MAAkBgc,IAC5Dzd,KAGJ,CAACuB,EAAUic,EAAiB/b,MAIG/L,EAAMioB,WAAW5d,OAASoE,GAAW,kBACpEpE,EAAQa,EAAc,CAAEnK,KAAMvE,EAAQC,UADjCyrB,OAActc,OAKftB,EAAQpM,YACR2N,IAAWvD,oBAAoBA,IACnC4f,EACA,CAAErnB,SAAUkL,MAGd3K,OAAOmD,OAAOwH,IAAe,CAC3BzB,MAAAA,EACAsB,SAAAA,QAII9J,EAAU9B,EAAM6P,SACpB,kBACEhO,EACE3D,EAAY2N,IAAW/J,QAAS+lB,EAAa,CAC3ChnB,SAAUkL,UAIdF,EACAE,EACA8b,UAEG3pB,EAAY2N,IAAWtD,YAAa,GAAI,CAAE1H,SAAUkL,QAG3DA,IAAcjK,QAAUA,MAIpB8C,EAAa5E,EAAM6P,SACrB,kBACE3R,EAAY2N,IAAWjH,WAAYzC,EAAeL,GAAU,CAC1DjB,SAAUkL,MACT9J,IAAIC,MAEPJ,EACA+J,EACAE,UAEG7N,EAAY2N,IAAWrD,eAAgB,GAAI,CAC5C3H,SAAUkL,QAIhBA,IAAcnH,WAAaA,QAGQ5E,EAAM6P,SAAQ,mBAC3CzJ,EAAO,GACP2H,EAAW,GACTC,EAAW,GAEXma,YAAsBvjB,GAErBujB,EAAgB3kB,QAAQ,KACvB1C,EAASqnB,EAAgBvP,QAC/B/K,GAAoB,CAClBC,KAAAA,EACA1H,KAAAA,EACA2H,SAAAA,EACAC,SAAAA,EACAlN,OAAAA,EACA4L,SAAAA,EACAD,WAAAA,EACAwB,iBAAkBpC,IAAWpD,YAC7BsD,YAAAA,UAIG,CAAC3F,EAAM2H,EAAUC,KACvB,CAACpJ,EAAYkJ,EAAMpB,EAAUD,EAAYZ,EAAUE,IAvB/C3F,OAAM2H,OAAUC,OAyBvB5M,OAAOmD,OAAOwH,IAAe,CAC3B3F,KAAAA,EACA2H,SAAAA,EACAC,SAAAA,IAIFpP,EAAUiN,IAAWjD,qBAAsBmD,SAKvClD,EAAiB7I,EAAM6P,SACzB,kBACE3R,EAAY2N,IAAWhD,eAAgBjE,EAAY,CACjD/D,SAAUkL,MACT9J,KAAI,SAAAyB,UAAKc,EAAed,EAAGhH,SAE9BmP,EACAjH,EACAmH,EACArP,UAEGwB,EAAY2N,IAAW/C,mBAAoB,GAAI,CAChDjI,SAAUkL,WAMhBnH,EAAa5E,EAAM6P,SAAQ,eACnB/N,YAAc+G,UAEpBjE,EAAW9F,SAAQ,SAAAgC,GACZgB,EAAQuP,MAAK,SAAA3N,UAAKA,EAAErB,KAAOvB,EAAOuB,OACrCP,EAAQ2B,KAAK3C,MAIVgB,IACN,CAAC8C,EAAYiE,IAChBkD,IAAcnH,WAAaA,EAEE,eAAzBtG,QAAQC,IAAIC,SAA2B,KACnC4pB,EAAmBxjB,EAAWmC,QAAO,SAACjG,EAAQyC,UAC3CqB,EAAWtF,WAAU,SAAAoE,UAAKA,EAAErB,KAAOvB,EAAOuB,QAAQkB,QAGvD6kB,EAAiB5kB,aACnB/E,QAAQC,KAAKkG,GACP,IAAIjG,iDACmCypB,EACxCnmB,KAAI,SAAAyB,UAAKA,EAAErB,MACXwB,KAAK,0CAMRgB,EAAe7E,EAAM6P,SACzB,kBACE3R,EACE2N,IAAWhH,aACXF,EAAiBkE,EAAgBnM,GACjCqP,QAGFF,EACAhD,EACAnM,EACAqP,UAEG7N,EAAY2N,IAAW9C,iBAAkB,GAAI,CAC9ClI,SAAUkL,QAIhBA,IAAclH,aAAeA,MAGvBK,EAAUlF,EAAM6P,SACpB,kBAAOhL,EAAarB,OAASqB,EAAa,GAAGK,QAAU,KACvD,CAACL,IAEHkH,IAAc7G,QAAUA,EAGxB6G,IAAcJ,YAAc9G,EAAazH,QACvC,SAACirB,EAAKpjB,mBAAoBojB,EAAQpjB,EAAYC,WAC9C,IAGFtG,EAAUiN,IAAW7C,4BAA6B+C,SAG5Cuc,EAAoBzf,EACvB9B,QAAO,SAAArD,UAAKA,EAAEkH,aACd3I,KAAI,SAAAyB,UAAKA,EAAErB,MACX6W,OACArV,KAAK,KAERgF,EAAiB7I,EAAM6P,SACrB,kBAAMhH,EAAe9B,QAAO,SAAArD,UAAKA,EAAEkH,gBAElC/B,EAAgByf,IAEnBvc,IAAclD,eAAiBA,QAO3B+D,GAAsB1H,GAHxB6hB,OACAN,OACA8B,cAGFxc,IAAcgb,qBAAuBA,EACrChb,IAAc0a,kBAAoBA,EAClC1a,IAAcwc,qBAAuBA,EAErC3pB,EAAUiN,IAAW5C,YAAa8C,eAI7BA,IAAcJ,YAAgBI,IAAcnH,YAAY9F,SAC3D,SAAAgC,GAEEA,EAAO0nB,OAAS5nB,EAAamL,IAAejL,GAG5CA,EAAOyI,eAAiB9L,EAAeoO,IAAWtC,eAAgB,CAChE1I,SAAUkL,IACVjL,OAAAA,IAIFA,EAAO0I,eAAiB/L,EAAeoO,IAAWrC,eAAgB,CAChE3I,SAAUkL,IACVjL,OAAAA,OAKNiL,IAAclH,aAAe7E,EAAM6P,SACjC,kBACEhL,EAAakC,QAAO,SAAC9B,EAAa1B,UAEhC0B,EAAYC,QAAUD,EAAYC,QAAQ6B,QAAO,SAAAjG,UAQ3CA,EAAOoE,QAPK,SAAVgB,EAAUhB,UACdA,EAAQ6B,QAAO,SAAAjG,UACTA,EAAOoE,QACFgB,EAAQpF,EAAOoE,SAEjBpE,EAAO8J,aACbpH,OAEI0C,CAAQpF,EAAOoE,SAEjBpE,EAAO8J,eAIZ3F,EAAYC,QAAQ1B,SACtByB,EAAYoE,oBAAsB5L,EAChCoO,IAAWxC,oBACX,CAAExI,SAAUkL,IAAe9G,YAAAA,EAAa6C,MAAOvE,IAGjD0B,EAAYqE,oBAAsB7L,EAChCoO,IAAWvC,oBACX,CAAEzI,SAAUkL,IAAe9G,YAAAA,EAAa6C,MAAOvE,KAG1C,QAKb,CAACsB,EAAckH,EAAaF,IAG9BE,IAAc0c,aAAe,UAAI1c,IAAclH,cAAcW,UAK7DuG,IAAc7C,WAAalJ,EAAMG,aAC/B,SAAAuC,GACEA,EAAI+G,YAAchM,EAAeoO,IAAWpC,YAAa,CACvD5I,SAAUkL,IACVrJ,IAAAA,IAIFA,EAAIqV,SAAWnT,EAAW3C,KAAI,SAAAnB,OACtBlE,EAAQ8F,EAAI8L,OAAO1N,EAAOuB,IAE1B6F,EAAO,CACXpH,OAAAA,EACA4B,IAAAA,EACA9F,MAAAA,UAIFsL,EAAKwB,aAAejM,EAAeoO,IAAWnC,aAAc,CAC1D7I,SAAUkL,IACV7D,KAAAA,IAIFA,EAAKsgB,OAAS5nB,EAAamL,IAAejL,EAAQ,CAChD4B,IAAAA,EACAwF,KAAAA,EACAtL,MAAAA,IAGKsL,KAGTxF,EAAI6L,MAAQ1F,EAAe5G,KAAI,SAAAnB,UAC7B4B,EAAIqV,SAAS1G,MAAK,SAAAnJ,UAAQA,EAAKpH,OAAOuB,KAAOvB,EAAOuB,SAItDzD,EAAUiN,IAAW3C,WAAYxG,EAAK,CAAE7B,SAAUkL,QAEpD,CAACF,EAAUE,EAAanH,EAAYiE,IAGtCkD,IAAc5C,cAAgB1L,EAAeoO,IAAW1C,cAAe,CACrEtI,SAAUkL,MAGZA,IAAc3C,kBAAoB3L,EAChCoO,IAAWzC,kBACX,CACEvI,SAAUkL,MAIdnN,EAAUiN,IAAWlC,iBAAkBoC,KAEhCA"}